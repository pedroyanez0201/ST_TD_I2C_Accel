
ST_TD_I2C_Accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e60  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08007ff8  08007ff8  00017ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008468  08008468  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08008468  08008468  00018468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008470  08008470  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008470  08008470  00018470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008474  08008474  00018474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08008478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200000b0  08008524  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08008524  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d434  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002145  00000000  00000000  0002d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00030148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017168  00000000  00000000  00030b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010787  00000000  00000000  00047cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a33e  00000000  00000000  00058437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2775  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003108  00000000  00000000  000e27c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007fe0 	.word	0x08007fe0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b4 	.word	0x200000b4
 80001d4:	08007fe0 	.word	0x08007fe0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b974 	b.w	8000e74 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	468e      	mov	lr, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14d      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	d969      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b152      	cbz	r2, 8000bd4 <__udivmoddi4+0x30>
 8000bbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc2:	f1c2 0120 	rsb	r1, r2, #32
 8000bc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bce:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	0c21      	lsrs	r1, r4, #16
 8000bda:	fbbe f6f8 	udiv	r6, lr, r8
 8000bde:	fa1f f78c 	uxth.w	r7, ip
 8000be2:	fb08 e316 	mls	r3, r8, r6, lr
 8000be6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bea:	fb06 f107 	mul.w	r1, r6, r7
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfa:	f080 811f 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 811c 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c10:	fb08 3310 	mls	r3, r8, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 f707 	mul.w	r7, r0, r7
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x92>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c28:	f080 810a 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2c:	42a7      	cmp	r7, r4
 8000c2e:	f240 8107 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c32:	4464      	add	r4, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	1be4      	subs	r4, r4, r7
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	b11d      	cbz	r5, 8000c48 <__udivmoddi4+0xa4>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c5 4300 	strd	r4, r3, [r5]
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	f000 80ef 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5e:	4630      	mov	r0, r6
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f683 	clz	r6, r3
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80f9 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	469e      	mov	lr, r3
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa4>
 8000c86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8092 	bne.w	8000dbe <__udivmoddi4+0x21a>
 8000c9a:	eba1 010c 	sub.w	r1, r1, ip
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	0c20      	lsrs	r0, r4, #16
 8000caa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cae:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	4288      	cmp	r0, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a09      	subs	r1, r1, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79c      	b.n	8000c3e <__udivmoddi4+0x9a>
 8000d04:	f1c6 0720 	rsb	r7, r6, #32
 8000d08:	40b3      	lsls	r3, r6
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa20 f407 	lsr.w	r4, r0, r7
 8000d16:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1a:	431c      	orrs	r4, r3
 8000d1c:	40f9      	lsrs	r1, r7
 8000d1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d22:	fa00 f306 	lsl.w	r3, r0, r6
 8000d26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2a:	0c20      	lsrs	r0, r4, #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fb09 1118 	mls	r1, r9, r8, r1
 8000d34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d38:	fb08 f00e 	mul.w	r0, r8, lr
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1a09      	subs	r1, r1, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d64:	fb09 1110 	mls	r1, r9, r0, r1
 8000d68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d70:	458e      	cmp	lr, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	458e      	cmp	lr, r1
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d8e:	eba1 010e 	sub.w	r1, r1, lr
 8000d92:	42a1      	cmp	r1, r4
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46a6      	mov	lr, r4
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x212>
 8000d9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000da2:	eb61 010e 	sbc.w	r1, r1, lr
 8000da6:	fa01 f707 	lsl.w	r7, r1, r7
 8000daa:	fa22 f306 	lsr.w	r3, r2, r6
 8000dae:	40f1      	lsrs	r1, r6
 8000db0:	431f      	orrs	r7, r3
 8000db2:	e9c5 7100 	strd	r7, r1, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	40d8      	lsrs	r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	4301      	orrs	r1, r0
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ddc:	fb07 3610 	mls	r6, r7, r0, r3
 8000de0:	0c0b      	lsrs	r3, r1, #16
 8000de2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000de6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dea:	429e      	cmp	r6, r3
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	429e      	cmp	r6, r3
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1b9b      	subs	r3, r3, r6
 8000e06:	b289      	uxth	r1, r1
 8000e08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb06 f30e 	mul.w	r3, r6, lr
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3e02      	subs	r6, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1ac9      	subs	r1, r1, r3
 8000e30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	462e      	mov	r6, r5
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e705      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	e6e3      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f8      	b.n	8000c36 <__udivmoddi4+0x92>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4646      	mov	r6, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	3b02      	subs	r3, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e709      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x156>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <Aceleracion_vertical>:

extern float G;
uint8_t flag_detecto_caida;//provisoriamente para compilar

float Aceleracion_vertical(float * zn, float * ya, arm_matrix_instance_f32 * R_b_g)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	//inicio ecuacion 38 Ian = aceleracion vertical
	arm_matrix_instance_f32 Ian,Ian_aux;
	float ian[3]={0,0,0},ian_aux[3]={0,0,0};
 8000e84:	f04f 0300 	mov.w	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
 8000e96:	f04f 0300 	mov.w	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]

	arm_mat_init_f32(&Ian, 3, 1, ian);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	f001 ff6d 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Ian_aux, 3, 1, ian_aux);
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2103      	movs	r1, #3
 8000ec4:	f001 ff65 	bl	8002d92 <arm_mat_init_f32>

	ian_aux[0] = ya[0] - G * zn[0];
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	ed93 7a00 	vldr	s14, [r3]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	edd3 6a00 	vldr	s13, [r3]
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <Aceleracion_vertical+0xd4>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ee2:	edc7 7a04 	vstr	s15, [r7, #16]
	ian_aux[1] = ya[1] - G * zn[1];
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	ed93 7a00 	vldr	s14, [r3]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	edd3 6a00 	vldr	s13, [r3]
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <Aceleracion_vertical+0xd4>)
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f04:	edc7 7a05 	vstr	s15, [r7, #20]
	ian_aux[2] = ya[2] - G * zn[1];
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	3308      	adds	r3, #8
 8000f0c:	ed93 7a00 	vldr	s14, [r3]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3304      	adds	r3, #4
 8000f14:	edd3 6a00 	vldr	s13, [r3]
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <Aceleracion_vertical+0xd4>)
 8000f1a:	edd3 7a00 	vldr	s15, [r3]
 8000f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f26:	edc7 7a06 	vstr	s15, [r7, #24]

	//arm_mat_mult_f32(&Ian, R_b_g, &Ian_aux);//obtengo la aceleracion vertical
	arm_mat_mult_f32(R_b_g, &Ian_aux, &Ian);
 8000f2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f32:	4619      	mov	r1, r3
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f002 f97c 	bl	8003232 <arm_mat_mult_f32>
	//fin ecuacion 38
	return ian[2];
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	ee07 3a90 	vmov	s15, r3
}
 8000f40:	eeb0 0a67 	vmov.f32	s0, s15
 8000f44:	3738      	adds	r7, #56	; 0x38
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008

08000f50 <Calculo_theta>:

float Calculo_theta(float * zn) //ecuacion 44
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	if (zn[2]>1.0 && zn[2]-1.0<0.09)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	edd3 7a00 	vldr	s15, [r3]
 8000f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6c:	dd1b      	ble.n	8000fa6 <Calculo_theta+0x56>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3308      	adds	r3, #8
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fa93 	bl	80004a0 <__aeabi_f2d>
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b28      	ldr	r3, [pc, #160]	; (8001020 <Calculo_theta+0xd0>)
 8000f80:	f7ff f92e 	bl	80001e0 <__aeabi_dsub>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	a320      	add	r3, pc, #128	; (adr r3, 8001010 <Calculo_theta+0xc0>)
 8000f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f92:	f7ff fd4f 	bl	8000a34 <__aeabi_dcmplt>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <Calculo_theta+0x56>
	{
		zn[2]=1.0;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3308      	adds	r3, #8
 8000fa0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fa4:	601a      	str	r2, [r3, #0]
	}

	if (zn[2]<-1.0 && zn[2]+1.0>-0.09)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3308      	adds	r3, #8
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fba:	d51a      	bpl.n	8000ff2 <Calculo_theta+0xa2>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3308      	adds	r3, #8
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fa6c 	bl	80004a0 <__aeabi_f2d>
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <Calculo_theta+0xd0>)
 8000fce:	f7ff f909 	bl	80001e4 <__adddf3>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	a30f      	add	r3, pc, #60	; (adr r3, 8001018 <Calculo_theta+0xc8>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff fd46 	bl	8000a70 <__aeabi_dcmpgt>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <Calculo_theta+0xa2>
	{
		zn[2]=-1.0;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3308      	adds	r3, #8
 8000fee:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <Calculo_theta+0xd4>)
 8000ff0:	601a      	str	r2, [r3, #0]
	}

	return (float)acosf(zn[2]);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3308      	adds	r3, #8
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	f005 fecf 	bl	8006da0 <acosf>
 8001002:	eef0 7a40 	vmov.f32	s15, s0
}
 8001006:	eeb0 0a67 	vmov.f32	s0, s15
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	70a3d70a 	.word	0x70a3d70a
 8001014:	3fb70a3d 	.word	0x3fb70a3d
 8001018:	70a3d70a 	.word	0x70a3d70a
 800101c:	bfb70a3d 	.word	0xbfb70a3d
 8001020:	3ff00000 	.word	0x3ff00000
 8001024:	bf800000 	.word	0xbf800000

08001028 <Promedio_Vel>:

uint32_t Promedio_Vel(float *xnn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//calculo promedio de velocidad
	static uint32_t contador = 1;
	static float Ivavg = 0;


	Ivavg = Ivavg + (xnn[1]-Ivavg)/ contador; //calculo el promedio
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3304      	adds	r3, #4
 8001034:	ed93 7a00 	vldr	s14, [r3]
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <Promedio_Vel+0x60>)
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <Promedio_Vel+0x64>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800104e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <Promedio_Vel+0x60>)
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <Promedio_Vel+0x60>)
 800105e:	edc3 7a00 	vstr	s15, [r3]

	contador++;
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <Promedio_Vel+0x64>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	4a08      	ldr	r2, [pc, #32]	; (800108c <Promedio_Vel+0x64>)
 800106a:	6013      	str	r3, [r2, #0]
	//fin del calculo
	return Ivavg;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <Promedio_Vel+0x60>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001076:	ee17 3a90 	vmov	r3, s15
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200000d0 	.word	0x200000d0
 800108c:	20000000 	.word	0x20000000

08001090 <Detector_caida>:

void Detector_caida(float *xnn,float h_pasado, float theta_gravedad, float ian)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	ed87 0a02 	vstr	s0, [r7, #8]
 800109c:	edc7 0a01 	vstr	s1, [r7, #4]
 80010a0:	ed87 1a00 	vstr	s2, [r7]

	//maquina de estados
	static uint8_t estado = 0;
	float Ivavg;

	Ivavg = Promedio_Vel(xnn);
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff ffbf 	bl	8001028 <Promedio_Vel>
 80010aa:	ee07 0a90 	vmov	s15, r0
 80010ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b2:	edc7 7a05 	vstr	s15, [r7, #20]

	switch (estado) {
 80010b6:	4b60      	ldr	r3, [pc, #384]	; (8001238 <Detector_caida+0x1a8>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	f200 80a6 	bhi.w	800120c <Detector_caida+0x17c>
 80010c0:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <Detector_caida+0x38>)
 80010c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c6:	bf00      	nop
 80010c8:	080010dd 	.word	0x080010dd
 80010cc:	08001107 	.word	0x08001107
 80010d0:	08001145 	.word	0x08001145
 80010d4:	08001193 	.word	0x08001193
 80010d8:	080011d1 	.word	0x080011d1
		case velocidad:
			if(xnn[1] < Ivth)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3304      	adds	r3, #4
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f9dc 	bl	80004a0 <__aeabi_f2d>
 80010e8:	a34b      	add	r3, pc, #300	; (adr r3, 8001218 <Detector_caida+0x188>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fca1 	bl	8000a34 <__aeabi_dcmplt>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d100      	bne.n	80010fa <Detector_caida+0x6a>
			{
				estado = aceleracion;
				start_timer_3();//falta configurar el timer en el .ioc
			}
			break;
 80010f8:	e089      	b.n	800120e <Detector_caida+0x17e>
				estado = aceleracion;
 80010fa:	4b4f      	ldr	r3, [pc, #316]	; (8001238 <Detector_caida+0x1a8>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
				start_timer_3();//falta configurar el timer en el .ioc
 8001100:	f001 fd22 	bl	8002b48 <start_timer_3>
			break;
 8001104:	e083      	b.n	800120e <Detector_caida+0x17e>
		case aceleracion:
			if(valor_timer_3() >= Tmax_aceleracion)
 8001106:	f001 fd31 	bl	8002b6c <valor_timer_3>
 800110a:	4603      	mov	r3, r0
 800110c:	4a4b      	ldr	r2, [pc, #300]	; (800123c <Detector_caida+0x1ac>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d904      	bls.n	800111c <Detector_caida+0x8c>
			{
				stop_timer_3();
 8001112:	f001 fd3b 	bl	8002b8c <stop_timer_3>
				estado = velocidad;
 8001116:	4b48      	ldr	r3, [pc, #288]	; (8001238 <Detector_caida+0x1a8>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
			}
			if(ian < Iazth)
 800111c:	6838      	ldr	r0, [r7, #0]
 800111e:	f7ff f9bf 	bl	80004a0 <__aeabi_f2d>
 8001122:	a33f      	add	r3, pc, #252	; (adr r3, 8001220 <Detector_caida+0x190>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fc84 	bl	8000a34 <__aeabi_dcmplt>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d100      	bne.n	8001134 <Detector_caida+0xa4>
			{
				stop_timer_3();
				start_timer_3();
				estado = altura;
			}
			break;
 8001132:	e06c      	b.n	800120e <Detector_caida+0x17e>
				stop_timer_3();
 8001134:	f001 fd2a 	bl	8002b8c <stop_timer_3>
				start_timer_3();
 8001138:	f001 fd06 	bl	8002b48 <start_timer_3>
				estado = altura;
 800113c:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <Detector_caida+0x1a8>)
 800113e:	2202      	movs	r2, #2
 8001140:	701a      	strb	r2, [r3, #0]
			break;
 8001142:	e064      	b.n	800120e <Detector_caida+0x17e>
		case altura:
			if(valor_timer_3() >= Tmax_dh)
 8001144:	f001 fd12 	bl	8002b6c <valor_timer_3>
 8001148:	4603      	mov	r3, r0
 800114a:	4a3d      	ldr	r2, [pc, #244]	; (8001240 <Detector_caida+0x1b0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d904      	bls.n	800115a <Detector_caida+0xca>
			{
				estado = velocidad;
 8001150:	4b39      	ldr	r3, [pc, #228]	; (8001238 <Detector_caida+0x1a8>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
				stop_timer_3();
 8001156:	f001 fd19 	bl	8002b8c <stop_timer_3>
			}
			if((xnn[0]-h_pasado)< d_Hth)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	ed93 7a00 	vldr	s14, [r3]
 8001160:	edd7 7a02 	vldr	s15, [r7, #8]
 8001164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001168:	ee17 0a90 	vmov	r0, s15
 800116c:	f7ff f998 	bl	80004a0 <__aeabi_f2d>
 8001170:	a32d      	add	r3, pc, #180	; (adr r3, 8001228 <Detector_caida+0x198>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	f7ff fc5d 	bl	8000a34 <__aeabi_dcmplt>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d100      	bne.n	8001182 <Detector_caida+0xf2>
			{
				stop_timer_3();
				start_timer_3();
				estado = 4;
			}
			break;
 8001180:	e045      	b.n	800120e <Detector_caida+0x17e>
				stop_timer_3();
 8001182:	f001 fd03 	bl	8002b8c <stop_timer_3>
				start_timer_3();
 8001186:	f001 fcdf 	bl	8002b48 <start_timer_3>
				estado = 4;
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <Detector_caida+0x1a8>)
 800118c:	2204      	movs	r2, #4
 800118e:	701a      	strb	r2, [r3, #0]
			break;
 8001190:	e03d      	b.n	800120e <Detector_caida+0x17e>
		case velocidad_avg:
			if(valor_timer_3() >= Tmax_Ivavg)
 8001192:	f001 fceb 	bl	8002b6c <valor_timer_3>
 8001196:	4603      	mov	r3, r0
 8001198:	4a2a      	ldr	r2, [pc, #168]	; (8001244 <Detector_caida+0x1b4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d904      	bls.n	80011a8 <Detector_caida+0x118>
			{
				estado = velocidad;
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <Detector_caida+0x1a8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
				stop_timer_3();
 80011a4:	f001 fcf2 	bl	8002b8c <stop_timer_3>
			}
			if( Ivavg < Ivavg_th)
 80011a8:	6978      	ldr	r0, [r7, #20]
 80011aa:	f7ff f979 	bl	80004a0 <__aeabi_f2d>
 80011ae:	a320      	add	r3, pc, #128	; (adr r3, 8001230 <Detector_caida+0x1a0>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fc3e 	bl	8000a34 <__aeabi_dcmplt>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d100      	bne.n	80011c0 <Detector_caida+0x130>
			{
				stop_timer_3();
				start_timer_3();
				estado = theta_g;
			}
			break;
 80011be:	e026      	b.n	800120e <Detector_caida+0x17e>
				stop_timer_3();
 80011c0:	f001 fce4 	bl	8002b8c <stop_timer_3>
				start_timer_3();
 80011c4:	f001 fcc0 	bl	8002b48 <start_timer_3>
				estado = theta_g;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <Detector_caida+0x1a8>)
 80011ca:	2204      	movs	r2, #4
 80011cc:	701a      	strb	r2, [r3, #0]
			break;
 80011ce:	e01e      	b.n	800120e <Detector_caida+0x17e>
		case theta_g:
			if(valor_timer_3() >= Tmax_thetag)
 80011d0:	f001 fccc 	bl	8002b6c <valor_timer_3>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <Detector_caida+0x1b8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d904      	bls.n	80011e6 <Detector_caida+0x156>
			{
				estado = velocidad;
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <Detector_caida+0x1a8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
				stop_timer_3();
 80011e2:	f001 fcd3 	bl	8002b8c <stop_timer_3>
			}
			if( theta_gravedad < theta_g_th)
 80011e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ea:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80011ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f6:	d400      	bmi.n	80011fa <Detector_caida+0x16a>
			{
				stop_timer_3();
				flag_detecto_caida = TRUE;//falta definir esto
				estado = velocidad;
			}
			break;
 80011f8:	e009      	b.n	800120e <Detector_caida+0x17e>
				stop_timer_3();
 80011fa:	f001 fcc7 	bl	8002b8c <stop_timer_3>
				flag_detecto_caida = TRUE;//falta definir esto
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <Detector_caida+0x1bc>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
				estado = velocidad;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <Detector_caida+0x1a8>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
			break;
 800120a:	e000      	b.n	800120e <Detector_caida+0x17e>
		default:
			break;
 800120c:	bf00      	nop
	}

}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	33333333 	.word	0x33333333
 800121c:	bff33333 	.word	0xbff33333
 8001220:	33333333 	.word	0x33333333
 8001224:	40273333 	.word	0x40273333
 8001228:	3d70a3d7 	.word	0x3d70a3d7
 800122c:	bfd3d70a 	.word	0xbfd3d70a
 8001230:	9999999a 	.word	0x9999999a
 8001234:	bfd99999 	.word	0xbfd99999
 8001238:	200000d4 	.word	0x200000d4
 800123c:	000c34ff 	.word	0x000c34ff
 8001240:	004c4b3f 	.word	0x004c4b3f
 8001244:	0007a11f 	.word	0x0007a11f
 8001248:	002dc6bf 	.word	0x002dc6bf
 800124c:	200000cc 	.word	0x200000cc

08001250 <Calculo_F>:
float yg[3];
float znn[3];


void Calculo_F(float yg[], arm_matrix_instance_f32* F)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b098      	sub	sp, #96	; 0x60
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]

	arm_matrix_instance_f32 aux,Ygx;
	float ygx[9];
	float ax[9];

	arm_mat_init_f32(&aux, 3, 3, ax);//auxialiar para ir guardando operaciones
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001262:	2203      	movs	r2, #3
 8001264:	2103      	movs	r1, #3
 8001266:	f001 fd94 	bl	8002d92 <arm_mat_init_f32>



	ygx[0]=0;
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
	ygx[1]=-yg[2];
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3308      	adds	r3, #8
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	eef1 7a67 	vneg.f32	s15, s15
 800127c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	ygx[2]=yg[1];
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
	ygx[3]=yg[2];
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
	ygx[4]=0;
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	63fb      	str	r3, [r7, #60]	; 0x3c
	ygx[5]=-yg[0];
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	eef1 7a67 	vneg.f32	s15, s15
 800129c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	ygx[6]=-yg[1];
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3304      	adds	r3, #4
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	eef1 7a67 	vneg.f32	s15, s15
 80012ac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	ygx[7]=yg[0];
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	64bb      	str	r3, [r7, #72]	; 0x48
	ygx[8]=0;
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	64fb      	str	r3, [r7, #76]	; 0x4c

	arm_mat_init_f32(&Ygx, 3, 3, ygx);
 80012bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80012c4:	2203      	movs	r2, #3
 80012c6:	2103      	movs	r1, #3
 80012c8:	f001 fd63 	bl	8002d92 <arm_mat_init_f32>

	arm_mat_scale_f32(&Ygx, (-dt), &aux);//primera parte de la ecuacion 24 (-delta_t*[yg]x)
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <Calculo_F+0xb0>)
 80012ce:	edd3 7a00 	vldr	s15, [r3]
 80012d2:	eef1 7a67 	vneg.f32	s15, s15
 80012d6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80012da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012de:	4611      	mov	r1, r2
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 f88d 	bl	8003404 <arm_mat_scale_f32>

	arm_mat_add_f32(&I, &aux, F);//segunda parte de ecuacion 24 I-aux
 80012ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <Calculo_F+0xb4>)
 80012f4:	f001 fcb5 	bl	8002c62 <arm_mat_add_f32>
}
 80012f8:	bf00      	nop
 80012fa:	3760      	adds	r7, #96	; 0x60
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000004 	.word	0x20000004
 8001304:	200002b8 	.word	0x200002b8

08001308 <Calculo_Q>:

void Calculo_Q(float znn[], arm_matrix_instance_f32* Q,arm_matrix_instance_f32* Eg )
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0a6      	sub	sp, #152	; 0x98
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	float kq;
	float ax_1[9];
	float ax_2[9];
	arm_matrix_instance_f32 aux_1,aux_2,Zx;

	kq=(-dt)*dt;//escalar que se utiliza luego en el calculo de Q
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <Calculo_Q+0xe8>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	eeb1 7a67 	vneg.f32	s14, s15
 800131e:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <Calculo_Q+0xe8>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001328:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

	arm_mat_init_f32(&aux_1, 3, 3, ax_1);
 800132c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001330:	f107 0020 	add.w	r0, r7, #32
 8001334:	2203      	movs	r2, #3
 8001336:	2103      	movs	r1, #3
 8001338:	f001 fd2b 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&aux_2, 3, 3, ax_2);
 800133c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001340:	f107 0018 	add.w	r0, r7, #24
 8001344:	2203      	movs	r2, #3
 8001346:	2103      	movs	r1, #3
 8001348:	f001 fd23 	bl	8002d92 <arm_mat_init_f32>


	d_zx[0]=0;
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	673b      	str	r3, [r7, #112]	; 0x70
	d_zx[1]=-znn[2];
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3308      	adds	r3, #8
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	eef1 7a67 	vneg.f32	s15, s15
 800135e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	d_zx[2]=znn[1];
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	67bb      	str	r3, [r7, #120]	; 0x78
	d_zx[3]=znn[2];
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	67fb      	str	r3, [r7, #124]	; 0x7c
	d_zx[4]=0;
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	d_zx[5]=-znn[0];
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	eef1 7a67 	vneg.f32	s15, s15
 8001380:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	d_zx[6]=-znn[1];
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3304      	adds	r3, #4
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	eef1 7a67 	vneg.f32	s15, s15
 8001390:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	d_zx[7]=znn[0];
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	d_zx[8]=0;
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	arm_mat_init_f32(&Zx, 3, 3, d_zx);//matriz producto vectorial de Znn
 80013a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013a8:	f107 0010 	add.w	r0, r7, #16
 80013ac:	2203      	movs	r2, #3
 80013ae:	2103      	movs	r1, #3
 80013b0:	f001 fcef 	bl	8002d92 <arm_mat_init_f32>

	arm_mat_mult_f32(Eg,&Zx,&aux_1);//primer producto vectorial de ec 26 (Eg.[Znn]x)
 80013b4:	f107 0220 	add.w	r2, r7, #32
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f001 ff37 	bl	8003232 <arm_mat_mult_f32>
	arm_mat_mult_f32(&Zx,&aux_1,&aux_2);//segundo producto vectorial de ec26
 80013c4:	f107 0218 	add.w	r2, r7, #24
 80013c8:	f107 0120 	add.w	r1, r7, #32
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 ff2e 	bl	8003232 <arm_mat_mult_f32>
	arm_mat_scale_f32(&aux_2, kq, Q);//escalamiento final de Q ec 26
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	68b9      	ldr	r1, [r7, #8]
 80013dc:	ed97 0a25 	vldr	s0, [r7, #148]	; 0x94
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 f80f 	bl	8003404 <arm_mat_scale_f32>


}
 80013e6:	bf00      	nop
 80013e8:	3798      	adds	r7, #152	; 0x98
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000004 	.word	0x20000004

080013f4 <Calculo_H>:

void Calculo_H(arm_matrix_instance_f32* H)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	arm_mat_scale_f32(&I, G, H);// H = I*g ecuacion 31
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <Calculo_H+0x24>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	eeb0 0a67 	vmov.f32	s0, s15
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <Calculo_H+0x28>)
 800140a:	f001 fffb 	bl	8003404 <arm_mat_scale_f32>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000008 	.word	0x20000008
 800141c:	200002b8 	.word	0x200002b8

08001420 <Calculo_Rn>:

void Calculo_Rn(arm_matrix_instance_f32* Ea, arm_matrix_instance_f32* Rn, float a_p[])
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b094      	sub	sp, #80	; 0x50
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
	arm_matrix_instance_f32 Ee;
	float d_Ee[9];
	float norma_ap;
	float ca=0.1;
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <Calculo_Rn+0xbc>)
 800142e:	64fb      	str	r3, [r7, #76]	; 0x4c
	float k=0;
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	64bb      	str	r3, [r7, #72]	; 0x48
	float a=0.333333333;
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <Calculo_Rn+0xc0>)
 8001438:	647b      	str	r3, [r7, #68]	; 0x44
	arm_mat_init_f32(&Ee, 3, 3, d_Ee);//solo primea vez
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001442:	2203      	movs	r2, #3
 8001444:	2103      	movs	r1, #3
 8001446:	f001 fca4 	bl	8002d92 <arm_mat_init_f32>

	norma_ap= a_p[0]*a_p[0] + a_p[1]*a_p[1] + a_p[2]*a_p[2];
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3304      	adds	r3, #4
 800145e:	edd3 6a00 	vldr	s13, [r3]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3304      	adds	r3, #4
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3308      	adds	r3, #8
 8001476:	edd3 6a00 	vldr	s13, [r3]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3308      	adds	r3, #8
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	k = norma_ap*ca*ca;//calculo del escalar que multiplica a identidad en ecuacion 35
 800148e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001492:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800149e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	k=k*a;
 80014a6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80014aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	arm_mat_scale_f32(&I, k, &Ee);//Ee = I*k ecuacion 35
 80014b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014ba:	4619      	mov	r1, r3
 80014bc:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 80014c0:	4808      	ldr	r0, [pc, #32]	; (80014e4 <Calculo_Rn+0xc4>)
 80014c2:	f001 ff9f 	bl	8003404 <arm_mat_scale_f32>

	arm_mat_add_f32(&Ee, Ea, Rn); //ecuacion 33
 80014c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	68f9      	ldr	r1, [r7, #12]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 fbc7 	bl	8002c62 <arm_mat_add_f32>
}
 80014d4:	bf00      	nop
 80014d6:	3750      	adds	r7, #80	; 0x50
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	3dcccccd 	.word	0x3dcccccd
 80014e0:	3eaaaaab 	.word	0x3eaaaaab
 80014e4:	200002b8 	.word	0x200002b8

080014e8 <Calculo_matriz_Rb>:

//chequear pasajes de argumentos
void Calculo_matriz_Rb(arm_matrix_instance_f32* R_b_g, float *zn)
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b0a0      	sub	sp, #128	; 0x80
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
	//inicio ecuacion 37
	arm_matrix_instance_f32 R_aux1,R_aux2; //R que depende de beta y gamma
	float r_aux1[9]={0,0,0,0,1,0,0,0,0},r_aux2[9]={1,0,0,0,0,0,0,0,0},cos_b=0,sen_b=0,cos_g=0,sen_g=0;
 80014f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f6:	2224      	movs	r2, #36	; 0x24
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f005 f9f0 	bl	80068e0 <memset>
 8001500:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	2224      	movs	r2, #36	; 0x24
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f005 f9e6 	bl	80068e0 <memset>
 8001514:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	67bb      	str	r3, [r7, #120]	; 0x78
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	677b      	str	r3, [r7, #116]	; 0x74
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	673b      	str	r3, [r7, #112]	; 0x70
	double gamma=0,beta = 0;
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	arm_mat_init_f32(&R_aux1, 3, 3, r_aux1);
 800154a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001552:	2203      	movs	r2, #3
 8001554:	2103      	movs	r1, #3
 8001556:	f001 fc1c 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&R_aux2, 3, 3, r_aux2);
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001562:	2203      	movs	r2, #3
 8001564:	2103      	movs	r1, #3
 8001566:	f001 fc14 	bl	8002d92 <arm_mat_init_f32>

	//chequear que no se pasen los valores mucho de uno

	if (zn[0]>1.0 && zn[0]-1.0<0.09)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	dd19      	ble.n	80015b2 <Calculo_matriz_Rb+0xca>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ff8c 	bl	80004a0 <__aeabi_f2d>
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	4bb2      	ldr	r3, [pc, #712]	; (8001858 <Calculo_matriz_Rb+0x370>)
 800158e:	f7fe fe27 	bl	80001e0 <__aeabi_dsub>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	a3ab      	add	r3, pc, #684	; (adr r3, 8001848 <Calculo_matriz_Rb+0x360>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff fa48 	bl	8000a34 <__aeabi_dcmplt>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <Calculo_matriz_Rb+0xca>
	{
		zn[0]=1.0;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015b0:	601a      	str	r2, [r3, #0]
	}

	if (zn[0]<-1.0 && zn[0]+1.0>-0.09)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80015bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	d518      	bpl.n	80015f8 <Calculo_matriz_Rb+0x110>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ff68 	bl	80004a0 <__aeabi_f2d>
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4ba0      	ldr	r3, [pc, #640]	; (8001858 <Calculo_matriz_Rb+0x370>)
 80015d6:	f7fe fe05 	bl	80001e4 <__adddf3>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	a39b      	add	r3, pc, #620	; (adr r3, 8001850 <Calculo_matriz_Rb+0x368>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7ff fa42 	bl	8000a70 <__aeabi_dcmpgt>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <Calculo_matriz_Rb+0x110>
	{
		zn[0]=-1.0;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	4a99      	ldr	r2, [pc, #612]	; (800185c <Calculo_matriz_Rb+0x374>)
 80015f6:	601a      	str	r2, [r3, #0]
	}

	if (zn[1]>1.0 && zn[1]-1.0<0.09)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	3304      	adds	r3, #4
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160c:	dd1b      	ble.n	8001646 <Calculo_matriz_Rb+0x15e>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	3304      	adds	r3, #4
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff43 	bl	80004a0 <__aeabi_f2d>
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4b8e      	ldr	r3, [pc, #568]	; (8001858 <Calculo_matriz_Rb+0x370>)
 8001620:	f7fe fdde 	bl	80001e0 <__aeabi_dsub>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	a386      	add	r3, pc, #536	; (adr r3, 8001848 <Calculo_matriz_Rb+0x360>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7ff f9ff 	bl	8000a34 <__aeabi_dcmplt>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <Calculo_matriz_Rb+0x15e>
	{
		zn[1]=1.0;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3304      	adds	r3, #4
 8001640:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001644:	601a      	str	r2, [r3, #0]
	}

	if (zn[1]<-1.0 && zn[1]+1.0>-0.09)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	3304      	adds	r3, #4
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165a:	d51a      	bpl.n	8001692 <Calculo_matriz_Rb+0x1aa>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	3304      	adds	r3, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff1c 	bl	80004a0 <__aeabi_f2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4b7a      	ldr	r3, [pc, #488]	; (8001858 <Calculo_matriz_Rb+0x370>)
 800166e:	f7fe fdb9 	bl	80001e4 <__adddf3>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	a375      	add	r3, pc, #468	; (adr r3, 8001850 <Calculo_matriz_Rb+0x368>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7ff f9f6 	bl	8000a70 <__aeabi_dcmpgt>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <Calculo_matriz_Rb+0x1aa>
	{
		zn[1]=-1.0;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	3304      	adds	r3, #4
 800168e:	4a73      	ldr	r2, [pc, #460]	; (800185c <Calculo_matriz_Rb+0x374>)
 8001690:	601a      	str	r2, [r3, #0]
	}

	if (zn[2]>1.0 && zn[2]-1.0<0.09)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	3308      	adds	r3, #8
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800169e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a6:	dd1b      	ble.n	80016e0 <Calculo_matriz_Rb+0x1f8>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	3308      	adds	r3, #8
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fef6 	bl	80004a0 <__aeabi_f2d>
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	4b67      	ldr	r3, [pc, #412]	; (8001858 <Calculo_matriz_Rb+0x370>)
 80016ba:	f7fe fd91 	bl	80001e0 <__aeabi_dsub>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	a360      	add	r3, pc, #384	; (adr r3, 8001848 <Calculo_matriz_Rb+0x360>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7ff f9b2 	bl	8000a34 <__aeabi_dcmplt>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <Calculo_matriz_Rb+0x1f8>
	{
		zn[2]=1.0;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	3308      	adds	r3, #8
 80016da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80016de:	601a      	str	r2, [r3, #0]
	}

	if (zn[2]<-1.0 && zn[2]+1.0>-0.09)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	3308      	adds	r3, #8
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80016ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f4:	d51a      	bpl.n	800172c <Calculo_matriz_Rb+0x244>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	3308      	adds	r3, #8
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fecf 	bl	80004a0 <__aeabi_f2d>
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4b54      	ldr	r3, [pc, #336]	; (8001858 <Calculo_matriz_Rb+0x370>)
 8001708:	f7fe fd6c 	bl	80001e4 <__adddf3>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	a34e      	add	r3, pc, #312	; (adr r3, 8001850 <Calculo_matriz_Rb+0x368>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7ff f9a9 	bl	8000a70 <__aeabi_dcmpgt>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <Calculo_matriz_Rb+0x244>
	{
		zn[2]=-1.0;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	3308      	adds	r3, #8
 8001728:	4a4c      	ldr	r2, [pc, #304]	; (800185c <Calculo_matriz_Rb+0x374>)
 800172a:	601a      	str	r2, [r3, #0]
	}


	//calculo beta y gamma
	gamma = atan((double) zn[1]/zn[2]);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3304      	adds	r3, #4
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe feb4 	bl	80004a0 <__aeabi_f2d>
 8001738:	4604      	mov	r4, r0
 800173a:	460d      	mov	r5, r1
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	3308      	adds	r3, #8
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe feac 	bl	80004a0 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4620      	mov	r0, r4
 800174e:	4629      	mov	r1, r5
 8001750:	f7ff f828 	bl	80007a4 <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	ec43 2b17 	vmov	d7, r2, r3
 800175c:	eeb0 0a47 	vmov.f32	s0, s14
 8001760:	eef0 0a67 	vmov.f32	s1, s15
 8001764:	f005 f8c4 	bl	80068f0 <atan>
 8001768:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68

	sen_g= sin(gamma);
 800176c:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001770:	f005 fabe 	bl	8006cf0 <sin>
 8001774:	ec53 2b10 	vmov	r2, r3, d0
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff f9aa 	bl	8000ad4 <__aeabi_d2f>
 8001780:	4603      	mov	r3, r0
 8001782:	673b      	str	r3, [r7, #112]	; 0x70
	cos_g= cos(gamma);
 8001784:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001788:	f005 fa52 	bl	8006c30 <cos>
 800178c:	ec53 2b10 	vmov	r2, r3, d0
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f99e 	bl	8000ad4 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	677b      	str	r3, [r7, #116]	; 0x74

	beta = atan(zn[0]*sen_g/zn[2]);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	ed93 7a00 	vldr	s14, [r3]
 80017a2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80017a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3308      	adds	r3, #8
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017b6:	ee16 0a90 	vmov	r0, s13
 80017ba:	f7fe fe71 	bl	80004a0 <__aeabi_f2d>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	ec43 2b10 	vmov	d0, r2, r3
 80017c6:	f005 f893 	bl	80068f0 <atan>
 80017ca:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60

	//para que solo se utilize una ves las funciones matematicas las cargo en variables.
	cos_b= cos(beta);
 80017ce:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80017d2:	f005 fa2d 	bl	8006c30 <cos>
 80017d6:	ec53 2b10 	vmov	r2, r3, d0
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f979 	bl	8000ad4 <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	67fb      	str	r3, [r7, #124]	; 0x7c
	sen_b= sin(beta);
 80017e6:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80017ea:	f005 fa81 	bl	8006cf0 <sin>
 80017ee:	ec53 2b10 	vmov	r2, r3, d0
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff f96d 	bl	8000ad4 <__aeabi_d2f>
 80017fa:	4603      	mov	r3, r0
 80017fc:	67bb      	str	r3, [r7, #120]	; 0x78
	//sen_g= sin(gamma);
	//cos_g= cos(gamma);


	//cargo los valores de la 1ra matriz auxiliar
	r_aux1[0] = (float)cos_b;
 80017fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
	r_aux1[2] = (float)sen_b;
 8001802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
	r_aux1[6] = (float)-sen_b;
 8001806:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800180a:	eef1 7a67 	vneg.f32	s15, s15
 800180e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	r_aux1[8] = (float)cos_b;
 8001812:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001814:	64fb      	str	r3, [r7, #76]	; 0x4c

	//cargo los valores de la 2da matriz auxiliar
	r_aux2[4] = (float)cos_g;
 8001816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001818:	61bb      	str	r3, [r7, #24]
	r_aux2[5] = (float)-sen_g;
 800181a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800181e:	eef1 7a67 	vneg.f32	s15, s15
 8001822:	edc7 7a07 	vstr	s15, [r7, #28]
	r_aux2[7] = (float)sen_g;
 8001826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
	r_aux2[8] = (float)cos_g;
 800182a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28

	//arm_mat_mult_f32(R_b_g, &R_aux1, &R_aux2);//calculo la matriz de rotacion
	arm_mat_mult_f32(&R_aux1, &R_aux1, R_b_g);
 800182e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001832:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	f001 fcfa 	bl	8003232 <arm_mat_mult_f32>
	//fin ecuacion 37
}
 800183e:	bf00      	nop
 8001840:	3780      	adds	r7, #128	; 0x80
 8001842:	46bd      	mov	sp, r7
 8001844:	bdb0      	pop	{r4, r5, r7, pc}
 8001846:	bf00      	nop
 8001848:	70a3d70a 	.word	0x70a3d70a
 800184c:	3fb70a3d 	.word	0x3fb70a3d
 8001850:	70a3d70a 	.word	0x70a3d70a
 8001854:	bfb70a3d 	.word	0xbfb70a3d
 8001858:	3ff00000 	.word	0x3ff00000
 800185c:	bf800000 	.word	0xbf800000

08001860 <Calculo_Xnn>:

void Calculo_Xnn(arm_matrix_instance_f32 * Xnn, float * h_pasado, float iaz)//xnn tiene 2 posiciones, iaz es el valor devuelto por aceleracion vertical
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b092      	sub	sp, #72	; 0x48
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	ed87 0a01 	vstr	s0, [r7, #4]
	//inicio ecuacion 39 --> calculo del Xnn (vector de estado del sistema)
	arm_matrix_instance_f32 Xnp,Mat_aux,T_aux1;
	static float xnp[2]={0,0},aux = 0;//Xn;n-1
	static float h_dif = 0;
	float t_aux2[2]={0.5*dt*dt,dt},t_aux1[4]={1,dt,0,1},mat_aux[2]={0,0};
 800186e:	4b51      	ldr	r3, [pc, #324]	; (80019b4 <Calculo_Xnn+0x154>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe14 	bl	80004a0 <__aeabi_f2d>
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	4b4e      	ldr	r3, [pc, #312]	; (80019b8 <Calculo_Xnn+0x158>)
 800187e:	f7fe fe67 	bl	8000550 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4614      	mov	r4, r2
 8001888:	461d      	mov	r5, r3
 800188a:	4b4a      	ldr	r3, [pc, #296]	; (80019b4 <Calculo_Xnn+0x154>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe06 	bl	80004a0 <__aeabi_f2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe fe58 	bl	8000550 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f914 	bl	8000ad4 <__aeabi_d2f>
 80018ac:	4603      	mov	r3, r0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b0:	4b40      	ldr	r3, [pc, #256]	; (80019b4 <Calculo_Xnn+0x154>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <Calculo_Xnn+0x154>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
 80018c8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]

	arm_mat_init_f32(&T_aux1, 2, 2, t_aux1);
 80018da:	f107 0318 	add.w	r3, r7, #24
 80018de:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80018e2:	2202      	movs	r2, #2
 80018e4:	2102      	movs	r1, #2
 80018e6:	f001 fa54 	bl	8002d92 <arm_mat_init_f32>

	//estas definiciones no se usan, pero ya dejo incializadas las matrices.
	arm_mat_init_f32(&Xnp, 2, 1, xnp);
 80018ea:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80018ee:	4b33      	ldr	r3, [pc, #204]	; (80019bc <Calculo_Xnn+0x15c>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	2102      	movs	r1, #2
 80018f4:	f001 fa4d 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Mat_aux, 2, 1, mat_aux);
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001900:	2201      	movs	r2, #1
 8001902:	2102      	movs	r1, #2
 8001904:	f001 fa45 	bl	8002d92 <arm_mat_init_f32>
	//1ra parte de la suma
	//arm_mat_mult_f32(&Mat_aux, &T_aux1, &Xnp);
	arm_mat_mult_f32(&T_aux1, &Xnp, &Mat_aux);
 8001908:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800190c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001910:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001914:	4618      	mov	r0, r3
 8001916:	f001 fc8c 	bl	8003232 <arm_mat_mult_f32>

	//calculo final --> suma de matrices 2x1
	Xnn->pData[0]= mat_aux[0]+ t_aux2[0] * iaz;
 800191a:	ed97 7a04 	vldr	s14, [r7, #16]
 800191e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001922:	edd7 7a01 	vldr	s15, [r7, #4]
 8001926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001932:	edc3 7a00 	vstr	s15, [r3]
	Xnn->pData[1]= mat_aux[1]+ t_aux2[1] * iaz;
 8001936:	ed97 7a05 	vldr	s14, [r7, #20]
 800193a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800193e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	3304      	adds	r3, #4
 800194c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001950:	edc3 7a00 	vstr	s15, [r3]

	//guardo el valor actual (proximo pasado)
	if(aux == 0)
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <Calculo_Xnn+0x160>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	d105      	bne.n	8001970 <Calculo_Xnn+0x110>
	{
		start_timer_4();
 8001964:	f001 f922 	bl	8002bac <start_timer_4>
		aux = 1;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <Calculo_Xnn+0x160>)
 800196a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800196e:	601a      	str	r2, [r3, #0]
	}
	if(valor_timer_4() >= T_MAX_H)
 8001970:	f001 f92e 	bl	8002bd0 <valor_timer_4>
 8001974:	4603      	mov	r3, r0
 8001976:	4a13      	ldr	r2, [pc, #76]	; (80019c4 <Calculo_Xnn+0x164>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d908      	bls.n	800198e <Calculo_Xnn+0x12e>
	{
		stop_timer_4();
 800197c:	f001 f938 	bl	8002bf0 <stop_timer_4>
		h_dif = Xnn->pData[0];
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <Calculo_Xnn+0x168>)
 8001988:	6013      	str	r3, [r2, #0]
		start_timer_4();
 800198a:	f001 f90f 	bl	8002bac <start_timer_4>
	}
	xnp[0] = Xnn->pData[0];
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a09      	ldr	r2, [pc, #36]	; (80019bc <Calculo_Xnn+0x15c>)
 8001996:	6013      	str	r3, [r2, #0]
	xnp[1] = Xnn->pData[1];
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4a07      	ldr	r2, [pc, #28]	; (80019bc <Calculo_Xnn+0x15c>)
 80019a0:	6053      	str	r3, [r2, #4]

	*h_pasado = h_dif;//devuelve el valor pasado
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <Calculo_Xnn+0x168>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	601a      	str	r2, [r3, #0]
	//fin ecuacion 39
}
 80019aa:	bf00      	nop
 80019ac:	3748      	adds	r7, #72	; 0x48
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bdb0      	pop	{r4, r5, r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000004 	.word	0x20000004
 80019b8:	3fe00000 	.word	0x3fe00000
 80019bc:	200002c0 	.word	0x200002c0
 80019c0:	200002c8 	.word	0x200002c8
 80019c4:	004c4b3f 	.word	0x004c4b3f
 80019c8:	200002cc 	.word	0x200002cc

080019cc <fil_kal>:

void fil_kal(float* yg, float* ya, arm_matrix_instance_f32* Ap, arm_matrix_instance_f32* Xaa, arm_matrix_instance_f32* Xap, arm_matrix_instance_f32* Paa, arm_matrix_instance_f32* Pap, uint16_t primero, float cov_a[],float cov_g[])
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	ed2d 8b02 	vpush	{d8}
 80019d2:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	f507 7418 	add.w	r4, r7, #608	; 0x260
 80019dc:	f5a4 7415 	sub.w	r4, r4, #596	; 0x254
 80019e0:	6020      	str	r0, [r4, #0]
 80019e2:	f507 7018 	add.w	r0, r7, #608	; 0x260
 80019e6:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 80019ea:	6001      	str	r1, [r0, #0]
 80019ec:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80019f0:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 80019f4:	600a      	str	r2, [r1, #0]
 80019f6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80019fa:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80019fe:	6013      	str	r3, [r2, #0]
	arm_matrix_instance_f32 Ya;
	//arm_matrix_instance_f32 Ap;
	//acoplado
	arm_matrix_instance_f32 R_b_g,Xnn;
	static float  h_pasado = 0;
	float iaz = 0;
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

	float h[9], g[9], f[9], q[9], A[9], B[9], E[9], AX[9], C[3], D[3],ht[9],zn[3],kn[9];
	float xnn[2]={0,0},r_b_g[9]={0,0,0,0,0,0,0,0,0};
 8001a08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a0c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a1a:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	2324      	movs	r3, #36	; 0x24
 8001a30:	461a      	mov	r2, r3
 8001a32:	2100      	movs	r1, #0
 8001a34:	f004 ff54 	bl	80068e0 <memset>

	arm_mat_init_f32(&I, 3, 3,identidad);
 8001a38:	4be3      	ldr	r3, [pc, #908]	; (8001dc8 <fil_kal+0x3fc>)
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	2103      	movs	r1, #3
 8001a3e:	48e3      	ldr	r0, [pc, #908]	; (8001dcc <fil_kal+0x400>)
 8001a40:	f001 f9a7 	bl	8002d92 <arm_mat_init_f32>


	arm_mat_init_f32(&H, 3, 3, h);
 8001a44:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001a48:	f507 7011 	add.w	r0, r7, #580	; 0x244
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	2103      	movs	r1, #3
 8001a50:	f001 f99f 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&F, 3, 3, f);
 8001a54:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001a58:	f507 7015 	add.w	r0, r7, #596	; 0x254
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	2103      	movs	r1, #3
 8001a60:	f001 f997 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Rn, 3, 3, g);
 8001a64:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001a68:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	2103      	movs	r1, #3
 8001a70:	f001 f98f 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Q, 3, 3, q);
 8001a74:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001a78:	f507 7013 	add.w	r0, r7, #588	; 0x24c
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	2103      	movs	r1, #3
 8001a80:	f001 f987 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Ea, 3, 3, cov_a);
 8001a84:	f507 700d 	add.w	r0, r7, #564	; 0x234
 8001a88:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	2103      	movs	r1, #3
 8001a90:	f001 f97f 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Eg, 3, 3, cov_g);
 8001a94:	f507 700b 	add.w	r0, r7, #556	; 0x22c
 8001a98:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	2103      	movs	r1, #3
 8001aa0:	f001 f977 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Ya, 3, 1, ya);
 8001aa4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001aa8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001aac:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	f001 f96c 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&a, 3, 3, A);
 8001aba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001abe:	f507 7009 	add.w	r0, r7, #548	; 0x224
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	2103      	movs	r1, #3
 8001ac6:	f001 f964 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&b, 3, 3, B);
 8001aca:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ace:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	2103      	movs	r1, #3
 8001ad6:	f001 f95c 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&e, 3, 3, E);
 8001ada:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ade:	f507 7001 	add.w	r0, r7, #516	; 0x204
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	2103      	movs	r1, #3
 8001ae6:	f001 f954 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&ax, 3, 3, AX);
 8001aea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001aee:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8001af2:	2203      	movs	r2, #3
 8001af4:	2103      	movs	r1, #3
 8001af6:	f001 f94c 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&c, 3, 1, C);
 8001afa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001afe:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8001b02:	2201      	movs	r2, #1
 8001b04:	2103      	movs	r1, #3
 8001b06:	f001 f944 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&d, 3, 1, D);
 8001b0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b0e:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8001b12:	2201      	movs	r2, #1
 8001b14:	2103      	movs	r1, #3
 8001b16:	f001 f93c 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Ht, 3, 3, ht);
 8001b1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b1e:	f507 70fa 	add.w	r0, r7, #500	; 0x1f4
 8001b22:	2203      	movs	r2, #3
 8001b24:	2103      	movs	r1, #3
 8001b26:	f001 f934 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Zn, 3, 1, zn);
 8001b2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b2e:	f507 70f6 	add.w	r0, r7, #492	; 0x1ec
 8001b32:	2201      	movs	r2, #1
 8001b34:	2103      	movs	r1, #3
 8001b36:	f001 f92c 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Kn, 3, 3, kn);
 8001b3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b3e:	f507 70f2 	add.w	r0, r7, #484	; 0x1e4
 8001b42:	2203      	movs	r2, #3
 8001b44:	2103      	movs	r1, #3
 8001b46:	f001 f924 	bl	8002d92 <arm_mat_init_f32>
	//arm_mat_init_f32(&Ap, 3, 1, a_p);
	//acoplado
	arm_mat_init_f32(&Xnn, 2, 1, xnn);
 8001b4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b4e:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 8001b52:	2201      	movs	r2, #1
 8001b54:	2102      	movs	r1, #2
 8001b56:	f001 f91c 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&R_b_g, 3, 3, r_b_g);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 8001b62:	2203      	movs	r2, #3
 8001b64:	2103      	movs	r1, #3
 8001b66:	f001 f914 	bl	8002d92 <arm_mat_init_f32>

	if (primero==0)
 8001b6a:	f8b7 3284 	ldrh.w	r3, [r7, #644]	; 0x284
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 8132 	bne.w	8001dd8 <fil_kal+0x40c>
	{
		Calculo_H(&H);
 8001b74:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fc3b 	bl	80013f4 <Calculo_H>

		Calculo_Rn(&Ea, &Rn, Ap->pData);
 8001b7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b82:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8001b8e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fc44 	bl	8001420 <Calculo_Rn>


		//Kn = P_a_p.Ht.(H.P_a_p.Ht + Rn)-1

		arm_mat_trans_f32(&H, &Ht);
 8001b98:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8001b9c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 fcb2 	bl	800350c <arm_mat_trans_f32>
		arm_mat_mult_f32(Pap, &Ht, &b);
 8001ba8:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8001bac:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8001bb6:	f001 fb3c 	bl	8003232 <arm_mat_mult_f32>
		arm_mat_mult_f32(&H, &b, &a);
 8001bba:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001bbe:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8001bc2:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 fb33 	bl	8003232 <arm_mat_mult_f32>
		arm_mat_add_f32(&a, &Rn, &b);
 8001bcc:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8001bd0:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8001bd4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 f842 	bl	8002c62 <arm_mat_add_f32>
		arm_mat_inverse_f32(&b, &a);
 8001bde:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001be2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 f8ea 	bl	8002dc2 <arm_mat_inverse_f32>
		arm_mat_mult_f32(&Ht, &a, &b);
 8001bee:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8001bf2:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8001bf6:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f001 fb19 	bl	8003232 <arm_mat_mult_f32>
		arm_mat_mult_f32(Pap,&b,&Kn);
 8001c00:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8001c04:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8001c0e:	f001 fb10 	bl	8003232 <arm_mat_mult_f32>

		//zn = ya -Ca*(a_p_p)

		arm_mat_scale_f32(Ap, -Ca, &c);
 8001c12:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <fil_kal+0x404>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	eef1 7a67 	vneg.f32	s15, s15
 8001c1c:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001c20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c24:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001c28:	4611      	mov	r1, r2
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	f001 fbe8 	bl	8003404 <arm_mat_scale_f32>
		//arm_mat_scale_f32(&Ya, G, &d);
		arm_mat_add_f32(&Ya, &c, &Zn);
 8001c34:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8001c38:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8001c3c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001c40:	4618      	mov	r0, r3
 8001c42:	f001 f80e 	bl	8002c62 <arm_mat_add_f32>

		//x_a_a = x_a_p + Kn.(zn - H.x_a_p)

		arm_mat_mult_f32(&H, Xap, &c);
 8001c46:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001c4a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001c4e:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 faed 	bl	8003232 <arm_mat_mult_f32>
		arm_mat_scale_f32(&c, -1, &d);
 8001c58:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001c5c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001c60:	4611      	mov	r1, r2
 8001c62:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f001 fbcc 	bl	8003404 <arm_mat_scale_f32>
		arm_mat_add_f32(&Zn, &d, &c);
 8001c6c:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001c70:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8001c74:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fff2 	bl	8002c62 <arm_mat_add_f32>
		arm_mat_mult_f32(&Kn, &c, &d);
 8001c7e:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001c82:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8001c86:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 fad1 	bl	8003232 <arm_mat_mult_f32>
		arm_mat_add_f32(Xap, &d, Xaa);
 8001c90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c94:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c98:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	f8d7 0278 	ldr.w	r0, [r7, #632]	; 0x278
 8001ca2:	f000 ffde 	bl	8002c62 <arm_mat_add_f32>


		//P_a_a = (I - Kn.H).P_a_p(I - KnH)t + Kn.Rn.Knt

		arm_mat_trans_f32(&Kn, &a);
 8001ca6:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001caa:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f001 fc2b 	bl	800350c <arm_mat_trans_f32>
		arm_mat_mult_f32(&Rn, &a, &b);
 8001cb6:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8001cba:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8001cbe:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 fab5 	bl	8003232 <arm_mat_mult_f32>
		arm_mat_mult_f32(&Kn, &b, &e);
 8001cc8:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8001ccc:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8001cd0:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 faac 	bl	8003232 <arm_mat_mult_f32>

		arm_mat_mult_f32(&Kn, &H, &a);
 8001cda:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001cde:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8001ce2:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f001 faa3 	bl	8003232 <arm_mat_mult_f32>
		arm_mat_scale_f32(&a, -1, &b);
 8001cec:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8001cf0:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f001 fb82 	bl	8003404 <arm_mat_scale_f32>
		arm_mat_add_f32(&I, &b, &ax);
 8001d00:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8001d04:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4830      	ldr	r0, [pc, #192]	; (8001dcc <fil_kal+0x400>)
 8001d0c:	f000 ffa9 	bl	8002c62 <arm_mat_add_f32>


		arm_mat_mult_f32(&Kn, &H, &a);
 8001d10:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001d14:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8001d18:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f001 fa88 	bl	8003232 <arm_mat_mult_f32>
		arm_mat_scale_f32(&a, -1, &b);
 8001d22:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8001d26:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 fb67 	bl	8003404 <arm_mat_scale_f32>
		arm_mat_add_f32(&I, &b, &a);
 8001d36:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001d3a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4822      	ldr	r0, [pc, #136]	; (8001dcc <fil_kal+0x400>)
 8001d42:	f000 ff8e 	bl	8002c62 <arm_mat_add_f32>
		arm_mat_trans_f32(&a, &b);
 8001d46:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8001d4a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 fbdb 	bl	800350c <arm_mat_trans_f32>

		arm_mat_mult_f32(Pap, &b, &a);
 8001d56:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001d5a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8001d64:	f001 fa65 	bl	8003232 <arm_mat_mult_f32>
		arm_mat_mult_f32(&ax, &a, &b);
 8001d68:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8001d6c:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8001d70:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001d74:	4618      	mov	r0, r3
 8001d76:	f001 fa5c 	bl	8003232 <arm_mat_mult_f32>

		arm_mat_add_f32(&b, &e, Paa);
 8001d7a:	f507 7101 	add.w	r1, r7, #516	; 0x204
 8001d7e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001d82:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 ff6b 	bl	8002c62 <arm_mat_add_f32>

		//aceleracion externa
		arm_mat_scale_f32(Xaa, -G, &c);
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <fil_kal+0x408>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	eef1 7a67 	vneg.f32	s15, s15
 8001d96:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001d9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d9e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001da2:	4611      	mov	r1, r2
 8001da4:	eeb0 0a67 	vmov.f32	s0, s15
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	f001 fb2b 	bl	8003404 <arm_mat_scale_f32>
		arm_mat_add_f32(&Ya, &c, Ap);
 8001dae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001db2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001db6:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8001dba:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	f000 ff4f 	bl	8002c62 <arm_mat_add_f32>
 8001dc4:	e008      	b.n	8001dd8 <fil_kal+0x40c>
 8001dc6:	bf00      	nop
 8001dc8:	20000018 	.word	0x20000018
 8001dcc:	200002b8 	.word	0x200002b8
 8001dd0:	2000000c 	.word	0x2000000c
 8001dd4:	20000008 	.word	0x20000008

		}



	Calculo_F(yg, &F);
 8001dd8:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8001ddc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001de0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001de4:	4611      	mov	r1, r2
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	f7ff fa32 	bl	8001250 <Calculo_F>


	Calculo_Q(Xaa->pData, &Q, &Eg);
 8001dec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001df0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8001dfc:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fa81 	bl	8001308 <Calculo_Q>
	//x_f_a = F.X_a_a    En la siguiente sera x_a_p
	arm_mat_mult_f32(&F, Xaa, Xap); //esto es 3x1
 8001e06:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e0a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001e0e:	f507 7015 	add.w	r0, r7, #596	; 0x254
 8001e12:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 8001e16:	6819      	ldr	r1, [r3, #0]
 8001e18:	f001 fa0b 	bl	8003232 <arm_mat_mult_f32>

	//P_f_a = F.P_a_a.Ft + Q

	arm_mat_trans_f32(&F, &a);
 8001e1c:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001e20:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f001 fb70 	bl	800350c <arm_mat_trans_f32>
	arm_mat_mult_f32(Paa, &a, &b);
 8001e2c:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8001e30:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001e34:	4619      	mov	r1, r3
 8001e36:	f8d7 027c 	ldr.w	r0, [r7, #636]	; 0x27c
 8001e3a:	f001 f9fa 	bl	8003232 <arm_mat_mult_f32>
	arm_mat_mult_f32(&F, &b, &a);
 8001e3e:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001e42:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8001e46:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f001 f9f1 	bl	8003232 <arm_mat_mult_f32>
	arm_mat_add_f32(&a, &Q, Pap);//chequear ordenes de matrices me parece que p tendria que ser 3x3
 8001e50:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8001e54:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001e58:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 ff00 	bl	8002c62 <arm_mat_add_f32>
	//ojo que estos valores deben seguir por fuera de la funcion


	//acoplado
	Calculo_matriz_Rb(&R_b_g, Xaa->pData);
 8001e62:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e66:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fb37 	bl	80014e8 <Calculo_matriz_Rb>
	iaz = Aceleracion_vertical(Xaa->pData,ya,&R_b_g);
 8001e7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e7e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6858      	ldr	r0, [r3, #4]
 8001e86:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8001e8a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e8e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001e92:	6819      	ldr	r1, [r3, #0]
 8001e94:	f7fe fff0 	bl	8000e78 <Aceleracion_vertical>
 8001e98:	ed87 0a97 	vstr	s0, [r7, #604]	; 0x25c
	Calculo_Xnn(&Xnn, &h_pasado, iaz);
 8001e9c:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001ea0:	ed97 0a97 	vldr	s0, [r7, #604]	; 0x25c
 8001ea4:	4911      	ldr	r1, [pc, #68]	; (8001eec <fil_kal+0x520>)
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fcda 	bl	8001860 <Calculo_Xnn>
	Detector_caida(xnn,h_pasado,Calculo_theta(Xaa->pData),iaz);//maquina de estados
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <fil_kal+0x520>)
 8001eae:	ed93 8a00 	vldr	s16, [r3]
 8001eb2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001eb6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f846 	bl	8000f50 <Calculo_theta>
 8001ec4:	eef0 7a40 	vmov.f32	s15, s0
 8001ec8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ecc:	ed97 1a97 	vldr	s2, [r7, #604]	; 0x25c
 8001ed0:	eef0 0a67 	vmov.f32	s1, s15
 8001ed4:	eeb0 0a48 	vmov.f32	s0, s16
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff f8d9 	bl	8001090 <Detector_caida>
/*arm_mat_scale_f32(Xaa, -1, &c);
arm_mat_add_f32(&Ya, &c, &d);
arm_mat_scale_f32(&d, G, Ap);*/


}
 8001ede:	bf00      	nop
 8001ee0:	f507 7719 	add.w	r7, r7, #612	; 0x264
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	ecbd 8b02 	vpop	{d8}
 8001eea:	bd90      	pop	{r4, r7, pc}
 8001eec:	200002d0 	.word	0x200002d0

08001ef0 <getData>:





void getData() {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	accel = imuGetAccelData();
 8001ef4:	f004 fbd0 	bl	8006698 <imuGetAccelData>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4943      	ldr	r1, [pc, #268]	; (800200c <getData+0x11c>)
 8001efe:	e9c1 2300 	strd	r2, r3, [r1]
	gyros = imuGetGyroData();
 8001f02:	f004 fc46 	bl	8006792 <imuGetGyroData>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4941      	ldr	r1, [pc, #260]	; (8002010 <getData+0x120>)
 8001f0c:	e9c1 2300 	strd	r2, r3, [r1]
	acc_y = escala_acc*(int16_t)((accel >> 16) & 0x0000000000000000FFFF);
	gir_y = escala_gir*(int16_t)((gyros >> 16) & 0x0000000000000000FFFF);

	acc_x = escala_acc*(int16_t)((accel >> 32) & 0x0000000000000000FFFF);
	gir_x = escala_gir*(int16_t)((gyros >> 32) & 0x0000000000000000FFFF);*/
	acc_z = escala_acc*(int16_t)(accel );
 8001f10:	4b3e      	ldr	r3, [pc, #248]	; (800200c <getData+0x11c>)
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	b213      	sxth	r3, r2
 8001f18:	ee07 3a90 	vmov	s15, r3
 8001f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f20:	4b3c      	ldr	r3, [pc, #240]	; (8002014 <getData+0x124>)
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <getData+0x128>)
 8001f2c:	edc3 7a00 	vstr	s15, [r3]
	gir_z = escala_gir*(int16_t)(gyros);
 8001f30:	4b37      	ldr	r3, [pc, #220]	; (8002010 <getData+0x120>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	b213      	sxth	r3, r2
 8001f38:	ee07 3a90 	vmov	s15, r3
 8001f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f40:	4b36      	ldr	r3, [pc, #216]	; (800201c <getData+0x12c>)
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4a:	4b35      	ldr	r3, [pc, #212]	; (8002020 <getData+0x130>)
 8001f4c:	edc3 7a00 	vstr	s15, [r3]

	acc_y = escala_acc*(int16_t)((accel >> 16));
 8001f50:	4b2e      	ldr	r3, [pc, #184]	; (800200c <getData+0x11c>)
 8001f52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	0c02      	lsrs	r2, r0, #16
 8001f60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f64:	0c0b      	lsrs	r3, r1, #16
 8001f66:	b213      	sxth	r3, r2
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <getData+0x124>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <getData+0x134>)
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
	gir_y = escala_gir*(int16_t)((gyros >> 16));
 8001f80:	4b23      	ldr	r3, [pc, #140]	; (8002010 <getData+0x120>)
 8001f82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	0c02      	lsrs	r2, r0, #16
 8001f90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f94:	0c0b      	lsrs	r3, r1, #16
 8001f96:	b213      	sxth	r3, r2
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <getData+0x12c>)
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <getData+0x138>)
 8001fac:	edc3 7a00 	vstr	s15, [r3]

	acc_x = escala_acc*(int16_t)((accel >> 32));
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <getData+0x11c>)
 8001fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	000a      	movs	r2, r1
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	b213      	sxth	r3, r2
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <getData+0x124>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <getData+0x13c>)
 8001fd8:	edc3 7a00 	vstr	s15, [r3]
	gir_x = escala_gir*(int16_t)((gyros >> 32));
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <getData+0x120>)
 8001fde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	000a      	movs	r2, r1
 8001fec:	2300      	movs	r3, #0
 8001fee:	b213      	sxth	r3, r2
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <getData+0x12c>)
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <getData+0x140>)
 8002004:	edc3 7a00 	vstr	s15, [r3]

}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000170 	.word	0x20000170
 8002010:	20000178 	.word	0x20000178
 8002014:	20000010 	.word	0x20000010
 8002018:	20000188 	.word	0x20000188
 800201c:	20000014 	.word	0x20000014
 8002020:	20000194 	.word	0x20000194
 8002024:	20000184 	.word	0x20000184
 8002028:	20000190 	.word	0x20000190
 800202c:	20000180 	.word	0x20000180
 8002030:	2000018c 	.word	0x2000018c

08002034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b0cb      	sub	sp, #300	; 0x12c
 8002038:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800203a:	f001 fae1 	bl	8003600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800203e:	f000 fb57 	bl	80026f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002042:	f000 fc19 	bl	8002878 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002046:	f000 fbed 	bl	8002824 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800204a:	f000 fbbd 	bl	80027c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t ret = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
  ret++;
 8002054:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002058:	3301      	adds	r3, #1
 800205a:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109

  initMPU6500(&hi2c1);
 800205e:	4880      	ldr	r0, [pc, #512]	; (8002260 <main+0x22c>)
 8002060:	f003 fcd8 	bl	8005a14 <initMPU6500>
  ret = imuCheckPresence();
 8002064:	f003 fe45 	bl	8005cf2 <imuCheckPresence>
 8002068:	4603      	mov	r3, r0
 800206a:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
  imuSetOffsets();
 800206e:	f004 f9b7 	bl	80063e0 <imuSetOffsets>
  ret = imuSelfTest();
 8002072:	f003 fe97 	bl	8005da4 <imuSelfTest>
 8002076:	4603      	mov	r3, r0
 8002078:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109


int i;


for (i=0;i<10;i++)
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002082:	e036      	b.n	80020f2 <main+0xbe>
{
	getData();
 8002084:	f7ff ff34 	bl	8001ef0 <getData>

	az[i] = acc_z;
 8002088:	4b76      	ldr	r3, [pc, #472]	; (8002264 <main+0x230>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4976      	ldr	r1, [pc, #472]	; (8002268 <main+0x234>)
 800208e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	601a      	str	r2, [r3, #0]
	gz[i] = gir_z;
 8002098:	4b74      	ldr	r3, [pc, #464]	; (800226c <main+0x238>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4974      	ldr	r1, [pc, #464]	; (8002270 <main+0x23c>)
 800209e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	601a      	str	r2, [r3, #0]

	ay[i] = acc_y;
 80020a8:	4b72      	ldr	r3, [pc, #456]	; (8002274 <main+0x240>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4972      	ldr	r1, [pc, #456]	; (8002278 <main+0x244>)
 80020ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	601a      	str	r2, [r3, #0]
	gy[i] = gir_y;
 80020b8:	4b70      	ldr	r3, [pc, #448]	; (800227c <main+0x248>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4970      	ldr	r1, [pc, #448]	; (8002280 <main+0x24c>)
 80020be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	601a      	str	r2, [r3, #0]

	ax[i] = acc_x;
 80020c8:	4b6e      	ldr	r3, [pc, #440]	; (8002284 <main+0x250>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	496e      	ldr	r1, [pc, #440]	; (8002288 <main+0x254>)
 80020ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	601a      	str	r2, [r3, #0]
	gx[i] = gir_x;
 80020d8:	4b6c      	ldr	r3, [pc, #432]	; (800228c <main+0x258>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	496c      	ldr	r1, [pc, #432]	; (8002290 <main+0x25c>)
 80020de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	601a      	str	r2, [r3, #0]
for (i=0;i<10;i++)
 80020e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020ec:	3301      	adds	r3, #1
 80020ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80020f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020f6:	2b09      	cmp	r3, #9
 80020f8:	ddc4      	ble.n	8002084 <main+0x50>

}


amx=0;
 80020fa:	4b66      	ldr	r3, [pc, #408]	; (8002294 <main+0x260>)
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
gmx=0;
 8002102:	4b65      	ldr	r3, [pc, #404]	; (8002298 <main+0x264>)
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	601a      	str	r2, [r3, #0]

amy=0;
 800210a:	4b64      	ldr	r3, [pc, #400]	; (800229c <main+0x268>)
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
gmy=0;
 8002112:	4b63      	ldr	r3, [pc, #396]	; (80022a0 <main+0x26c>)
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

amz=0;
 800211a:	4b62      	ldr	r3, [pc, #392]	; (80022a4 <main+0x270>)
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
gmz=0;
 8002122:	4b61      	ldr	r3, [pc, #388]	; (80022a8 <main+0x274>)
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	601a      	str	r2, [r3, #0]

for (i=0;i<10;i++)
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002130:	e076      	b.n	8002220 <main+0x1ec>
{
	amx = amx + ax[i]/10;
 8002132:	4a55      	ldr	r2, [pc, #340]	; (8002288 <main+0x254>)
 8002134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002144:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002148:	4b52      	ldr	r3, [pc, #328]	; (8002294 <main+0x260>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002152:	4b50      	ldr	r3, [pc, #320]	; (8002294 <main+0x260>)
 8002154:	edc3 7a00 	vstr	s15, [r3]
	gmx = gmx + gx[i]/10;
 8002158:	4a4d      	ldr	r2, [pc, #308]	; (8002290 <main+0x25c>)
 800215a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800216a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800216e:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <main+0x264>)
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002178:	4b47      	ldr	r3, [pc, #284]	; (8002298 <main+0x264>)
 800217a:	edc3 7a00 	vstr	s15, [r3]

	amy = amy + ay[i]/10;
 800217e:	4a3e      	ldr	r2, [pc, #248]	; (8002278 <main+0x244>)
 8002180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002190:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002194:	4b41      	ldr	r3, [pc, #260]	; (800229c <main+0x268>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219e:	4b3f      	ldr	r3, [pc, #252]	; (800229c <main+0x268>)
 80021a0:	edc3 7a00 	vstr	s15, [r3]
	gmy = gmy + gy[i]/10;
 80021a4:	4a36      	ldr	r2, [pc, #216]	; (8002280 <main+0x24c>)
 80021a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80021b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021ba:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <main+0x26c>)
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <main+0x26c>)
 80021c6:	edc3 7a00 	vstr	s15, [r3]

	amz = amz + az[i]/10;
 80021ca:	4a27      	ldr	r2, [pc, #156]	; (8002268 <main+0x234>)
 80021cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80021dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021e0:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <main+0x270>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ea:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <main+0x270>)
 80021ec:	edc3 7a00 	vstr	s15, [r3]
	gmz = gmz + gz[i]/10;
 80021f0:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <main+0x23c>)
 80021f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002202:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002206:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <main+0x274>)
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <main+0x274>)
 8002212:	edc3 7a00 	vstr	s15, [r3]
for (i=0;i<10;i++)
 8002216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800221a:	3301      	adds	r3, #1
 800221c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002224:	2b09      	cmp	r3, #9
 8002226:	dd84      	ble.n	8002132 <main+0xfe>

}



vax=0;
 8002228:	4b20      	ldr	r3, [pc, #128]	; (80022ac <main+0x278>)
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
vgx=0;
 8002230:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <main+0x27c>)
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

vay=0;
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <main+0x280>)
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
vgy=0;
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <main+0x284>)
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

vaz=0;
 8002248:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <main+0x288>)
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
vgz=0;
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <main+0x28c>)
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

for (i=0;i<10;i++)
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800225e:	e0fc      	b.n	800245a <main+0x426>
 8002260:	200000d8 	.word	0x200000d8
 8002264:	20000188 	.word	0x20000188
 8002268:	200001e8 	.word	0x200001e8
 800226c:	20000194 	.word	0x20000194
 8002270:	20000260 	.word	0x20000260
 8002274:	20000184 	.word	0x20000184
 8002278:	200001c0 	.word	0x200001c0
 800227c:	20000190 	.word	0x20000190
 8002280:	20000238 	.word	0x20000238
 8002284:	20000180 	.word	0x20000180
 8002288:	20000198 	.word	0x20000198
 800228c:	2000018c 	.word	0x2000018c
 8002290:	20000210 	.word	0x20000210
 8002294:	20000288 	.word	0x20000288
 8002298:	2000028c 	.word	0x2000028c
 800229c:	20000290 	.word	0x20000290
 80022a0:	20000294 	.word	0x20000294
 80022a4:	20000298 	.word	0x20000298
 80022a8:	2000029c 	.word	0x2000029c
 80022ac:	200002a0 	.word	0x200002a0
 80022b0:	200002a4 	.word	0x200002a4
 80022b4:	200002a8 	.word	0x200002a8
 80022b8:	200002ac 	.word	0x200002ac
 80022bc:	200002b0 	.word	0x200002b0
 80022c0:	200002b4 	.word	0x200002b4
{

	vax = (ax[i]-amx)*(ax[i]-amx)/10;
 80022c4:	4ab1      	ldr	r2, [pc, #708]	; (800258c <main+0x558>)
 80022c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	4baf      	ldr	r3, [pc, #700]	; (8002590 <main+0x55c>)
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022dc:	4aab      	ldr	r2, [pc, #684]	; (800258c <main+0x558>)
 80022de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	edd3 6a00 	vldr	s13, [r3]
 80022ea:	4ba9      	ldr	r3, [pc, #676]	; (8002590 <main+0x55c>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022f8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80022fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002300:	4ba4      	ldr	r3, [pc, #656]	; (8002594 <main+0x560>)
 8002302:	edc3 7a00 	vstr	s15, [r3]
	vgx = (gx[i]-gmx)*(gx[i]-gmx)/10;
 8002306:	4aa4      	ldr	r2, [pc, #656]	; (8002598 <main+0x564>)
 8002308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	ed93 7a00 	vldr	s14, [r3]
 8002314:	4ba1      	ldr	r3, [pc, #644]	; (800259c <main+0x568>)
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800231e:	4a9e      	ldr	r2, [pc, #632]	; (8002598 <main+0x564>)
 8002320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	edd3 6a00 	vldr	s13, [r3]
 800232c:	4b9b      	ldr	r3, [pc, #620]	; (800259c <main+0x568>)
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002336:	ee27 7a27 	vmul.f32	s14, s14, s15
 800233a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800233e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002342:	4b97      	ldr	r3, [pc, #604]	; (80025a0 <main+0x56c>)
 8002344:	edc3 7a00 	vstr	s15, [r3]

	vay = (ay[i]-amy)*(ay[i]-amy)/10;
 8002348:	4a96      	ldr	r2, [pc, #600]	; (80025a4 <main+0x570>)
 800234a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	ed93 7a00 	vldr	s14, [r3]
 8002356:	4b94      	ldr	r3, [pc, #592]	; (80025a8 <main+0x574>)
 8002358:	edd3 7a00 	vldr	s15, [r3]
 800235c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002360:	4a90      	ldr	r2, [pc, #576]	; (80025a4 <main+0x570>)
 8002362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	edd3 6a00 	vldr	s13, [r3]
 800236e:	4b8e      	ldr	r3, [pc, #568]	; (80025a8 <main+0x574>)
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800237c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002380:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002384:	4b89      	ldr	r3, [pc, #548]	; (80025ac <main+0x578>)
 8002386:	edc3 7a00 	vstr	s15, [r3]
	vgy = (gy[i]-gmy)*(gy[i]-gmy)/10;
 800238a:	4a89      	ldr	r2, [pc, #548]	; (80025b0 <main+0x57c>)
 800238c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	ed93 7a00 	vldr	s14, [r3]
 8002398:	4b86      	ldr	r3, [pc, #536]	; (80025b4 <main+0x580>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a2:	4a83      	ldr	r2, [pc, #524]	; (80025b0 <main+0x57c>)
 80023a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	edd3 6a00 	vldr	s13, [r3]
 80023b0:	4b80      	ldr	r3, [pc, #512]	; (80025b4 <main+0x580>)
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023be:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80023c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023c6:	4b7c      	ldr	r3, [pc, #496]	; (80025b8 <main+0x584>)
 80023c8:	edc3 7a00 	vstr	s15, [r3]

	vaz = (az[i]-amz)*(az[i]-amz)/10;
 80023cc:	4a7b      	ldr	r2, [pc, #492]	; (80025bc <main+0x588>)
 80023ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	ed93 7a00 	vldr	s14, [r3]
 80023da:	4b79      	ldr	r3, [pc, #484]	; (80025c0 <main+0x58c>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023e4:	4a75      	ldr	r2, [pc, #468]	; (80025bc <main+0x588>)
 80023e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	edd3 6a00 	vldr	s13, [r3]
 80023f2:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <main+0x58c>)
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002400:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002408:	4b6e      	ldr	r3, [pc, #440]	; (80025c4 <main+0x590>)
 800240a:	edc3 7a00 	vstr	s15, [r3]
	vgz = (gz[i]-gmz)*(gz[i]-gmz)/10;
 800240e:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <main+0x594>)
 8002410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	ed93 7a00 	vldr	s14, [r3]
 800241c:	4b6b      	ldr	r3, [pc, #428]	; (80025cc <main+0x598>)
 800241e:	edd3 7a00 	vldr	s15, [r3]
 8002422:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002426:	4a68      	ldr	r2, [pc, #416]	; (80025c8 <main+0x594>)
 8002428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	edd3 6a00 	vldr	s13, [r3]
 8002434:	4b65      	ldr	r3, [pc, #404]	; (80025cc <main+0x598>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800243e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002442:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002446:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800244a:	4b61      	ldr	r3, [pc, #388]	; (80025d0 <main+0x59c>)
 800244c:	edc3 7a00 	vstr	s15, [r3]
for (i=0;i<10;i++)
 8002450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002454:	3301      	adds	r3, #1
 8002456:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800245a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800245e:	2b09      	cmp	r3, #9
 8002460:	f77f af30 	ble.w	80022c4 <main+0x290>
//{
	arm_matrix_instance_f32 Ap, Ea,Eg,Xaa,Paa,Xap,Pap;


	float a_p[3]; //aceleracion externa pasada
	float cov_a[] = {0,0,0,0,0,0,0,0,0};//covarianza del acelerometro
 8002464:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002468:	2224      	movs	r2, #36	; 0x24
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f004 fa37 	bl	80068e0 <memset>
	float cov_g[]= {0,0,0,0,0,0,0,0,0}  ;//covarianza giroscopo
 8002472:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002476:	2224      	movs	r2, #36	; 0x24
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f004 fa30 	bl	80068e0 <memset>
	float xaa[3];
	float xap[3];
	float paa[9];
	float pap[9]; //chequear valores iniciales //covariazas que arranquen en 0

	a_p[0]=0;
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	a_p[1]=0;
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	a_p[2]=0;
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	xaa[0] = 0;
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	65bb      	str	r3, [r7, #88]	; 0x58
	xaa[1] = 0;
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	xaa[2] = 1;
 80024a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024a8:	663b      	str	r3, [r7, #96]	; 0x60
	for (i=0;i<9;i++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80024b0:	e063      	b.n	800257a <main+0x546>
	{
		if (i==0)
 80024b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d114      	bne.n	80024e4 <main+0x4b0>
		{
			cov_a[i] = vax;
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <main+0x560>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80024c8:	443b      	add	r3, r7
 80024ca:	3b70      	subs	r3, #112	; 0x70
 80024cc:	601a      	str	r2, [r3, #0]


			cov_g[i] = vgx;
 80024ce:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <main+0x56c>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80024dc:	443b      	add	r3, r7
 80024de:	3b94      	subs	r3, #148	; 0x94
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e045      	b.n	8002570 <main+0x53c>


		}else if (i==4)
 80024e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d114      	bne.n	8002516 <main+0x4e2>
		{
			cov_a[i] = vay;
 80024ec:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <main+0x578>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80024fa:	443b      	add	r3, r7
 80024fc:	3b70      	subs	r3, #112	; 0x70
 80024fe:	601a      	str	r2, [r3, #0]
			cov_g[i] = vgy;
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <main+0x584>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800250e:	443b      	add	r3, r7
 8002510:	3b94      	subs	r3, #148	; 0x94
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e02c      	b.n	8002570 <main+0x53c>


		}else if(i==8)
 8002516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800251a:	2b08      	cmp	r3, #8
 800251c:	d114      	bne.n	8002548 <main+0x514>
		{
			cov_a[i] = vaz;
 800251e:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <main+0x590>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800252c:	443b      	add	r3, r7
 800252e:	3b70      	subs	r3, #112	; 0x70
 8002530:	601a      	str	r2, [r3, #0]
			cov_g[i] = vgz;
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <main+0x59c>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002540:	443b      	add	r3, r7
 8002542:	3b94      	subs	r3, #148	; 0x94
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e013      	b.n	8002570 <main+0x53c>

		}else
		{
			cov_a[i] = 0;
 8002548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002552:	443b      	add	r3, r7
 8002554:	3b70      	subs	r3, #112	; 0x70
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
			cov_g[i] = 0;
 800255c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002566:	443b      	add	r3, r7
 8002568:	3b94      	subs	r3, #148	; 0x94
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
	for (i=0;i<9;i++)
 8002570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002574:	3301      	adds	r3, #1
 8002576:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800257a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800257e:	2b08      	cmp	r3, #8
 8002580:	dd97      	ble.n	80024b2 <main+0x47e>
	cov_g[4] = 0.1;
	cov_g[8] = 0.1;*/



	for ( i=0; i<9;i++)
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002588:	e033      	b.n	80025f2 <main+0x5be>
 800258a:	bf00      	nop
 800258c:	20000198 	.word	0x20000198
 8002590:	20000288 	.word	0x20000288
 8002594:	200002a0 	.word	0x200002a0
 8002598:	20000210 	.word	0x20000210
 800259c:	2000028c 	.word	0x2000028c
 80025a0:	200002a4 	.word	0x200002a4
 80025a4:	200001c0 	.word	0x200001c0
 80025a8:	20000290 	.word	0x20000290
 80025ac:	200002a8 	.word	0x200002a8
 80025b0:	20000238 	.word	0x20000238
 80025b4:	20000294 	.word	0x20000294
 80025b8:	200002ac 	.word	0x200002ac
 80025bc:	200001e8 	.word	0x200001e8
 80025c0:	20000298 	.word	0x20000298
 80025c4:	200002b0 	.word	0x200002b0
 80025c8:	20000260 	.word	0x20000260
 80025cc:	2000029c 	.word	0x2000029c
 80025d0:	200002b4 	.word	0x200002b4
	{
		paa[i] = 0;
 80025d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80025de:	443b      	add	r3, r7
 80025e0:	3be8      	subs	r3, #232	; 0xe8
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
	for ( i=0; i<9;i++)
 80025e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025ec:	3301      	adds	r3, #1
 80025ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80025f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	ddec      	ble.n	80025d4 <main+0x5a0>
	}

	arm_mat_init_f32(&Ea, 3, 3, cov_a);
 80025fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80025fe:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002602:	2203      	movs	r2, #3
 8002604:	2103      	movs	r1, #3
 8002606:	f000 fbc4 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Eg, 3, 3, cov_g);
 800260a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800260e:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8002612:	2203      	movs	r2, #3
 8002614:	2103      	movs	r1, #3
 8002616:	f000 fbbc 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Xaa, 3, 1, xaa);
 800261a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800261e:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8002622:	2201      	movs	r2, #1
 8002624:	2103      	movs	r1, #3
 8002626:	f000 fbb4 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Xap, 3, 1, xap);
 800262a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800262e:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8002632:	2201      	movs	r2, #1
 8002634:	2103      	movs	r1, #3
 8002636:	f000 fbac 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Paa, 3, 3, paa);
 800263a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800263e:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8002642:	2203      	movs	r2, #3
 8002644:	2103      	movs	r1, #3
 8002646:	f000 fba4 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Pap, 3, 3, pap);
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8002650:	2203      	movs	r2, #3
 8002652:	2103      	movs	r1, #3
 8002654:	f000 fb9d 	bl	8002d92 <arm_mat_init_f32>
	arm_mat_init_f32(&Ap, 3, 1, a_p);
 8002658:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800265c:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8002660:	2201      	movs	r2, #1
 8002662:	2103      	movs	r1, #3
 8002664:	f000 fb95 	bl	8002d92 <arm_mat_init_f32>

	uint16_t primero=1;
 8002668:	2301      	movs	r3, #1
 800266a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	while(1)
	{
		//recibo datos de una cola

		getData();
 800266e:	f7ff fc3f 	bl	8001ef0 <getData>

		yg[0] = gir_x;
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <main+0x6a4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	673b      	str	r3, [r7, #112]	; 0x70
		yg[1] = gir_y;
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <main+0x6a8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	677b      	str	r3, [r7, #116]	; 0x74
		yg[2] = gir_z;
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <main+0x6ac>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	67bb      	str	r3, [r7, #120]	; 0x78

		ya[0] = acc_x;
 8002684:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <main+0x6b0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	667b      	str	r3, [r7, #100]	; 0x64
		ya[1] = acc_y;
 800268a:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <main+0x6b4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	66bb      	str	r3, [r7, #104]	; 0x68
		ya[2] = acc_z;
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <main+0x6b8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	66fb      	str	r3, [r7, #108]	; 0x6c



		fil_kal(yg, ya, &Ap, &Xaa, &Xap, &Paa, &Pap, primero, cov_a, cov_g);
 8002696:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 800269a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800269e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80026a2:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80026a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80026aa:	9305      	str	r3, [sp, #20]
 80026ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026b0:	9304      	str	r3, [sp, #16]
 80026b2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80026b6:	9303      	str	r3, [sp, #12]
 80026b8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80026bc:	9302      	str	r3, [sp, #8]
 80026be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	4623      	mov	r3, r4
 80026cc:	f7ff f97e 	bl	80019cc <fil_kal>

		primero = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
		getData();
 80026d6:	e7ca      	b.n	800266e <main+0x63a>
 80026d8:	2000018c 	.word	0x2000018c
 80026dc:	20000190 	.word	0x20000190
 80026e0:	20000194 	.word	0x20000194
 80026e4:	20000180 	.word	0x20000180
 80026e8:	20000184 	.word	0x20000184
 80026ec:	20000188 	.word	0x20000188

080026f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b094      	sub	sp, #80	; 0x50
 80026f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026f6:	f107 0320 	add.w	r3, r7, #32
 80026fa:	2230      	movs	r2, #48	; 0x30
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f004 f8ee 	bl	80068e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002714:	2300      	movs	r3, #0
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <SystemClock_Config+0xd0>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <SystemClock_Config+0xd0>)
 800271e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002722:	6413      	str	r3, [r2, #64]	; 0x40
 8002724:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <SystemClock_Config+0xd0>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002730:	2300      	movs	r3, #0
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	4b23      	ldr	r3, [pc, #140]	; (80027c4 <SystemClock_Config+0xd4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800273c:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <SystemClock_Config+0xd4>)
 800273e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <SystemClock_Config+0xd4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002750:	2302      	movs	r3, #2
 8002752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002754:	2301      	movs	r3, #1
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002758:	2310      	movs	r3, #16
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800275c:	2302      	movs	r3, #2
 800275e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002760:	2300      	movs	r3, #0
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002764:	2310      	movs	r3, #16
 8002766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002768:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800276c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800276e:	2304      	movs	r3, #4
 8002770:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002772:	2307      	movs	r3, #7
 8002774:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002776:	f107 0320 	add.w	r3, r7, #32
 800277a:	4618      	mov	r0, r3
 800277c:	f002 f9f0 	bl	8004b60 <HAL_RCC_OscConfig>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002786:	f000 f8e5 	bl	8002954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800278a:	230f      	movs	r3, #15
 800278c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800278e:	2302      	movs	r3, #2
 8002790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027a0:	f107 030c 	add.w	r3, r7, #12
 80027a4:	2102      	movs	r1, #2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 fc52 	bl	8005050 <HAL_RCC_ClockConfig>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80027b2:	f000 f8cf 	bl	8002954 <Error_Handler>
  }
}
 80027b6:	bf00      	nop
 80027b8:	3750      	adds	r7, #80	; 0x50
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40007000 	.word	0x40007000

080027c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <MX_I2C1_Init+0x50>)
 80027ce:	4a13      	ldr	r2, [pc, #76]	; (800281c <MX_I2C1_Init+0x54>)
 80027d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_I2C1_Init+0x50>)
 80027d4:	4a12      	ldr	r2, [pc, #72]	; (8002820 <MX_I2C1_Init+0x58>)
 80027d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <MX_I2C1_Init+0x50>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <MX_I2C1_Init+0x50>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <MX_I2C1_Init+0x50>)
 80027e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027ec:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <MX_I2C1_Init+0x50>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <MX_I2C1_Init+0x50>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <MX_I2C1_Init+0x50>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <MX_I2C1_Init+0x50>)
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002804:	4804      	ldr	r0, [pc, #16]	; (8002818 <MX_I2C1_Init+0x50>)
 8002806:	f001 fa15 	bl	8003c34 <HAL_I2C_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002810:	f000 f8a0 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200000d8 	.word	0x200000d8
 800281c:	40005400 	.word	0x40005400
 8002820:	000186a0 	.word	0x000186a0

08002824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002828:	4b11      	ldr	r3, [pc, #68]	; (8002870 <MX_USART2_UART_Init+0x4c>)
 800282a:	4a12      	ldr	r2, [pc, #72]	; (8002874 <MX_USART2_UART_Init+0x50>)
 800282c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <MX_USART2_UART_Init+0x4c>)
 8002830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <MX_USART2_UART_Init+0x4c>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <MX_USART2_UART_Init+0x4c>)
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <MX_USART2_UART_Init+0x4c>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <MX_USART2_UART_Init+0x4c>)
 800284a:	220c      	movs	r2, #12
 800284c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <MX_USART2_UART_Init+0x4c>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <MX_USART2_UART_Init+0x4c>)
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800285a:	4805      	ldr	r0, [pc, #20]	; (8002870 <MX_USART2_UART_Init+0x4c>)
 800285c:	f002 fe18 	bl	8005490 <HAL_UART_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002866:	f000 f875 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	2000012c 	.word	0x2000012c
 8002874:	40004400 	.word	0x40004400

08002878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <MX_GPIO_Init+0xd0>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a2c      	ldr	r2, [pc, #176]	; (8002948 <MX_GPIO_Init+0xd0>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <MX_GPIO_Init+0xd0>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b26      	ldr	r3, [pc, #152]	; (8002948 <MX_GPIO_Init+0xd0>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a25      	ldr	r2, [pc, #148]	; (8002948 <MX_GPIO_Init+0xd0>)
 80028b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b23      	ldr	r3, [pc, #140]	; (8002948 <MX_GPIO_Init+0xd0>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <MX_GPIO_Init+0xd0>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <MX_GPIO_Init+0xd0>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <MX_GPIO_Init+0xd0>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <MX_GPIO_Init+0xd0>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a17      	ldr	r2, [pc, #92]	; (8002948 <MX_GPIO_Init+0xd0>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <MX_GPIO_Init+0xd0>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028fe:	2200      	movs	r2, #0
 8002900:	2120      	movs	r1, #32
 8002902:	4812      	ldr	r0, [pc, #72]	; (800294c <MX_GPIO_Init+0xd4>)
 8002904:	f001 f97c 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800290c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800290e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4619      	mov	r1, r3
 800291e:	480c      	ldr	r0, [pc, #48]	; (8002950 <MX_GPIO_Init+0xd8>)
 8002920:	f000 ffea 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002924:	2320      	movs	r3, #32
 8002926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002928:	2301      	movs	r3, #1
 800292a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4619      	mov	r1, r3
 800293a:	4804      	ldr	r0, [pc, #16]	; (800294c <MX_GPIO_Init+0xd4>)
 800293c:	f000 ffdc 	bl	80038f8 <HAL_GPIO_Init>

}
 8002940:	bf00      	nop
 8002942:	3728      	adds	r7, #40	; 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40023800 	.word	0x40023800
 800294c:	40020000 	.word	0x40020000
 8002950:	40020800 	.word	0x40020800

08002954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002958:	b672      	cpsid	i
}
 800295a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800295c:	e7fe      	b.n	800295c <Error_Handler+0x8>
	...

08002960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_MspInit+0x4c>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <HAL_MspInit+0x4c>)
 8002970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <HAL_MspInit+0x4c>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_MspInit+0x4c>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <HAL_MspInit+0x4c>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_MspInit+0x4c>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800299e:	2007      	movs	r0, #7
 80029a0:	f000 ff76 	bl	8003890 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800

080029b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	; 0x28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <HAL_I2C_MspInit+0x84>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d12c      	bne.n	8002a2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_I2C_MspInit+0x88>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a17      	ldr	r2, [pc, #92]	; (8002a38 <HAL_I2C_MspInit+0x88>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <HAL_I2C_MspInit+0x88>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029f4:	2312      	movs	r3, #18
 80029f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a00:	2304      	movs	r3, #4
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480c      	ldr	r0, [pc, #48]	; (8002a3c <HAL_I2C_MspInit+0x8c>)
 8002a0c:	f000 ff74 	bl	80038f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <HAL_I2C_MspInit+0x88>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <HAL_I2C_MspInit+0x88>)
 8002a1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_I2C_MspInit+0x88>)
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a2c:	bf00      	nop
 8002a2e:	3728      	adds	r7, #40	; 0x28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40005400 	.word	0x40005400
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40020400 	.word	0x40020400

08002a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <HAL_UART_MspInit+0x84>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d12b      	bne.n	8002aba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_UART_MspInit+0x88>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <HAL_UART_MspInit+0x88>)
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_UART_MspInit+0x88>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_UART_MspInit+0x88>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <HAL_UART_MspInit+0x88>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_UART_MspInit+0x88>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a9a:	230c      	movs	r3, #12
 8002a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aaa:	2307      	movs	r3, #7
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4805      	ldr	r0, [pc, #20]	; (8002acc <HAL_UART_MspInit+0x8c>)
 8002ab6:	f000 ff1f 	bl	80038f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002aba:	bf00      	nop
 8002abc:	3728      	adds	r7, #40	; 0x28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40004400 	.word	0x40004400
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020000 	.word	0x40020000

08002ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ad4:	e7fe      	b.n	8002ad4 <NMI_Handler+0x4>

08002ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ada:	e7fe      	b.n	8002ada <HardFault_Handler+0x4>

08002adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <MemManage_Handler+0x4>

08002ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae6:	e7fe      	b.n	8002ae6 <BusFault_Handler+0x4>

08002ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <UsageFault_Handler+0x4>

08002aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b1c:	f000 fdc2 	bl	80036a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <SystemInit+0x20>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <SystemInit+0x20>)
 8002b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <start_timer_3>:
	TIM3->CR1 |= TIM_CR1_CEN;
	TIM3->CR1 &= ~TIM_CR1_CEN;
}

void start_timer_3(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <start_timer_3+0x20>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CR1 |= TIM_CR1_CEN;
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <start_timer_3+0x20>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <start_timer_3+0x20>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6013      	str	r3, [r2, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40000400 	.word	0x40000400

08002b6c <valor_timer_3>:

uint32_t valor_timer_3(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
	uint32_t ret = TIM3->CNT;//devuelve el conteo
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <valor_timer_3+0x1c>)
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	607b      	str	r3, [r7, #4]

	return ret;
 8002b78:	687b      	ldr	r3, [r7, #4]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40000400 	.word	0x40000400

08002b8c <stop_timer_3>:

void stop_timer_3(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <stop_timer_3+0x1c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <stop_timer_3+0x1c>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	6013      	str	r3, [r2, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40000400 	.word	0x40000400

08002bac <start_timer_4>:
	TIM4->CR1 |= TIM_CR1_CEN;
	TIM4->CR1 &= ~TIM_CR1_CEN;
}

void start_timer_4(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
	TIM4->CNT = 0;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <start_timer_4+0x20>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CR1 |= TIM_CR1_CEN;
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <start_timer_4+0x20>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <start_timer_4+0x20>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6013      	str	r3, [r2, #0]
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	40000800 	.word	0x40000800

08002bd0 <valor_timer_4>:

uint32_t valor_timer_4(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
	uint32_t ret = TIM4->CNT;//devuelve el conteo
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <valor_timer_4+0x1c>)
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	607b      	str	r3, [r7, #4]

	return ret;
 8002bdc:	687b      	ldr	r3, [r7, #4]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40000800 	.word	0x40000800

08002bf0 <stop_timer_4>:

void stop_timer_4(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~TIM_CR1_CEN;
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <stop_timer_4+0x1c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <stop_timer_4+0x1c>)
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	6013      	str	r3, [r2, #0]
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40000800 	.word	0x40000800

08002c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c14:	480d      	ldr	r0, [pc, #52]	; (8002c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c16:	490e      	ldr	r1, [pc, #56]	; (8002c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c18:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c1c:	e002      	b.n	8002c24 <LoopCopyDataInit>

08002c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c22:	3304      	adds	r3, #4

08002c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c28:	d3f9      	bcc.n	8002c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c2c:	4c0b      	ldr	r4, [pc, #44]	; (8002c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c30:	e001      	b.n	8002c36 <LoopFillZerobss>

08002c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c34:	3204      	adds	r2, #4

08002c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c38:	d3fb      	bcc.n	8002c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c3a:	f7ff ff73 	bl	8002b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c3e:	f003 fe2b 	bl	8006898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c42:	f7ff f9f7 	bl	8002034 <main>
  bx  lr    
 8002c46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c50:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8002c54:	08008478 	.word	0x08008478
  ldr r2, =_sbss
 8002c58:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002c5c:	200002dc 	.word	0x200002dc

08002c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c60:	e7fe      	b.n	8002c60 <ADC_IRQHandler>

08002c62 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b091      	sub	sp, #68	; 0x44
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	885b      	ldrh	r3, [r3, #2]
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined (ARM_MATH_DSP)

    /* Loop unrolling */
    blkCnt = numSamples >> 2U;
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	089b      	lsrs	r3, r3, #2
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8002c96:	e052      	b.n	8002d3e <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8002c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8002ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8002caa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002cae:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb6:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8002cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8002cc6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002cca:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd2:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 8002cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8002cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8002cf6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002cfa:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d02:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8002d06:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d12:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	3308      	adds	r3, #8
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d20:	330c      	adds	r3, #12
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 8002d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d28:	3310      	adds	r3, #16
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 8002d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2e:	3310      	adds	r3, #16
 8002d30:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 8002d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d34:	3310      	adds	r3, #16
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1a9      	bne.n	8002c98 <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8002d4c:	e013      	b.n	8002d76 <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 8002d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d50:	1d1a      	adds	r2, r3, #4
 8002d52:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d54:	ed93 7a00 	vldr	s14, [r3]
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	1d1a      	adds	r2, r3, #4
 8002d5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d64:	1d1a      	adds	r2, r3, #4
 8002d66:	637a      	str	r2, [r7, #52]	; 0x34
 8002d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	3b01      	subs	r3, #1
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e8      	bne.n	8002d4e <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
 8002d82:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3744      	adds	r7, #68	; 0x44
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	817b      	strh	r3, [r7, #10]
 8002da0:	4613      	mov	r3, r2
 8002da2:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	897a      	ldrh	r2, [r7, #10]
 8002da8:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	893a      	ldrh	r2, [r7, #8]
 8002dae:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	605a      	str	r2, [r3, #4]
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b09b      	sub	sp, #108	; 0x6c
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	885b      	ldrh	r3, [r3, #2]
 8002de2:	61bb      	str	r3, [r7, #24]
#if defined (ARM_MATH_DSP)
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 8002dea:	2300      	movs	r3, #0
 8002dec:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8002df6:	e029      	b.n	8002e4c <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8002e00:	e008      	b.n	8002e14 <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 8002e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e04:	1d1a      	adds	r2, r3, #4
 8002e06:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
        j--;
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e10:	3b01      	subs	r3, #1
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8002e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f3      	bne.n	8002e02 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 8002e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e1c:	1d1a      	adds	r2, r3, #4
 8002e1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e24:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8002e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8002e2c:	e008      	b.n	8002e40 <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 8002e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e30:	1d1a      	adds	r2, r3, #4
 8002e32:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
        j--;
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f3      	bne.n	8002e2e <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
 8002e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (rowCnt > 0U)
 8002e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1d2      	bne.n	8002df8 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	62bb      	str	r3, [r7, #40]	; 0x28

    while (loopCnt > 0U)
 8002e5a:	e1aa      	b.n	80031b2 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	fb02 f303 	mul.w	r3, r2, r3
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002e68:	4413      	add	r3, r2
 8002e6a:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 8002e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	6a3a      	ldr	r2, [r7, #32]
 8002e78:	4413      	add	r3, r2
 8002e7a:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 8002e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e8c:	e036      	b.n	8002efc <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 8002e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e90:	edd3 7a00 	vldr	s15, [r3]
 8002e94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9c:	dd10      	ble.n	8002ec0 <arm_mat_inverse_f32+0xfe>
 8002e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ea0:	edd3 7a00 	vldr	s15, [r3]
 8002ea4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002ea8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	d503      	bpl.n	8002eba <arm_mat_inverse_f32+0xf8>
 8002eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eb4:	edd3 7a00 	vldr	s15, [r3]
 8002eb8:	e016      	b.n	8002ee8 <arm_mat_inverse_f32+0x126>
 8002eba:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002ebe:	e013      	b.n	8002ee8 <arm_mat_inverse_f32+0x126>
 8002ec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	eef1 7a67 	vneg.f32	s15, s15
 8002eca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002ece:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed6:	d505      	bpl.n	8002ee4 <arm_mat_inverse_f32+0x122>
 8002ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	eef1 7a67 	vneg.f32	s15, s15
 8002ee2:	e001      	b.n	8002ee8 <arm_mat_inverse_f32+0x126>
 8002ee4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002ee8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ef2:	4413      	add	r3, r2
 8002ef4:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
 8002ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef8:	3301      	adds	r3, #1
 8002efa:	643b      	str	r3, [r7, #64]	; 0x40
 8002efc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d3c4      	bcc.n	8002e8e <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if (maxC == 0.0f)
 8002f04:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002f08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f10:	d102      	bne.n	8002f18 <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
 8002f12:	f06f 0304 	mvn.w	r3, #4
 8002f16:	e186      	b.n	8003226 <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
 8002f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f1a:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1U;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Check if the pivot element is the most significant of the column */
      if ( (in > 0.0f ? in : -in) != maxC)
 8002f20:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2c:	dd02      	ble.n	8002f34 <arm_mat_inverse_f32+0x172>
 8002f2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f32:	e003      	b.n	8002f3c <arm_mat_inverse_f32+0x17a>
 8002f34:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f38:	eef1 7a67 	vneg.f32	s15, s15
 8002f3c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002f40:	eef4 7a47 	vcmp.f32	s15, s14
 8002f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f48:	d069      	beq.n	800301e <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1U);
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	643b      	str	r3, [r7, #64]	; 0x40

        while (i > 0U)
 8002f54:	e060      	b.n	8003018 <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f62:	4413      	add	r3, r2
 8002f64:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f72:	4413      	add	r3, r2
 8002f74:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to
           * replace in the rows below */
          if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 8002f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f78:	edd3 7a00 	vldr	s15, [r3]
 8002f7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f84:	dd03      	ble.n	8002f8e <arm_mat_inverse_f32+0x1cc>
 8002f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f88:	edd3 7a00 	vldr	s15, [r3]
 8002f8c:	e004      	b.n	8002f98 <arm_mat_inverse_f32+0x1d6>
 8002f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	eef1 7a67 	vneg.f32	s15, s15
 8002f98:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002f9c:	eef4 7a47 	vcmp.f32	s15, s14
 8002fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa4:	d132      	bne.n	800300c <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 8002fae:	e010      	b.n	8002fd2 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 8002fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
 8002fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb8:	1d1a      	adds	r2, r3, #4
 8002fba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002fbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8002fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fc4:	1d1a      	adds	r2, r3, #4
 8002fc6:	663a      	str	r2, [r7, #96]	; 0x60
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1eb      	bne.n	8002fb0 <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 8002fdc:	e010      	b.n	8003000 <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 8002fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
 8002fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe6:	1d1a      	adds	r2, r3, #4
 8002fe8:	657a      	str	r2, [r7, #84]	; 0x54
 8002fea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 8002ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff2:	1d1a      	adds	r2, r3, #4
 8002ff4:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8002ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8003000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1eb      	bne.n	8002fde <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8003006:	2301      	movs	r3, #1
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
 800300a:	e008      	b.n	800301e <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300e:	3301      	adds	r3, #1
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
 8003012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003014:	3b01      	subs	r3, #1
 8003016:	643b      	str	r3, [r7, #64]	; 0x40
        while (i > 0U)
 8003018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d19b      	bne.n	8002f56 <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	2b01      	cmp	r3, #1
 8003022:	d009      	beq.n	8003038 <arm_mat_inverse_f32+0x276>
 8003024:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003028:	eef5 7a40 	vcmp.f32	s15, #0.0
 800302c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003030:	d102      	bne.n	8003038 <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
 8003032:	f06f 0304 	mvn.w	r3, #4
 8003036:	e0f6      	b.n	8003226 <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	fb02 f303 	mul.w	r3, r2, r3
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003044:	4413      	add	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	6a3a      	ldr	r2, [r7, #32]
 8003054:	4413      	add	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 800306e:	e010      	b.n	8003092 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 8003070:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
 8003076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003078:	1d1a      	adds	r2, r3, #4
 800307a:	663a      	str	r2, [r7, #96]	; 0x60
 800307c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003080:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003088:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	3b01      	subs	r3, #1
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8003092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1eb      	bne.n	8003070 <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 800309c:	e010      	b.n	80030c0 <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 800309e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
 80030a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a6:	1d1a      	adds	r2, r3, #4
 80030a8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030aa:	edd7 6a02 	vldr	s13, [r7, #8]
 80030ae:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80030b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b6:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 80030ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030bc:	3b01      	subs	r3, #1
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80030c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1eb      	bne.n	800309e <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 80030c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030c8:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (k > 0U)
 80030d6:	e060      	b.n	800319a <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if (i == l)
 80030d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	429a      	cmp	r2, r3
 80030de:	d10c      	bne.n	80030fa <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030ea:	4413      	add	r3, r2
 80030ec:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030f4:	4413      	add	r3, r2
 80030f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030f8:	e044      	b.n	8003184 <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 80030fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8003110:	e017      	b.n	8003142 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8003112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8003118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800311a:	1d1a      	adds	r2, r3, #4
 800311c:	653a      	str	r2, [r7, #80]	; 0x50
 800311e:	ed93 7a00 	vldr	s14, [r3]
 8003122:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800312c:	1d1a      	adds	r2, r3, #4
 800312e:	663a      	str	r2, [r7, #96]	; 0x60
 8003130:	ed97 7a02 	vldr	s14, [r7, #8]
 8003134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003138:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 800313c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313e:	3b01      	subs	r3, #1
 8003140:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8003142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e4      	bne.n	8003112 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 800314c:	e017      	b.n	800317e <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 800314e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8003154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003156:	1d1a      	adds	r2, r3, #4
 8003158:	64fa      	str	r2, [r7, #76]	; 0x4c
 800315a:	ed93 7a00 	vldr	s14, [r3]
 800315e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003168:	1d1a      	adds	r2, r3, #4
 800316a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800316c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003174:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8003178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317a:	3b01      	subs	r3, #1
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 800317e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e4      	bne.n	800314e <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800318a:	4413      	add	r3, r2
 800318c:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	3b01      	subs	r3, #1
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
 8003194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003196:	3301      	adds	r3, #1
 8003198:	643b      	str	r3, [r7, #64]	; 0x40
      while (k > 0U)
 800319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d19b      	bne.n	80030d8 <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
 80031a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031a2:	3304      	adds	r3, #4
 80031a4:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 80031a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a8:	3b01      	subs	r3, #1
 80031aa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	3301      	adds	r3, #1
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
    while (loopCnt > 0U)
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f47f ae51 	bne.w	8002e5c <arm_mat_inverse_f32+0x9a>


#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((flag != 1U) && (in == 0.0f))
 80031c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d02d      	beq.n	8003222 <arm_mat_inverse_f32+0x460>
 80031c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80031ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d2:	d126      	bne.n	8003222 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 80031da:	2300      	movs	r3, #0
 80031dc:	643b      	str	r3, [r7, #64]	; 0x40
 80031de:	e00d      	b.n	80031fc <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
 80031e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80031e6:	4413      	add	r3, r2
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	d10a      	bne.n	800320c <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
 80031f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f8:	3301      	adds	r3, #1
 80031fa:	643b      	str	r3, [r7, #64]	; 0x40
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	fb02 f303 	mul.w	r3, r2, r3
 8003204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003206:	429a      	cmp	r2, r3
 8003208:	d3ea      	bcc.n	80031e0 <arm_mat_inverse_f32+0x41e>
 800320a:	e000      	b.n	800320e <arm_mat_inverse_f32+0x44c>
            break;
 800320c:	bf00      	nop
      }

      if (i == numRows * numCols)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003218:	429a      	cmp	r2, r3
 800321a:	d102      	bne.n	8003222 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
 800321c:	23fb      	movs	r3, #251	; 0xfb
 800321e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
 8003222:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003226:	4618      	mov	r0, r3
 8003228:	376c      	adds	r7, #108	; 0x6c
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8003232:	b480      	push	{r7}
 8003234:	b095      	sub	sp, #84	; 0x54
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	885b      	ldrh	r3, [r3, #2]
 8003260:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	885b      	ldrh	r3, [r3, #2]
 8003266:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
 8003268:	2300      	movs	r3, #0
 800326a:	873b      	strh	r3, [r7, #56]	; 0x38
 800326c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800326e:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 8003270:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003276:	4413      	add	r3, r2
 8003278:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 800327a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800327c:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 800328e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003290:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
 8003292:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003294:	089b      	lsrs	r3, r3, #2
 8003296:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
 8003298:	e061      	b.n	800335e <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 800329a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 80032a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032a6:	4413      	add	r3, r2
 80032a8:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 80032aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 80032b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 80032b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80032be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80032c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 80032ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 80032d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032da:	4413      	add	r3, r2
 80032dc:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 80032de:	ed97 7a06 	vldr	s14, [r7, #24]
 80032e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80032e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80032ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 80032f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 80032fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003302:	4413      	add	r3, r2
 8003304:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 8003306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 800330c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8003312:	ed97 7a07 	vldr	s14, [r7, #28]
 8003316:	edd7 7a08 	vldr	s15, [r7, #32]
 800331a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003326:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 800332a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8003330:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003336:	4413      	add	r3, r2
 8003338:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 800333a:	ed97 7a06 	vldr	s14, [r7, #24]
 800333e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003346:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800334a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
 8003352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003354:	3310      	adds	r3, #16
 8003356:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 8003358:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800335a:	3b01      	subs	r3, #1
 800335c:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 800335e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d19a      	bne.n	800329a <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
 8003364:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
 800336c:	e017      	b.n	800339e <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 800336e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003370:	1d1a      	adds	r2, r3, #4
 8003372:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003374:	ed93 7a00 	vldr	s14, [r3]
 8003378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337a:	edd3 7a00 	vldr	s15, [r3]
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 800338e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003394:	4413      	add	r3, r2
 8003396:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 8003398:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800339a:	3b01      	subs	r3, #1
 800339c:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 800339e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e4      	bne.n	800336e <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 80033a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a6:	1d1a      	adds	r2, r3, #4
 80033a8:	643a      	str	r2, [r7, #64]	; 0x40
 80033aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033ac:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 80033ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033b0:	3301      	adds	r3, #1
 80033b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 80033c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80033c2:	3b01      	subs	r3, #1
 80033c4:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
 80033c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f47f af5d 	bne.w	8003288 <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 80033ce:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80033d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033d2:	4413      	add	r3, r2
 80033d4:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 80033d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033dc:	4413      	add	r3, r2
 80033de:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 80033e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80033e2:	3b01      	subs	r3, #1
 80033e4:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
 80033e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f47f af41 	bne.w	8003270 <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 80033f4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3754      	adds	r7, #84	; 0x54
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <arm_mat_scale_f32>:

arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
  float32_t scale,
  arm_matrix_instance_f32 * pDst)
{
 8003404:	b480      	push	{r7}
 8003406:	b093      	sub	sp, #76	; 0x4c
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003410:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	643b      	str	r3, [r7, #64]	; 0x40
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	885b      	ldrh	r3, [r3, #2]
 8003428:	fb02 f303 	mul.w	r3, r2, r3
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2;
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	089b      	lsrs	r3, r3, #2
 8003432:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8003434:	e043      	b.n	80034be <arm_mat_scale_f32+0xba>
    {
      /* C(m,n) = A(m,n) * scale */
      /* Scaling and results are stored in the destination buffer. */
      in1 = pIn[0];
 8003436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	633b      	str	r3, [r7, #48]	; 0x30
      in2 = pIn[1];
 800343c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
      in3 = pIn[2];
 8003442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
      in4 = pIn[3];
 8003448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	627b      	str	r3, [r7, #36]	; 0x24

      out1 = in1 * scale;
 800344e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003452:	edd7 7a02 	vldr	s15, [r7, #8]
 8003456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345a:	edc7 7a08 	vstr	s15, [r7, #32]
      out2 = in2 * scale;
 800345e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003462:	edd7 7a02 	vldr	s15, [r7, #8]
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346a:	edc7 7a07 	vstr	s15, [r7, #28]
      out3 = in3 * scale;
 800346e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003472:	edd7 7a02 	vldr	s15, [r7, #8]
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	edc7 7a06 	vstr	s15, [r7, #24]
      out4 = in4 * scale;
 800347e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003482:	edd7 7a02 	vldr	s15, [r7, #8]
 8003486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348a:	edc7 7a05 	vstr	s15, [r7, #20]


      pOut[0] = out1;
 800348e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003490:	6a3a      	ldr	r2, [r7, #32]
 8003492:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8003494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003496:	3304      	adds	r3, #4
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	601a      	str	r2, [r3, #0]
      pOut[2] = out3;
 800349c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349e:	3308      	adds	r3, #8
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	601a      	str	r2, [r3, #0]
      pOut[3] = out4;
 80034a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a6:	330c      	adds	r3, #12
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	601a      	str	r2, [r3, #0]

      /* update pointers to process next sampels */
      pIn += 4U;
 80034ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ae:	3310      	adds	r3, #16
 80034b0:	647b      	str	r3, [r7, #68]	; 0x44
      pOut += 4U;
 80034b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b4:	3310      	adds	r3, #16
 80034b6:	643b      	str	r3, [r7, #64]	; 0x40

      /* Decrement the numSamples loop counter */
      blkCnt--;
 80034b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ba:	3b01      	subs	r3, #1
 80034bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0U)
 80034be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1b8      	bne.n	8003436 <arm_mat_scale_f32+0x32>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 80034c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 80034cc:	e010      	b.n	80034f0 <arm_mat_scale_f32+0xec>
    {
      /* C(m,n) = A(m,n) * scale */
      /* The results are stored in the destination buffer. */
      *pOut++ = (*pIn++) * scale;
 80034ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d0:	1d1a      	adds	r2, r3, #4
 80034d2:	647a      	str	r2, [r7, #68]	; 0x44
 80034d4:	ed93 7a00 	vldr	s14, [r3]
 80034d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034da:	1d1a      	adds	r2, r3, #4
 80034dc:	643a      	str	r2, [r7, #64]	; 0x40
 80034de:	edd7 7a02 	vldr	s15, [r7, #8]
 80034e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 80034ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ec:	3b01      	subs	r3, #1
 80034ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0U)
 80034f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1eb      	bne.n	80034ce <arm_mat_scale_f32+0xca>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* Return to application */
  return (status);
 80034fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8003500:	4618      	mov	r0, r3
 8003502:	374c      	adds	r7, #76	; 0x4c
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 800350c:	b480      	push	{r7}
 800350e:	b08b      	sub	sp, #44	; 0x2c
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	617b      	str	r3, [r7, #20]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	827b      	strh	r3, [r7, #18]
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	885b      	ldrh	r3, [r3, #2]
 800352c:	823b      	strh	r3, [r7, #16]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
 800352e:	2300      	movs	r3, #0
 8003530:	83bb      	strh	r3, [r7, #28]
 8003532:	8a7b      	ldrh	r3, [r7, #18]
 8003534:	837b      	strh	r3, [r7, #26]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* Loop Unrolling */
      blkCnt = nColumns >> 2;
 8003536:	8a3b      	ldrh	r3, [r7, #16]
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	83fb      	strh	r3, [r7, #30]

      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
 800353c:	8bbb      	ldrh	r3, [r7, #28]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4413      	add	r3, r2
 8003544:	623b      	str	r3, [r7, #32]

      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
       ** a second loop below computes the remaining 1 to 3 samples. */
      while (blkCnt > 0U)        /* column loop */
 8003546:	e02e      	b.n	80035a6 <arm_mat_trans_f32+0x9a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	1d1a      	adds	r2, r3, #4
 800354c:	627a      	str	r2, [r7, #36]	; 0x24
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8003554:	8a7b      	ldrh	r3, [r7, #18]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	6a3a      	ldr	r2, [r7, #32]
 800355a:	4413      	add	r3, r2
 800355c:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	1d1a      	adds	r2, r3, #4
 8003562:	627a      	str	r2, [r7, #36]	; 0x24
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 800356a:	8a7b      	ldrh	r3, [r7, #18]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	6a3a      	ldr	r2, [r7, #32]
 8003570:	4413      	add	r3, r2
 8003572:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	1d1a      	adds	r2, r3, #4
 8003578:	627a      	str	r2, [r7, #36]	; 0x24
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8003580:	8a7b      	ldrh	r3, [r7, #18]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	6a3a      	ldr	r2, [r7, #32]
 8003586:	4413      	add	r3, r2
 8003588:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	1d1a      	adds	r2, r3, #4
 800358e:	627a      	str	r2, [r7, #36]	; 0x24
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8003596:	8a7b      	ldrh	r3, [r7, #18]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	6a3a      	ldr	r2, [r7, #32]
 800359c:	4413      	add	r3, r2
 800359e:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 80035a0:	8bfb      	ldrh	r3, [r7, #30]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)        /* column loop */
 80035a6:	8bfb      	ldrh	r3, [r7, #30]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1cd      	bne.n	8003548 <arm_mat_trans_f32+0x3c>
      }

      /* Perform matrix transpose for last 3 samples here. */
      blkCnt = nColumns % 0x4U;
 80035ac:	8a3b      	ldrh	r3, [r7, #16]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	83fb      	strh	r3, [r7, #30]

      while (blkCnt > 0U)
 80035b4:	e00d      	b.n	80035d2 <arm_mat_trans_f32+0xc6>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	1d1a      	adds	r2, r3, #4
 80035ba:	627a      	str	r2, [r7, #36]	; 0x24
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 80035c2:	8a7b      	ldrh	r3, [r7, #18]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	6a3a      	ldr	r2, [r7, #32]
 80035c8:	4413      	add	r3, r2
 80035ca:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 80035cc:	8bfb      	ldrh	r3, [r7, #30]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)
 80035d2:	8bfb      	ldrh	r3, [r7, #30]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1ee      	bne.n	80035b6 <arm_mat_trans_f32+0xaa>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
 80035d8:	8bbb      	ldrh	r3, [r7, #28]
 80035da:	3301      	adds	r3, #1
 80035dc:	83bb      	strh	r3, [r7, #28]

      /* Decrement the row loop counter */
      row--;
 80035de:	8b7b      	ldrh	r3, [r7, #26]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	837b      	strh	r3, [r7, #26]

    } while (row > 0U);          /* row loop end  */
 80035e4:	8b7b      	ldrh	r3, [r7, #26]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1a5      	bne.n	8003536 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 80035ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	372c      	adds	r7, #44	; 0x2c
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <HAL_Init+0x40>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <HAL_Init+0x40>)
 800360a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800360e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_Init+0x40>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a0a      	ldr	r2, [pc, #40]	; (8003640 <HAL_Init+0x40>)
 8003616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800361a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_Init+0x40>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a07      	ldr	r2, [pc, #28]	; (8003640 <HAL_Init+0x40>)
 8003622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003628:	2003      	movs	r0, #3
 800362a:	f000 f931 	bl	8003890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800362e:	2000      	movs	r0, #0
 8003630:	f000 f808 	bl	8003644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003634:	f7ff f994 	bl	8002960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40023c00 	.word	0x40023c00

08003644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_InitTick+0x54>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4b12      	ldr	r3, [pc, #72]	; (800369c <HAL_InitTick+0x58>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	4619      	mov	r1, r3
 8003656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800365a:	fbb3 f3f1 	udiv	r3, r3, r1
 800365e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f93b 	bl	80038de <HAL_SYSTICK_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e00e      	b.n	8003690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b0f      	cmp	r3, #15
 8003676:	d80a      	bhi.n	800368e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003678:	2200      	movs	r2, #0
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	f04f 30ff 	mov.w	r0, #4294967295
 8003680:	f000 f911 	bl	80038a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003684:	4a06      	ldr	r2, [pc, #24]	; (80036a0 <HAL_InitTick+0x5c>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	2000003c 	.word	0x2000003c
 800369c:	20000044 	.word	0x20000044
 80036a0:	20000040 	.word	0x20000040

080036a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_IncTick+0x20>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_IncTick+0x24>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <HAL_IncTick+0x24>)
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000044 	.word	0x20000044
 80036c8:	200002d4 	.word	0x200002d4

080036cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return uwTick;
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_GetTick+0x14>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	200002d4 	.word	0x200002d4

080036e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7ff ffee 	bl	80036cc <HAL_GetTick>
 80036f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d005      	beq.n	800370a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_Delay+0x44>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4413      	add	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800370a:	bf00      	nop
 800370c:	f7ff ffde 	bl	80036cc <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	429a      	cmp	r2, r3
 800371a:	d8f7      	bhi.n	800370c <HAL_Delay+0x28>
  {
  }
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000044 	.word	0x20000044

0800372c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <__NVIC_SetPriorityGrouping+0x44>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003748:	4013      	ands	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800375e:	4a04      	ldr	r2, [pc, #16]	; (8003770 <__NVIC_SetPriorityGrouping+0x44>)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	60d3      	str	r3, [r2, #12]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <__NVIC_GetPriorityGrouping+0x18>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	0a1b      	lsrs	r3, r3, #8
 800377e:	f003 0307 	and.w	r3, r3, #7
}
 8003782:	4618      	mov	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	db0a      	blt.n	80037ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	490c      	ldr	r1, [pc, #48]	; (80037dc <__NVIC_SetPriority+0x4c>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	0112      	lsls	r2, r2, #4
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	440b      	add	r3, r1
 80037b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b8:	e00a      	b.n	80037d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4908      	ldr	r1, [pc, #32]	; (80037e0 <__NVIC_SetPriority+0x50>)
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	3b04      	subs	r3, #4
 80037c8:	0112      	lsls	r2, r2, #4
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	440b      	add	r3, r1
 80037ce:	761a      	strb	r2, [r3, #24]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000e100 	.word	0xe000e100
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b089      	sub	sp, #36	; 0x24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f1c3 0307 	rsb	r3, r3, #7
 80037fe:	2b04      	cmp	r3, #4
 8003800:	bf28      	it	cs
 8003802:	2304      	movcs	r3, #4
 8003804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3304      	adds	r3, #4
 800380a:	2b06      	cmp	r3, #6
 800380c:	d902      	bls.n	8003814 <NVIC_EncodePriority+0x30>
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3b03      	subs	r3, #3
 8003812:	e000      	b.n	8003816 <NVIC_EncodePriority+0x32>
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	401a      	ands	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800382c:	f04f 31ff 	mov.w	r1, #4294967295
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa01 f303 	lsl.w	r3, r1, r3
 8003836:	43d9      	mvns	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	4313      	orrs	r3, r2
         );
}
 800383e:	4618      	mov	r0, r3
 8003840:	3724      	adds	r7, #36	; 0x24
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800385c:	d301      	bcc.n	8003862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385e:	2301      	movs	r3, #1
 8003860:	e00f      	b.n	8003882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003862:	4a0a      	ldr	r2, [pc, #40]	; (800388c <SysTick_Config+0x40>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386a:	210f      	movs	r1, #15
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	f7ff ff8e 	bl	8003790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <SysTick_Config+0x40>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387a:	4b04      	ldr	r3, [pc, #16]	; (800388c <SysTick_Config+0x40>)
 800387c:	2207      	movs	r2, #7
 800387e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	e000e010 	.word	0xe000e010

08003890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff47 	bl	800372c <__NVIC_SetPriorityGrouping>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	4603      	mov	r3, r0
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b8:	f7ff ff5c 	bl	8003774 <__NVIC_GetPriorityGrouping>
 80038bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	6978      	ldr	r0, [r7, #20]
 80038c4:	f7ff ff8e 	bl	80037e4 <NVIC_EncodePriority>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff5d 	bl	8003790 <__NVIC_SetPriority>
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ffb0 	bl	800384c <SysTick_Config>
 80038ec:	4603      	mov	r3, r0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	e159      	b.n	8003bc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003914:	2201      	movs	r2, #1
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4013      	ands	r3, r2
 8003926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	429a      	cmp	r2, r3
 800392e:	f040 8148 	bne.w	8003bc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b01      	cmp	r3, #1
 800393c:	d005      	beq.n	800394a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003946:	2b02      	cmp	r3, #2
 8003948:	d130      	bne.n	80039ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	2203      	movs	r2, #3
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003980:	2201      	movs	r2, #1
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	f003 0201 	and.w	r2, r3, #1
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d017      	beq.n	80039e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d123      	bne.n	8003a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	08da      	lsrs	r2, r3, #3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3208      	adds	r2, #8
 80039fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	220f      	movs	r2, #15
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	08da      	lsrs	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3208      	adds	r2, #8
 8003a36:	69b9      	ldr	r1, [r7, #24]
 8003a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	2203      	movs	r2, #3
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f003 0203 	and.w	r2, r3, #3
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80a2 	beq.w	8003bc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	4b57      	ldr	r3, [pc, #348]	; (8003be0 <HAL_GPIO_Init+0x2e8>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	4a56      	ldr	r2, [pc, #344]	; (8003be0 <HAL_GPIO_Init+0x2e8>)
 8003a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8e:	4b54      	ldr	r3, [pc, #336]	; (8003be0 <HAL_GPIO_Init+0x2e8>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a9a:	4a52      	ldr	r2, [pc, #328]	; (8003be4 <HAL_GPIO_Init+0x2ec>)
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	089b      	lsrs	r3, r3, #2
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	220f      	movs	r2, #15
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a49      	ldr	r2, [pc, #292]	; (8003be8 <HAL_GPIO_Init+0x2f0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d019      	beq.n	8003afa <HAL_GPIO_Init+0x202>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a48      	ldr	r2, [pc, #288]	; (8003bec <HAL_GPIO_Init+0x2f4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_GPIO_Init+0x1fe>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a47      	ldr	r2, [pc, #284]	; (8003bf0 <HAL_GPIO_Init+0x2f8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00d      	beq.n	8003af2 <HAL_GPIO_Init+0x1fa>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a46      	ldr	r2, [pc, #280]	; (8003bf4 <HAL_GPIO_Init+0x2fc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d007      	beq.n	8003aee <HAL_GPIO_Init+0x1f6>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a45      	ldr	r2, [pc, #276]	; (8003bf8 <HAL_GPIO_Init+0x300>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_GPIO_Init+0x1f2>
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	e008      	b.n	8003afc <HAL_GPIO_Init+0x204>
 8003aea:	2307      	movs	r3, #7
 8003aec:	e006      	b.n	8003afc <HAL_GPIO_Init+0x204>
 8003aee:	2303      	movs	r3, #3
 8003af0:	e004      	b.n	8003afc <HAL_GPIO_Init+0x204>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e002      	b.n	8003afc <HAL_GPIO_Init+0x204>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_GPIO_Init+0x204>
 8003afa:	2300      	movs	r3, #0
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	f002 0203 	and.w	r2, r2, #3
 8003b02:	0092      	lsls	r2, r2, #2
 8003b04:	4093      	lsls	r3, r2
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b0c:	4935      	ldr	r1, [pc, #212]	; (8003be4 <HAL_GPIO_Init+0x2ec>)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	089b      	lsrs	r3, r3, #2
 8003b12:	3302      	adds	r3, #2
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b1a:	4b38      	ldr	r3, [pc, #224]	; (8003bfc <HAL_GPIO_Init+0x304>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	43db      	mvns	r3, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4013      	ands	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b3e:	4a2f      	ldr	r2, [pc, #188]	; (8003bfc <HAL_GPIO_Init+0x304>)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b44:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <HAL_GPIO_Init+0x304>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b68:	4a24      	ldr	r2, [pc, #144]	; (8003bfc <HAL_GPIO_Init+0x304>)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b6e:	4b23      	ldr	r3, [pc, #140]	; (8003bfc <HAL_GPIO_Init+0x304>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	43db      	mvns	r3, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b92:	4a1a      	ldr	r2, [pc, #104]	; (8003bfc <HAL_GPIO_Init+0x304>)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b98:	4b18      	ldr	r3, [pc, #96]	; (8003bfc <HAL_GPIO_Init+0x304>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bbc:	4a0f      	ldr	r2, [pc, #60]	; (8003bfc <HAL_GPIO_Init+0x304>)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b0f      	cmp	r3, #15
 8003bcc:	f67f aea2 	bls.w	8003914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop
 8003bd4:	3724      	adds	r7, #36	; 0x24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40013800 	.word	0x40013800
 8003be8:	40020000 	.word	0x40020000
 8003bec:	40020400 	.word	0x40020400
 8003bf0:	40020800 	.word	0x40020800
 8003bf4:	40020c00 	.word	0x40020c00
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40013c00 	.word	0x40013c00

08003c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c10:	787b      	ldrb	r3, [r7, #1]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c16:	887a      	ldrh	r2, [r7, #2]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c1c:	e003      	b.n	8003c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c1e:	887b      	ldrh	r3, [r7, #2]
 8003c20:	041a      	lsls	r2, r3, #16
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	619a      	str	r2, [r3, #24]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e12b      	b.n	8003e9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fe fea8 	bl	80029b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2224      	movs	r2, #36	; 0x24
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c98:	f001 fbd2 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8003c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4a81      	ldr	r2, [pc, #516]	; (8003ea8 <HAL_I2C_Init+0x274>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d807      	bhi.n	8003cb8 <HAL_I2C_Init+0x84>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a80      	ldr	r2, [pc, #512]	; (8003eac <HAL_I2C_Init+0x278>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	bf94      	ite	ls
 8003cb0:	2301      	movls	r3, #1
 8003cb2:	2300      	movhi	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e006      	b.n	8003cc6 <HAL_I2C_Init+0x92>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a7d      	ldr	r2, [pc, #500]	; (8003eb0 <HAL_I2C_Init+0x27c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bf94      	ite	ls
 8003cc0:	2301      	movls	r3, #1
 8003cc2:	2300      	movhi	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e0e7      	b.n	8003e9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4a78      	ldr	r2, [pc, #480]	; (8003eb4 <HAL_I2C_Init+0x280>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	0c9b      	lsrs	r3, r3, #18
 8003cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4a6a      	ldr	r2, [pc, #424]	; (8003ea8 <HAL_I2C_Init+0x274>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d802      	bhi.n	8003d08 <HAL_I2C_Init+0xd4>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	3301      	adds	r3, #1
 8003d06:	e009      	b.n	8003d1c <HAL_I2C_Init+0xe8>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	4a69      	ldr	r2, [pc, #420]	; (8003eb8 <HAL_I2C_Init+0x284>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	099b      	lsrs	r3, r3, #6
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	495c      	ldr	r1, [pc, #368]	; (8003ea8 <HAL_I2C_Init+0x274>)
 8003d38:	428b      	cmp	r3, r1
 8003d3a:	d819      	bhi.n	8003d70 <HAL_I2C_Init+0x13c>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1e59      	subs	r1, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d4a:	1c59      	adds	r1, r3, #1
 8003d4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d50:	400b      	ands	r3, r1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_I2C_Init+0x138>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1e59      	subs	r1, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d64:	3301      	adds	r3, #1
 8003d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6a:	e051      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	e04f      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d111      	bne.n	8003d9c <HAL_I2C_Init+0x168>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1e58      	subs	r0, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	440b      	add	r3, r1
 8003d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e012      	b.n	8003dc2 <HAL_I2C_Init+0x18e>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1e58      	subs	r0, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	0099      	lsls	r1, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db2:	3301      	adds	r3, #1
 8003db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Init+0x196>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e022      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10e      	bne.n	8003df0 <HAL_I2C_Init+0x1bc>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1e58      	subs	r0, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6859      	ldr	r1, [r3, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	440b      	add	r3, r1
 8003de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de4:	3301      	adds	r3, #1
 8003de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dee:	e00f      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1e58      	subs	r0, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	0099      	lsls	r1, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e06:	3301      	adds	r3, #1
 8003e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	6809      	ldr	r1, [r1, #0]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6911      	ldr	r1, [r2, #16]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68d2      	ldr	r2, [r2, #12]
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	000186a0 	.word	0x000186a0
 8003eac:	001e847f 	.word	0x001e847f
 8003eb0:	003d08ff 	.word	0x003d08ff
 8003eb4:	431bde83 	.word	0x431bde83
 8003eb8:	10624dd3 	.word	0x10624dd3

08003ebc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	460b      	mov	r3, r1
 8003eca:	817b      	strh	r3, [r7, #10]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ed0:	f7ff fbfc 	bl	80036cc <HAL_GetTick>
 8003ed4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	f040 80e0 	bne.w	80040a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	2319      	movs	r3, #25
 8003eea:	2201      	movs	r2, #1
 8003eec:	4970      	ldr	r1, [pc, #448]	; (80040b0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fc58 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
 8003efc:	e0d3      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_I2C_Master_Transmit+0x50>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e0cc      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d007      	beq.n	8003f32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2221      	movs	r2, #33	; 0x21
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	893a      	ldrh	r2, [r7, #8]
 8003f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4a50      	ldr	r2, [pc, #320]	; (80040b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f74:	8979      	ldrh	r1, [r7, #10]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fac2 	bl	8004504 <I2C_MasterRequestWrite>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e08d      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003fa0:	e066      	b.n	8004070 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	6a39      	ldr	r1, [r7, #32]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fcd2 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00d      	beq.n	8003fce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d107      	bne.n	8003fca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e06b      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b04      	cmp	r3, #4
 800400a:	d11b      	bne.n	8004044 <HAL_I2C_Master_Transmit+0x188>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004010:	2b00      	cmp	r3, #0
 8004012:	d017      	beq.n	8004044 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	781a      	ldrb	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	6a39      	ldr	r1, [r7, #32]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fcc2 	bl	80049d2 <I2C_WaitOnBTFFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00d      	beq.n	8004070 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	2b04      	cmp	r3, #4
 800405a:	d107      	bne.n	800406c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e01a      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d194      	bne.n	8003fa2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
  }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	00100002 	.word	0x00100002
 80040b4:	ffff0000 	.word	0xffff0000

080040b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08c      	sub	sp, #48	; 0x30
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	461a      	mov	r2, r3
 80040c4:	460b      	mov	r3, r1
 80040c6:	817b      	strh	r3, [r7, #10]
 80040c8:	4613      	mov	r3, r2
 80040ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040cc:	f7ff fafe 	bl	80036cc <HAL_GetTick>
 80040d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b20      	cmp	r3, #32
 80040dc:	f040 820b 	bne.w	80044f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2319      	movs	r3, #25
 80040e6:	2201      	movs	r2, #1
 80040e8:	497c      	ldr	r1, [pc, #496]	; (80042dc <HAL_I2C_Master_Receive+0x224>)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fb5a 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
 80040f8:	e1fe      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_I2C_Master_Receive+0x50>
 8004104:	2302      	movs	r3, #2
 8004106:	e1f7      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b01      	cmp	r3, #1
 800411c:	d007      	beq.n	800412e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800413c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2222      	movs	r2, #34	; 0x22
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2210      	movs	r2, #16
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	893a      	ldrh	r2, [r7, #8]
 800415e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4a5c      	ldr	r2, [pc, #368]	; (80042e0 <HAL_I2C_Master_Receive+0x228>)
 800416e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004170:	8979      	ldrh	r1, [r7, #10]
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fa46 	bl	8004608 <I2C_MasterRequestRead>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e1b8      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418a:	2b00      	cmp	r3, #0
 800418c:	d113      	bne.n	80041b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418e:	2300      	movs	r3, #0
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	623b      	str	r3, [r7, #32]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	623b      	str	r3, [r7, #32]
 80041a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e18c      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d11b      	bne.n	80041f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e16c      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d11b      	bne.n	8004236 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800421c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	e14c      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004244:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800425c:	e138      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004262:	2b03      	cmp	r3, #3
 8004264:	f200 80f1 	bhi.w	800444a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426c:	2b01      	cmp	r3, #1
 800426e:	d123      	bne.n	80042b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 fbed 	bl	8004a54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e139      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042b6:	e10b      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d14e      	bne.n	800435e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	2200      	movs	r2, #0
 80042c8:	4906      	ldr	r1, [pc, #24]	; (80042e4 <HAL_I2C_Master_Receive+0x22c>)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fa6a 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e10e      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
 80042da:	bf00      	nop
 80042dc:	00100002 	.word	0x00100002
 80042e0:	ffff0000 	.word	0xffff0000
 80042e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800435c:	e0b8      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	2200      	movs	r2, #0
 8004366:	4966      	ldr	r1, [pc, #408]	; (8004500 <HAL_I2C_Master_Receive+0x448>)
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fa1b 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0bf      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	2200      	movs	r2, #0
 80043c2:	494f      	ldr	r1, [pc, #316]	; (8004500 <HAL_I2C_Master_Receive+0x448>)
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f9ed 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e091      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004448:	e042      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fb00 	bl	8004a54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e04c      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b04      	cmp	r3, #4
 800449c:	d118      	bne.n	80044d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f47f aec2 	bne.w	800425e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e000      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80044f6:	2302      	movs	r3, #2
  }
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3728      	adds	r7, #40	; 0x28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	00010004 	.word	0x00010004

08004504 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af02      	add	r7, sp, #8
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	460b      	mov	r3, r1
 8004512:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d006      	beq.n	800452e <I2C_MasterRequestWrite+0x2a>
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d003      	beq.n	800452e <I2C_MasterRequestWrite+0x2a>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800452c:	d108      	bne.n	8004540 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e00b      	b.n	8004558 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	2b12      	cmp	r3, #18
 8004546:	d107      	bne.n	8004558 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004556:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f91d 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00d      	beq.n	800458c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457e:	d103      	bne.n	8004588 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004586:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e035      	b.n	80045f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004594:	d108      	bne.n	80045a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004596:	897b      	ldrh	r3, [r7, #10]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	461a      	mov	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045a4:	611a      	str	r2, [r3, #16]
 80045a6:	e01b      	b.n	80045e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045a8:	897b      	ldrh	r3, [r7, #10]
 80045aa:	11db      	asrs	r3, r3, #7
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f003 0306 	and.w	r3, r3, #6
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f063 030f 	orn	r3, r3, #15
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	490e      	ldr	r1, [pc, #56]	; (8004600 <I2C_MasterRequestWrite+0xfc>)
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f943 	bl	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e010      	b.n	80045f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045d6:	897b      	ldrh	r3, [r7, #10]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4907      	ldr	r1, [pc, #28]	; (8004604 <I2C_MasterRequestWrite+0x100>)
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f933 	bl	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	00010008 	.word	0x00010008
 8004604:	00010002 	.word	0x00010002

08004608 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	460b      	mov	r3, r1
 8004616:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800462c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d006      	beq.n	8004642 <I2C_MasterRequestRead+0x3a>
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d003      	beq.n	8004642 <I2C_MasterRequestRead+0x3a>
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004640:	d108      	bne.n	8004654 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e00b      	b.n	800466c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	2b11      	cmp	r3, #17
 800465a:	d107      	bne.n	800466c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800466a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f893 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00d      	beq.n	80046a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004692:	d103      	bne.n	800469c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800469a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e079      	b.n	8004794 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046a8:	d108      	bne.n	80046bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046aa:	897b      	ldrh	r3, [r7, #10]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	611a      	str	r2, [r3, #16]
 80046ba:	e05f      	b.n	800477c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046bc:	897b      	ldrh	r3, [r7, #10]
 80046be:	11db      	asrs	r3, r3, #7
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f003 0306 	and.w	r3, r3, #6
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f063 030f 	orn	r3, r3, #15
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4930      	ldr	r1, [pc, #192]	; (800479c <I2C_MasterRequestRead+0x194>)
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f8b9 	bl	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e054      	b.n	8004794 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046ea:	897b      	ldrh	r3, [r7, #10]
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4929      	ldr	r1, [pc, #164]	; (80047a0 <I2C_MasterRequestRead+0x198>)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f8a9 	bl	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e044      	b.n	8004794 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470a:	2300      	movs	r3, #0
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800472e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f831 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004756:	d103      	bne.n	8004760 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800475e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e017      	b.n	8004794 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004764:	897b      	ldrh	r3, [r7, #10]
 8004766:	11db      	asrs	r3, r3, #7
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f003 0306 	and.w	r3, r3, #6
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f063 030e 	orn	r3, r3, #14
 8004774:	b2da      	uxtb	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4907      	ldr	r1, [pc, #28]	; (80047a0 <I2C_MasterRequestRead+0x198>)
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f865 	bl	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	00010008 	.word	0x00010008
 80047a0:	00010002 	.word	0x00010002

080047a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047b4:	e025      	b.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d021      	beq.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047be:	f7fe ff85 	bl	80036cc <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d302      	bcc.n	80047d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d116      	bne.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f043 0220 	orr.w	r2, r3, #32
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e023      	b.n	800484a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	d10d      	bne.n	8004828 <I2C_WaitOnFlagUntilTimeout+0x84>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	43da      	mvns	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4013      	ands	r3, r2
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	e00c      	b.n	8004842 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	43da      	mvns	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	429a      	cmp	r2, r3
 8004846:	d0b6      	beq.n	80047b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004860:	e051      	b.n	8004906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004870:	d123      	bne.n	80048ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004880:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800488a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f043 0204 	orr.w	r2, r3, #4
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e046      	b.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d021      	beq.n	8004906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c2:	f7fe ff03 	bl	80036cc <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d116      	bne.n	8004906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f043 0220 	orr.w	r2, r3, #32
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e020      	b.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	0c1b      	lsrs	r3, r3, #16
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	d10c      	bne.n	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	43da      	mvns	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	bf14      	ite	ne
 8004922:	2301      	movne	r3, #1
 8004924:	2300      	moveq	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	e00b      	b.n	8004942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	43da      	mvns	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4013      	ands	r3, r2
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	bf14      	ite	ne
 800493c:	2301      	movne	r3, #1
 800493e:	2300      	moveq	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d18d      	bne.n	8004862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800495c:	e02d      	b.n	80049ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f8ce 	bl	8004b00 <I2C_IsAcknowledgeFailed>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e02d      	b.n	80049ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d021      	beq.n	80049ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004976:	f7fe fea9 	bl	80036cc <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d116      	bne.n	80049ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f043 0220 	orr.w	r2, r3, #32
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e007      	b.n	80049ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b80      	cmp	r3, #128	; 0x80
 80049c6:	d1ca      	bne.n	800495e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049de:	e02d      	b.n	8004a3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f88d 	bl	8004b00 <I2C_IsAcknowledgeFailed>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e02d      	b.n	8004a4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d021      	beq.n	8004a3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f8:	f7fe fe68 	bl	80036cc <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d302      	bcc.n	8004a0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d116      	bne.n	8004a3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	f043 0220 	orr.w	r2, r3, #32
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e007      	b.n	8004a4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d1ca      	bne.n	80049e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a60:	e042      	b.n	8004ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d119      	bne.n	8004aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0210 	mvn.w	r2, #16
 8004a78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e029      	b.n	8004af8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa4:	f7fe fe12 	bl	80036cc <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d302      	bcc.n	8004aba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d116      	bne.n	8004ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e007      	b.n	8004af8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d1b5      	bne.n	8004a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b16:	d11b      	bne.n	8004b50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	f043 0204 	orr.w	r2, r3, #4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e267      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d075      	beq.n	8004c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b7e:	4b88      	ldr	r3, [pc, #544]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d00c      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b8a:	4b85      	ldr	r3, [pc, #532]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d112      	bne.n	8004bbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b96:	4b82      	ldr	r3, [pc, #520]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba2:	d10b      	bne.n	8004bbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	4b7e      	ldr	r3, [pc, #504]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05b      	beq.n	8004c68 <HAL_RCC_OscConfig+0x108>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d157      	bne.n	8004c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e242      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc4:	d106      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x74>
 8004bc6:	4b76      	ldr	r3, [pc, #472]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a75      	ldr	r2, [pc, #468]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	e01d      	b.n	8004c10 <HAL_RCC_OscConfig+0xb0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x98>
 8004bde:	4b70      	ldr	r3, [pc, #448]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a6f      	ldr	r2, [pc, #444]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	4b6d      	ldr	r3, [pc, #436]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6c      	ldr	r2, [pc, #432]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCC_OscConfig+0xb0>
 8004bf8:	4b69      	ldr	r3, [pc, #420]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a68      	ldr	r2, [pc, #416]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	4b66      	ldr	r3, [pc, #408]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a65      	ldr	r2, [pc, #404]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d013      	beq.n	8004c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fe fd58 	bl	80036cc <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fe fd54 	bl	80036cc <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e207      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	4b5b      	ldr	r3, [pc, #364]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0xc0>
 8004c3e:	e014      	b.n	8004c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fe fd44 	bl	80036cc <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fe fd40 	bl	80036cc <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e1f3      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c5a:	4b51      	ldr	r3, [pc, #324]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0xe8>
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d063      	beq.n	8004d3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c76:	4b4a      	ldr	r3, [pc, #296]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c82:	4b47      	ldr	r3, [pc, #284]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d11c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c8e:	4b44      	ldr	r3, [pc, #272]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d116      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9a:	4b41      	ldr	r3, [pc, #260]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x152>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e1c7      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb2:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4937      	ldr	r1, [pc, #220]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc6:	e03a      	b.n	8004d3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d020      	beq.n	8004d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd0:	4b34      	ldr	r3, [pc, #208]	; (8004da4 <HAL_RCC_OscConfig+0x244>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd6:	f7fe fcf9 	bl	80036cc <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cde:	f7fe fcf5 	bl	80036cc <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e1a8      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf0:	4b2b      	ldr	r3, [pc, #172]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfc:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4925      	ldr	r1, [pc, #148]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	600b      	str	r3, [r1, #0]
 8004d10:	e015      	b.n	8004d3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d12:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <HAL_RCC_OscConfig+0x244>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fe fcd8 	bl	80036cc <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d20:	f7fe fcd4 	bl	80036cc <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e187      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d32:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d036      	beq.n	8004db8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d016      	beq.n	8004d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d52:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <HAL_RCC_OscConfig+0x248>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d58:	f7fe fcb8 	bl	80036cc <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d60:	f7fe fcb4 	bl	80036cc <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e167      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0x200>
 8004d7e:	e01b      	b.n	8004db8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d80:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <HAL_RCC_OscConfig+0x248>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d86:	f7fe fca1 	bl	80036cc <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d8c:	e00e      	b.n	8004dac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d8e:	f7fe fc9d 	bl	80036cc <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d907      	bls.n	8004dac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e150      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
 8004da0:	40023800 	.word	0x40023800
 8004da4:	42470000 	.word	0x42470000
 8004da8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dac:	4b88      	ldr	r3, [pc, #544]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1ea      	bne.n	8004d8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8097 	beq.w	8004ef4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dca:	4b81      	ldr	r3, [pc, #516]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10f      	bne.n	8004df6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	4b7d      	ldr	r3, [pc, #500]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	4a7c      	ldr	r2, [pc, #496]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de4:	6413      	str	r3, [r2, #64]	; 0x40
 8004de6:	4b7a      	ldr	r3, [pc, #488]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df2:	2301      	movs	r3, #1
 8004df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df6:	4b77      	ldr	r3, [pc, #476]	; (8004fd4 <HAL_RCC_OscConfig+0x474>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d118      	bne.n	8004e34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e02:	4b74      	ldr	r3, [pc, #464]	; (8004fd4 <HAL_RCC_OscConfig+0x474>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a73      	ldr	r2, [pc, #460]	; (8004fd4 <HAL_RCC_OscConfig+0x474>)
 8004e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e0e:	f7fe fc5d 	bl	80036cc <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e16:	f7fe fc59 	bl	80036cc <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e10c      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e28:	4b6a      	ldr	r3, [pc, #424]	; (8004fd4 <HAL_RCC_OscConfig+0x474>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f0      	beq.n	8004e16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d106      	bne.n	8004e4a <HAL_RCC_OscConfig+0x2ea>
 8004e3c:	4b64      	ldr	r3, [pc, #400]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	4a63      	ldr	r2, [pc, #396]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e42:	f043 0301 	orr.w	r3, r3, #1
 8004e46:	6713      	str	r3, [r2, #112]	; 0x70
 8004e48:	e01c      	b.n	8004e84 <HAL_RCC_OscConfig+0x324>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x30c>
 8004e52:	4b5f      	ldr	r3, [pc, #380]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e56:	4a5e      	ldr	r2, [pc, #376]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e58:	f043 0304 	orr.w	r3, r3, #4
 8004e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5e:	4b5c      	ldr	r3, [pc, #368]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	4a5b      	ldr	r2, [pc, #364]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6a:	e00b      	b.n	8004e84 <HAL_RCC_OscConfig+0x324>
 8004e6c:	4b58      	ldr	r3, [pc, #352]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	4a57      	ldr	r2, [pc, #348]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	6713      	str	r3, [r2, #112]	; 0x70
 8004e78:	4b55      	ldr	r3, [pc, #340]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7c:	4a54      	ldr	r2, [pc, #336]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e7e:	f023 0304 	bic.w	r3, r3, #4
 8004e82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d015      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8c:	f7fe fc1e 	bl	80036cc <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e94:	f7fe fc1a 	bl	80036cc <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e0cb      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eaa:	4b49      	ldr	r3, [pc, #292]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0ee      	beq.n	8004e94 <HAL_RCC_OscConfig+0x334>
 8004eb6:	e014      	b.n	8004ee2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb8:	f7fe fc08 	bl	80036cc <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ebe:	e00a      	b.n	8004ed6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec0:	f7fe fc04 	bl	80036cc <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e0b5      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed6:	4b3e      	ldr	r3, [pc, #248]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ee      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee8:	4b39      	ldr	r3, [pc, #228]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	4a38      	ldr	r2, [pc, #224]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80a1 	beq.w	8005040 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004efe:	4b34      	ldr	r3, [pc, #208]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d05c      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d141      	bne.n	8004f96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f12:	4b31      	ldr	r3, [pc, #196]	; (8004fd8 <HAL_RCC_OscConfig+0x478>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fe fbd8 	bl	80036cc <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fe fbd4 	bl	80036cc <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e087      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f32:	4b27      	ldr	r3, [pc, #156]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69da      	ldr	r2, [r3, #28]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	019b      	lsls	r3, r3, #6
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	3b01      	subs	r3, #1
 8004f58:	041b      	lsls	r3, r3, #16
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	061b      	lsls	r3, r3, #24
 8004f62:	491b      	ldr	r1, [pc, #108]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f68:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <HAL_RCC_OscConfig+0x478>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6e:	f7fe fbad 	bl	80036cc <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f76:	f7fe fba9 	bl	80036cc <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e05c      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f88:	4b11      	ldr	r3, [pc, #68]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x416>
 8004f94:	e054      	b.n	8005040 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f96:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <HAL_RCC_OscConfig+0x478>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9c:	f7fe fb96 	bl	80036cc <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa4:	f7fe fb92 	bl	80036cc <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e045      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x444>
 8004fc2:	e03d      	b.n	8005040 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d107      	bne.n	8004fdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e038      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40007000 	.word	0x40007000
 8004fd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fdc:	4b1b      	ldr	r3, [pc, #108]	; (800504c <HAL_RCC_OscConfig+0x4ec>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d028      	beq.n	800503c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d121      	bne.n	800503c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005002:	429a      	cmp	r2, r3
 8005004:	d11a      	bne.n	800503c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800500c:	4013      	ands	r3, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005012:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005014:	4293      	cmp	r3, r2
 8005016:	d111      	bne.n	800503c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	085b      	lsrs	r3, r3, #1
 8005024:	3b01      	subs	r3, #1
 8005026:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d107      	bne.n	800503c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d001      	beq.n	8005040 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800

08005050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0cc      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005064:	4b68      	ldr	r3, [pc, #416]	; (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d90c      	bls.n	800508c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005072:	4b65      	ldr	r3, [pc, #404]	; (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800507a:	4b63      	ldr	r3, [pc, #396]	; (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0b8      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d020      	beq.n	80050da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a4:	4b59      	ldr	r3, [pc, #356]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4a58      	ldr	r2, [pc, #352]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050bc:	4b53      	ldr	r3, [pc, #332]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	4a52      	ldr	r2, [pc, #328]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c8:	4b50      	ldr	r3, [pc, #320]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	494d      	ldr	r1, [pc, #308]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d044      	beq.n	8005170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d107      	bne.n	80050fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ee:	4b47      	ldr	r3, [pc, #284]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d119      	bne.n	800512e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e07f      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d003      	beq.n	800510e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800510a:	2b03      	cmp	r3, #3
 800510c:	d107      	bne.n	800511e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800510e:	4b3f      	ldr	r3, [pc, #252]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e06f      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511e:	4b3b      	ldr	r3, [pc, #236]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e067      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800512e:	4b37      	ldr	r3, [pc, #220]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f023 0203 	bic.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4934      	ldr	r1, [pc, #208]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	4313      	orrs	r3, r2
 800513e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005140:	f7fe fac4 	bl	80036cc <HAL_GetTick>
 8005144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005146:	e00a      	b.n	800515e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005148:	f7fe fac0 	bl	80036cc <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	; 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e04f      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515e:	4b2b      	ldr	r3, [pc, #172]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 020c 	and.w	r2, r3, #12
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	429a      	cmp	r2, r3
 800516e:	d1eb      	bne.n	8005148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005170:	4b25      	ldr	r3, [pc, #148]	; (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d20c      	bcs.n	8005198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	4b22      	ldr	r3, [pc, #136]	; (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	4b20      	ldr	r3, [pc, #128]	; (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e032      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a4:	4b19      	ldr	r3, [pc, #100]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4916      	ldr	r1, [pc, #88]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	490e      	ldr	r1, [pc, #56]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051d6:	f000 f821 	bl	800521c <HAL_RCC_GetSysClockFreq>
 80051da:	4602      	mov	r2, r0
 80051dc:	4b0b      	ldr	r3, [pc, #44]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	490a      	ldr	r1, [pc, #40]	; (8005210 <HAL_RCC_ClockConfig+0x1c0>)
 80051e8:	5ccb      	ldrb	r3, [r1, r3]
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	4a09      	ldr	r2, [pc, #36]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80051f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <HAL_RCC_ClockConfig+0x1c8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe fa24 	bl	8003644 <HAL_InitTick>

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40023c00 	.word	0x40023c00
 800520c:	40023800 	.word	0x40023800
 8005210:	08008030 	.word	0x08008030
 8005214:	2000003c 	.word	0x2000003c
 8005218:	20000040 	.word	0x20000040

0800521c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800521c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005220:	b094      	sub	sp, #80	; 0x50
 8005222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	647b      	str	r3, [r7, #68]	; 0x44
 8005228:	2300      	movs	r3, #0
 800522a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800522c:	2300      	movs	r3, #0
 800522e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005234:	4b79      	ldr	r3, [pc, #484]	; (800541c <HAL_RCC_GetSysClockFreq+0x200>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 030c 	and.w	r3, r3, #12
 800523c:	2b08      	cmp	r3, #8
 800523e:	d00d      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x40>
 8005240:	2b08      	cmp	r3, #8
 8005242:	f200 80e1 	bhi.w	8005408 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x34>
 800524a:	2b04      	cmp	r3, #4
 800524c:	d003      	beq.n	8005256 <HAL_RCC_GetSysClockFreq+0x3a>
 800524e:	e0db      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005250:	4b73      	ldr	r3, [pc, #460]	; (8005420 <HAL_RCC_GetSysClockFreq+0x204>)
 8005252:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005254:	e0db      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005256:	4b73      	ldr	r3, [pc, #460]	; (8005424 <HAL_RCC_GetSysClockFreq+0x208>)
 8005258:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800525a:	e0d8      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800525c:	4b6f      	ldr	r3, [pc, #444]	; (800541c <HAL_RCC_GetSysClockFreq+0x200>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005264:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005266:	4b6d      	ldr	r3, [pc, #436]	; (800541c <HAL_RCC_GetSysClockFreq+0x200>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d063      	beq.n	800533a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005272:	4b6a      	ldr	r3, [pc, #424]	; (800541c <HAL_RCC_GetSysClockFreq+0x200>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	099b      	lsrs	r3, r3, #6
 8005278:	2200      	movs	r2, #0
 800527a:	63bb      	str	r3, [r7, #56]	; 0x38
 800527c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005284:	633b      	str	r3, [r7, #48]	; 0x30
 8005286:	2300      	movs	r3, #0
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
 800528a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800528e:	4622      	mov	r2, r4
 8005290:	462b      	mov	r3, r5
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f04f 0100 	mov.w	r1, #0
 800529a:	0159      	lsls	r1, r3, #5
 800529c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052a0:	0150      	lsls	r0, r2, #5
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4621      	mov	r1, r4
 80052a8:	1a51      	subs	r1, r2, r1
 80052aa:	6139      	str	r1, [r7, #16]
 80052ac:	4629      	mov	r1, r5
 80052ae:	eb63 0301 	sbc.w	r3, r3, r1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052c0:	4659      	mov	r1, fp
 80052c2:	018b      	lsls	r3, r1, #6
 80052c4:	4651      	mov	r1, sl
 80052c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052ca:	4651      	mov	r1, sl
 80052cc:	018a      	lsls	r2, r1, #6
 80052ce:	4651      	mov	r1, sl
 80052d0:	ebb2 0801 	subs.w	r8, r2, r1
 80052d4:	4659      	mov	r1, fp
 80052d6:	eb63 0901 	sbc.w	r9, r3, r1
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052ee:	4690      	mov	r8, r2
 80052f0:	4699      	mov	r9, r3
 80052f2:	4623      	mov	r3, r4
 80052f4:	eb18 0303 	adds.w	r3, r8, r3
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	462b      	mov	r3, r5
 80052fc:	eb49 0303 	adc.w	r3, r9, r3
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800530e:	4629      	mov	r1, r5
 8005310:	024b      	lsls	r3, r1, #9
 8005312:	4621      	mov	r1, r4
 8005314:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005318:	4621      	mov	r1, r4
 800531a:	024a      	lsls	r2, r1, #9
 800531c:	4610      	mov	r0, r2
 800531e:	4619      	mov	r1, r3
 8005320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005322:	2200      	movs	r2, #0
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
 8005326:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005328:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800532c:	f7fb fc22 	bl	8000b74 <__aeabi_uldivmod>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4613      	mov	r3, r2
 8005336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005338:	e058      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800533a:	4b38      	ldr	r3, [pc, #224]	; (800541c <HAL_RCC_GetSysClockFreq+0x200>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	099b      	lsrs	r3, r3, #6
 8005340:	2200      	movs	r2, #0
 8005342:	4618      	mov	r0, r3
 8005344:	4611      	mov	r1, r2
 8005346:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800534a:	623b      	str	r3, [r7, #32]
 800534c:	2300      	movs	r3, #0
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
 8005350:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005354:	4642      	mov	r2, r8
 8005356:	464b      	mov	r3, r9
 8005358:	f04f 0000 	mov.w	r0, #0
 800535c:	f04f 0100 	mov.w	r1, #0
 8005360:	0159      	lsls	r1, r3, #5
 8005362:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005366:	0150      	lsls	r0, r2, #5
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4641      	mov	r1, r8
 800536e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005372:	4649      	mov	r1, r9
 8005374:	eb63 0b01 	sbc.w	fp, r3, r1
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005384:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005388:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800538c:	ebb2 040a 	subs.w	r4, r2, sl
 8005390:	eb63 050b 	sbc.w	r5, r3, fp
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	00eb      	lsls	r3, r5, #3
 800539e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053a2:	00e2      	lsls	r2, r4, #3
 80053a4:	4614      	mov	r4, r2
 80053a6:	461d      	mov	r5, r3
 80053a8:	4643      	mov	r3, r8
 80053aa:	18e3      	adds	r3, r4, r3
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	464b      	mov	r3, r9
 80053b0:	eb45 0303 	adc.w	r3, r5, r3
 80053b4:	607b      	str	r3, [r7, #4]
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053c2:	4629      	mov	r1, r5
 80053c4:	028b      	lsls	r3, r1, #10
 80053c6:	4621      	mov	r1, r4
 80053c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053cc:	4621      	mov	r1, r4
 80053ce:	028a      	lsls	r2, r1, #10
 80053d0:	4610      	mov	r0, r2
 80053d2:	4619      	mov	r1, r3
 80053d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d6:	2200      	movs	r2, #0
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	61fa      	str	r2, [r7, #28]
 80053dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e0:	f7fb fbc8 	bl	8000b74 <__aeabi_uldivmod>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4613      	mov	r3, r2
 80053ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <HAL_RCC_GetSysClockFreq+0x200>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	0c1b      	lsrs	r3, r3, #16
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	3301      	adds	r3, #1
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80053fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005406:	e002      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HAL_RCC_GetSysClockFreq+0x204>)
 800540a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800540c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800540e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005410:	4618      	mov	r0, r3
 8005412:	3750      	adds	r7, #80	; 0x50
 8005414:	46bd      	mov	sp, r7
 8005416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800541a:	bf00      	nop
 800541c:	40023800 	.word	0x40023800
 8005420:	00f42400 	.word	0x00f42400
 8005424:	007a1200 	.word	0x007a1200

08005428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800542c:	4b03      	ldr	r3, [pc, #12]	; (800543c <HAL_RCC_GetHCLKFreq+0x14>)
 800542e:	681b      	ldr	r3, [r3, #0]
}
 8005430:	4618      	mov	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	2000003c 	.word	0x2000003c

08005440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005444:	f7ff fff0 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8005448:	4602      	mov	r2, r0
 800544a:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	0a9b      	lsrs	r3, r3, #10
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	4903      	ldr	r1, [pc, #12]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005456:	5ccb      	ldrb	r3, [r1, r3]
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40023800 	.word	0x40023800
 8005464:	08008040 	.word	0x08008040

08005468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800546c:	f7ff ffdc 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	0b5b      	lsrs	r3, r3, #13
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4903      	ldr	r1, [pc, #12]	; (800548c <HAL_RCC_GetPCLK2Freq+0x24>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40023800 	.word	0x40023800
 800548c:	08008040 	.word	0x08008040

08005490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e03f      	b.n	8005522 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fd fac2 	bl	8002a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2224      	movs	r2, #36	; 0x24
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f829 	bl	800552c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695a      	ldr	r2, [r3, #20]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800552c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005530:	b0c0      	sub	sp, #256	; 0x100
 8005532:	af00      	add	r7, sp, #0
 8005534:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005548:	68d9      	ldr	r1, [r3, #12]
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	ea40 0301 	orr.w	r3, r0, r1
 8005554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	431a      	orrs	r2, r3
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	431a      	orrs	r2, r3
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005584:	f021 010c 	bic.w	r1, r1, #12
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005592:	430b      	orrs	r3, r1
 8005594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a6:	6999      	ldr	r1, [r3, #24]
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	ea40 0301 	orr.w	r3, r0, r1
 80055b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b8f      	ldr	r3, [pc, #572]	; (80057f8 <UART_SetConfig+0x2cc>)
 80055bc:	429a      	cmp	r2, r3
 80055be:	d005      	beq.n	80055cc <UART_SetConfig+0xa0>
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4b8d      	ldr	r3, [pc, #564]	; (80057fc <UART_SetConfig+0x2d0>)
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d104      	bne.n	80055d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055cc:	f7ff ff4c 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 80055d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80055d4:	e003      	b.n	80055de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055d6:	f7ff ff33 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 80055da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e8:	f040 810c 	bne.w	8005804 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055fe:	4622      	mov	r2, r4
 8005600:	462b      	mov	r3, r5
 8005602:	1891      	adds	r1, r2, r2
 8005604:	65b9      	str	r1, [r7, #88]	; 0x58
 8005606:	415b      	adcs	r3, r3
 8005608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800560a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800560e:	4621      	mov	r1, r4
 8005610:	eb12 0801 	adds.w	r8, r2, r1
 8005614:	4629      	mov	r1, r5
 8005616:	eb43 0901 	adc.w	r9, r3, r1
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800562a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800562e:	4690      	mov	r8, r2
 8005630:	4699      	mov	r9, r3
 8005632:	4623      	mov	r3, r4
 8005634:	eb18 0303 	adds.w	r3, r8, r3
 8005638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800563c:	462b      	mov	r3, r5
 800563e:	eb49 0303 	adc.w	r3, r9, r3
 8005642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005652:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005656:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800565a:	460b      	mov	r3, r1
 800565c:	18db      	adds	r3, r3, r3
 800565e:	653b      	str	r3, [r7, #80]	; 0x50
 8005660:	4613      	mov	r3, r2
 8005662:	eb42 0303 	adc.w	r3, r2, r3
 8005666:	657b      	str	r3, [r7, #84]	; 0x54
 8005668:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800566c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005670:	f7fb fa80 	bl	8000b74 <__aeabi_uldivmod>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4b61      	ldr	r3, [pc, #388]	; (8005800 <UART_SetConfig+0x2d4>)
 800567a:	fba3 2302 	umull	r2, r3, r3, r2
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	011c      	lsls	r4, r3, #4
 8005682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005686:	2200      	movs	r2, #0
 8005688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800568c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005690:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005694:	4642      	mov	r2, r8
 8005696:	464b      	mov	r3, r9
 8005698:	1891      	adds	r1, r2, r2
 800569a:	64b9      	str	r1, [r7, #72]	; 0x48
 800569c:	415b      	adcs	r3, r3
 800569e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056a4:	4641      	mov	r1, r8
 80056a6:	eb12 0a01 	adds.w	sl, r2, r1
 80056aa:	4649      	mov	r1, r9
 80056ac:	eb43 0b01 	adc.w	fp, r3, r1
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056c4:	4692      	mov	sl, r2
 80056c6:	469b      	mov	fp, r3
 80056c8:	4643      	mov	r3, r8
 80056ca:	eb1a 0303 	adds.w	r3, sl, r3
 80056ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056d2:	464b      	mov	r3, r9
 80056d4:	eb4b 0303 	adc.w	r3, fp, r3
 80056d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80056ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056f0:	460b      	mov	r3, r1
 80056f2:	18db      	adds	r3, r3, r3
 80056f4:	643b      	str	r3, [r7, #64]	; 0x40
 80056f6:	4613      	mov	r3, r2
 80056f8:	eb42 0303 	adc.w	r3, r2, r3
 80056fc:	647b      	str	r3, [r7, #68]	; 0x44
 80056fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005702:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005706:	f7fb fa35 	bl	8000b74 <__aeabi_uldivmod>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	4611      	mov	r1, r2
 8005710:	4b3b      	ldr	r3, [pc, #236]	; (8005800 <UART_SetConfig+0x2d4>)
 8005712:	fba3 2301 	umull	r2, r3, r3, r1
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	2264      	movs	r2, #100	; 0x64
 800571a:	fb02 f303 	mul.w	r3, r2, r3
 800571e:	1acb      	subs	r3, r1, r3
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005726:	4b36      	ldr	r3, [pc, #216]	; (8005800 <UART_SetConfig+0x2d4>)
 8005728:	fba3 2302 	umull	r2, r3, r3, r2
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005734:	441c      	add	r4, r3
 8005736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800573a:	2200      	movs	r2, #0
 800573c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005740:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005744:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005748:	4642      	mov	r2, r8
 800574a:	464b      	mov	r3, r9
 800574c:	1891      	adds	r1, r2, r2
 800574e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005750:	415b      	adcs	r3, r3
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005754:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005758:	4641      	mov	r1, r8
 800575a:	1851      	adds	r1, r2, r1
 800575c:	6339      	str	r1, [r7, #48]	; 0x30
 800575e:	4649      	mov	r1, r9
 8005760:	414b      	adcs	r3, r1
 8005762:	637b      	str	r3, [r7, #52]	; 0x34
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005770:	4659      	mov	r1, fp
 8005772:	00cb      	lsls	r3, r1, #3
 8005774:	4651      	mov	r1, sl
 8005776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800577a:	4651      	mov	r1, sl
 800577c:	00ca      	lsls	r2, r1, #3
 800577e:	4610      	mov	r0, r2
 8005780:	4619      	mov	r1, r3
 8005782:	4603      	mov	r3, r0
 8005784:	4642      	mov	r2, r8
 8005786:	189b      	adds	r3, r3, r2
 8005788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800578c:	464b      	mov	r3, r9
 800578e:	460a      	mov	r2, r1
 8005790:	eb42 0303 	adc.w	r3, r2, r3
 8005794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057ac:	460b      	mov	r3, r1
 80057ae:	18db      	adds	r3, r3, r3
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80057b2:	4613      	mov	r3, r2
 80057b4:	eb42 0303 	adc.w	r3, r2, r3
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057c2:	f7fb f9d7 	bl	8000b74 <__aeabi_uldivmod>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4b0d      	ldr	r3, [pc, #52]	; (8005800 <UART_SetConfig+0x2d4>)
 80057cc:	fba3 1302 	umull	r1, r3, r3, r2
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	2164      	movs	r1, #100	; 0x64
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	3332      	adds	r3, #50	; 0x32
 80057de:	4a08      	ldr	r2, [pc, #32]	; (8005800 <UART_SetConfig+0x2d4>)
 80057e0:	fba2 2303 	umull	r2, r3, r2, r3
 80057e4:	095b      	lsrs	r3, r3, #5
 80057e6:	f003 0207 	and.w	r2, r3, #7
 80057ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4422      	add	r2, r4
 80057f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057f4:	e105      	b.n	8005a02 <UART_SetConfig+0x4d6>
 80057f6:	bf00      	nop
 80057f8:	40011000 	.word	0x40011000
 80057fc:	40011400 	.word	0x40011400
 8005800:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005808:	2200      	movs	r2, #0
 800580a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800580e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005812:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005816:	4642      	mov	r2, r8
 8005818:	464b      	mov	r3, r9
 800581a:	1891      	adds	r1, r2, r2
 800581c:	6239      	str	r1, [r7, #32]
 800581e:	415b      	adcs	r3, r3
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
 8005822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005826:	4641      	mov	r1, r8
 8005828:	1854      	adds	r4, r2, r1
 800582a:	4649      	mov	r1, r9
 800582c:	eb43 0501 	adc.w	r5, r3, r1
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	00eb      	lsls	r3, r5, #3
 800583a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800583e:	00e2      	lsls	r2, r4, #3
 8005840:	4614      	mov	r4, r2
 8005842:	461d      	mov	r5, r3
 8005844:	4643      	mov	r3, r8
 8005846:	18e3      	adds	r3, r4, r3
 8005848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800584c:	464b      	mov	r3, r9
 800584e:	eb45 0303 	adc.w	r3, r5, r3
 8005852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005862:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005866:	f04f 0200 	mov.w	r2, #0
 800586a:	f04f 0300 	mov.w	r3, #0
 800586e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005872:	4629      	mov	r1, r5
 8005874:	008b      	lsls	r3, r1, #2
 8005876:	4621      	mov	r1, r4
 8005878:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800587c:	4621      	mov	r1, r4
 800587e:	008a      	lsls	r2, r1, #2
 8005880:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005884:	f7fb f976 	bl	8000b74 <__aeabi_uldivmod>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	4b60      	ldr	r3, [pc, #384]	; (8005a10 <UART_SetConfig+0x4e4>)
 800588e:	fba3 2302 	umull	r2, r3, r3, r2
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	011c      	lsls	r4, r3, #4
 8005896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800589a:	2200      	movs	r2, #0
 800589c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058a8:	4642      	mov	r2, r8
 80058aa:	464b      	mov	r3, r9
 80058ac:	1891      	adds	r1, r2, r2
 80058ae:	61b9      	str	r1, [r7, #24]
 80058b0:	415b      	adcs	r3, r3
 80058b2:	61fb      	str	r3, [r7, #28]
 80058b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058b8:	4641      	mov	r1, r8
 80058ba:	1851      	adds	r1, r2, r1
 80058bc:	6139      	str	r1, [r7, #16]
 80058be:	4649      	mov	r1, r9
 80058c0:	414b      	adcs	r3, r1
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058d0:	4659      	mov	r1, fp
 80058d2:	00cb      	lsls	r3, r1, #3
 80058d4:	4651      	mov	r1, sl
 80058d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058da:	4651      	mov	r1, sl
 80058dc:	00ca      	lsls	r2, r1, #3
 80058de:	4610      	mov	r0, r2
 80058e0:	4619      	mov	r1, r3
 80058e2:	4603      	mov	r3, r0
 80058e4:	4642      	mov	r2, r8
 80058e6:	189b      	adds	r3, r3, r2
 80058e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058ec:	464b      	mov	r3, r9
 80058ee:	460a      	mov	r2, r1
 80058f0:	eb42 0303 	adc.w	r3, r2, r3
 80058f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	67bb      	str	r3, [r7, #120]	; 0x78
 8005902:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005910:	4649      	mov	r1, r9
 8005912:	008b      	lsls	r3, r1, #2
 8005914:	4641      	mov	r1, r8
 8005916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800591a:	4641      	mov	r1, r8
 800591c:	008a      	lsls	r2, r1, #2
 800591e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005922:	f7fb f927 	bl	8000b74 <__aeabi_uldivmod>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4b39      	ldr	r3, [pc, #228]	; (8005a10 <UART_SetConfig+0x4e4>)
 800592c:	fba3 1302 	umull	r1, r3, r3, r2
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	2164      	movs	r1, #100	; 0x64
 8005934:	fb01 f303 	mul.w	r3, r1, r3
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	3332      	adds	r3, #50	; 0x32
 800593e:	4a34      	ldr	r2, [pc, #208]	; (8005a10 <UART_SetConfig+0x4e4>)
 8005940:	fba2 2303 	umull	r2, r3, r2, r3
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800594a:	441c      	add	r4, r3
 800594c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005950:	2200      	movs	r2, #0
 8005952:	673b      	str	r3, [r7, #112]	; 0x70
 8005954:	677a      	str	r2, [r7, #116]	; 0x74
 8005956:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800595a:	4642      	mov	r2, r8
 800595c:	464b      	mov	r3, r9
 800595e:	1891      	adds	r1, r2, r2
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	415b      	adcs	r3, r3
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800596a:	4641      	mov	r1, r8
 800596c:	1851      	adds	r1, r2, r1
 800596e:	6039      	str	r1, [r7, #0]
 8005970:	4649      	mov	r1, r9
 8005972:	414b      	adcs	r3, r1
 8005974:	607b      	str	r3, [r7, #4]
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005982:	4659      	mov	r1, fp
 8005984:	00cb      	lsls	r3, r1, #3
 8005986:	4651      	mov	r1, sl
 8005988:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800598c:	4651      	mov	r1, sl
 800598e:	00ca      	lsls	r2, r1, #3
 8005990:	4610      	mov	r0, r2
 8005992:	4619      	mov	r1, r3
 8005994:	4603      	mov	r3, r0
 8005996:	4642      	mov	r2, r8
 8005998:	189b      	adds	r3, r3, r2
 800599a:	66bb      	str	r3, [r7, #104]	; 0x68
 800599c:	464b      	mov	r3, r9
 800599e:	460a      	mov	r2, r1
 80059a0:	eb42 0303 	adc.w	r3, r2, r3
 80059a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	663b      	str	r3, [r7, #96]	; 0x60
 80059b0:	667a      	str	r2, [r7, #100]	; 0x64
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059be:	4649      	mov	r1, r9
 80059c0:	008b      	lsls	r3, r1, #2
 80059c2:	4641      	mov	r1, r8
 80059c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059c8:	4641      	mov	r1, r8
 80059ca:	008a      	lsls	r2, r1, #2
 80059cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059d0:	f7fb f8d0 	bl	8000b74 <__aeabi_uldivmod>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <UART_SetConfig+0x4e4>)
 80059da:	fba3 1302 	umull	r1, r3, r3, r2
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	2164      	movs	r1, #100	; 0x64
 80059e2:	fb01 f303 	mul.w	r3, r1, r3
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	3332      	adds	r3, #50	; 0x32
 80059ec:	4a08      	ldr	r2, [pc, #32]	; (8005a10 <UART_SetConfig+0x4e4>)
 80059ee:	fba2 2303 	umull	r2, r3, r2, r3
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	f003 020f 	and.w	r2, r3, #15
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4422      	add	r2, r4
 8005a00:	609a      	str	r2, [r3, #8]
}
 8005a02:	bf00      	nop
 8005a04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a0e:	bf00      	nop
 8005a10:	51eb851f 	.word	0x51eb851f

08005a14 <initMPU6500>:
// necesito una global donde se configure el puerto a usar;
static I2C_HandleTypeDef* privateI2CHandler = NULL;

//necesario para que esta biblioteca tome nocion
//del I2C_HandleTypeDef que se esta usando.
void initMPU6500(I2C_HandleTypeDef* i2ch) {
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
	privateI2CHandler = i2ch;
 8005a1c:	4a04      	ldr	r2, [pc, #16]	; (8005a30 <initMPU6500+0x1c>)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6013      	str	r3, [r2, #0]
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	200002d8 	.word	0x200002d8

08005a34 <twiSendByte>:

//Manda un byte a una direccion I2C
uint8_t twiSendByte(uint8_t addr, uint8_t byte) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	460a      	mov	r2, r1
 8005a3e:	71fb      	strb	r3, [r7, #7]
 8005a40:	4613      	mov	r3, r2
 8005a42:	71bb      	strb	r3, [r7, #6]

	if (privateI2CHandler == NULL) return 1;
 8005a44:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <twiSendByte+0x44>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <twiSendByte+0x1c>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e00f      	b.n	8005a70 <twiSendByte+0x3c>
	addr = addr << 1;
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	71fb      	strb	r3, [r7, #7]
	return (uint8_t)HAL_I2C_Master_Transmit(privateI2CHandler, addr, &byte, sizeof(uint8_t), HAL_MAX_DELAY);
 8005a56:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <twiSendByte+0x44>)
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	b299      	uxth	r1, r3
 8005a5e:	1dba      	adds	r2, r7, #6
 8005a60:	f04f 33ff 	mov.w	r3, #4294967295
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	2301      	movs	r3, #1
 8005a68:	f7fe fa28 	bl	8003ebc <HAL_I2C_Master_Transmit>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	bf00      	nop

}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	200002d8 	.word	0x200002d8

08005a7c <twiSendBytes>:

//Manda una serie de bytes a una direccion I2C
uint8_t twiSendBytes(uint8_t addr, uint8_t* buf, uint16_t len) {
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	4603      	mov	r3, r0
 8005a84:	6039      	str	r1, [r7, #0]
 8005a86:	71fb      	strb	r3, [r7, #7]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	80bb      	strh	r3, [r7, #4]

	if (privateI2CHandler == NULL) return 1;
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <twiSendBytes+0x44>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <twiSendBytes+0x1c>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e00f      	b.n	8005ab8 <twiSendBytes+0x3c>
	addr = addr << 1;
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	71fb      	strb	r3, [r7, #7]
	return (uint8_t)HAL_I2C_Master_Transmit(privateI2CHandler, addr, buf, len, HAL_MAX_DELAY);
 8005a9e:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <twiSendBytes+0x44>)
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	b299      	uxth	r1, r3
 8005aa6:	88bb      	ldrh	r3, [r7, #4]
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aac:	9200      	str	r2, [sp, #0]
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	f7fe fa04 	bl	8003ebc <HAL_I2C_Master_Transmit>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	bf00      	nop

}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	200002d8 	.word	0x200002d8

08005ac4 <twiRecvByte>:

//Recibe un byte de una dirección de I2C
uint8_t twiRecvByte(uint8_t addr) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	4603      	mov	r3, r0
 8005acc:	71fb      	strb	r3, [r7, #7]

	uint8_t buf = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	73fb      	strb	r3, [r7, #15]
	if (privateI2CHandler == NULL) return buf;
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <twiRecvByte+0x44>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <twiRecvByte+0x1a>
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	e00f      	b.n	8005afe <twiRecvByte+0x3a>
	addr = addr << 1;
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Receive(privateI2CHandler, addr, &buf, sizeof(uint8_t), HAL_MAX_DELAY);
 8005ae4:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <twiRecvByte+0x44>)
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	79fb      	ldrb	r3, [r7, #7]
 8005aea:	b299      	uxth	r1, r3
 8005aec:	f107 020f 	add.w	r2, r7, #15
 8005af0:	f04f 33ff 	mov.w	r3, #4294967295
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	2301      	movs	r3, #1
 8005af8:	f7fe fade 	bl	80040b8 <HAL_I2C_Master_Receive>
	return buf;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]

}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	200002d8 	.word	0x200002d8

08005b0c <twiRecvBytes>:

//Recibe varios bytes de una dirección I2C
uint16_t twiRecvBytes(uint8_t addr, uint8_t* buf, uint16_t len) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	4603      	mov	r3, r0
 8005b14:	6039      	str	r1, [r7, #0]
 8005b16:	71fb      	strb	r3, [r7, #7]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	80bb      	strh	r3, [r7, #4]

	if (privateI2CHandler == NULL) return 1;
 8005b1c:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <twiRecvBytes+0x44>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <twiRecvBytes+0x1c>
 8005b24:	2301      	movs	r3, #1
 8005b26:	e00e      	b.n	8005b46 <twiRecvBytes+0x3a>
	addr = addr << 1;
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Receive(privateI2CHandler, addr, buf, len, HAL_MAX_DELAY);
 8005b2e:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <twiRecvBytes+0x44>)
 8005b30:	6818      	ldr	r0, [r3, #0]
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	b299      	uxth	r1, r3
 8005b36:	88bb      	ldrh	r3, [r7, #4]
 8005b38:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3c:	9200      	str	r2, [sp, #0]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	f7fe faba 	bl	80040b8 <HAL_I2C_Master_Receive>
	//supuestamente la interface bloquea hasta no recibir len bytes;
	//no es como la de arduino que puede devolver de menos
	return len;
 8005b44:	88bb      	ldrh	r3, [r7, #4]

}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	200002d8 	.word	0x200002d8

08005b54 <twiWriteReg8>:

//Escribe un registro de 8 bits en un dispo I2C
uint8_t twiWriteReg8(uint8_t addr, uint8_t reg, uint8_t val) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	71fb      	strb	r3, [r7, #7]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	71bb      	strb	r3, [r7, #6]
 8005b62:	4613      	mov	r3, r2
 8005b64:	717b      	strb	r3, [r7, #5]
  uint8_t buf[2];
  buf[0] = reg;
 8005b66:	79bb      	ldrb	r3, [r7, #6]
 8005b68:	733b      	strb	r3, [r7, #12]
  buf[1] = val;
 8005b6a:	797b      	ldrb	r3, [r7, #5]
 8005b6c:	737b      	strb	r3, [r7, #13]
  return twiSendBytes(addr, buf, 2);
 8005b6e:	f107 010c 	add.w	r1, r7, #12
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	2202      	movs	r2, #2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff ff80 	bl	8005a7c <twiSendBytes>
 8005b7c:	4603      	mov	r3, r0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <twiWriteRegs8>:

//Escribe una serie de registros contiguos en un dispo I2C
uint8_t twiWriteRegs8(uint8_t addr, uint8_t reg, uint16_t len, uint8_t* buf) {
 8005b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b8c:	b089      	sub	sp, #36	; 0x24
 8005b8e:	af02      	add	r7, sp, #8
 8005b90:	603b      	str	r3, [r7, #0]
 8005b92:	4603      	mov	r3, r0
 8005b94:	71fb      	strb	r3, [r7, #7]
 8005b96:	460b      	mov	r3, r1
 8005b98:	71bb      	strb	r3, [r7, #6]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80bb      	strh	r3, [r7, #4]
 8005b9e:	466b      	mov	r3, sp
 8005ba0:	461e      	mov	r6, r3

	uint8_t auxBuf[len + 1];
 8005ba2:	88bb      	ldrh	r3, [r7, #4]
 8005ba4:	1c59      	adds	r1, r3, #1
 8005ba6:	1e4b      	subs	r3, r1, #1
 8005ba8:	613b      	str	r3, [r7, #16]
 8005baa:	460a      	mov	r2, r1
 8005bac:	2300      	movs	r3, #0
 8005bae:	4690      	mov	r8, r2
 8005bb0:	4699      	mov	r9, r3
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bc6:	460a      	mov	r2, r1
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4614      	mov	r4, r2
 8005bcc:	461d      	mov	r5, r3
 8005bce:	f04f 0200 	mov.w	r2, #0
 8005bd2:	f04f 0300 	mov.w	r3, #0
 8005bd6:	00eb      	lsls	r3, r5, #3
 8005bd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bdc:	00e2      	lsls	r2, r4, #3
 8005bde:	460b      	mov	r3, r1
 8005be0:	3307      	adds	r3, #7
 8005be2:	08db      	lsrs	r3, r3, #3
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	ebad 0d03 	sub.w	sp, sp, r3
 8005bea:	ab02      	add	r3, sp, #8
 8005bec:	3300      	adds	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]

	for (uint32_t i = 0 ; i < len; i++) auxBuf[i+1] = buf[i];
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	e00a      	b.n	8005c0c <twiWriteRegs8+0x84>
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	441a      	add	r2, r3
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	7811      	ldrb	r1, [r2, #0]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	54d1      	strb	r1, [r2, r3]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	88bb      	ldrh	r3, [r7, #4]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d3f0      	bcc.n	8005bf6 <twiWriteRegs8+0x6e>
	auxBuf[0] = reg;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	79ba      	ldrb	r2, [r7, #6]
 8005c18:	701a      	strb	r2, [r3, #0]

	if (privateI2CHandler == NULL) return 1;
 8005c1a:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <twiWriteRegs8+0xd0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <twiWriteRegs8+0x9e>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e011      	b.n	8005c4a <twiWriteRegs8+0xc2>
	addr = addr << 1;
 8005c26:	79fb      	ldrb	r3, [r7, #7]
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	71fb      	strb	r3, [r7, #7]
	return (uint8_t)HAL_I2C_Master_Transmit(privateI2CHandler, addr, auxBuf, len + 1, HAL_MAX_DELAY);
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <twiWriteRegs8+0xd0>)
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	b299      	uxth	r1, r3
 8005c34:	88bb      	ldrh	r3, [r7, #4]
 8005c36:	3301      	adds	r3, #1
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3e:	9200      	str	r2, [sp, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	f7fe f93b 	bl	8003ebc <HAL_I2C_Master_Transmit>
 8005c46:	4603      	mov	r3, r0
 8005c48:	bf00      	nop
 8005c4a:	46b5      	mov	sp, r6

}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c56:	bf00      	nop
 8005c58:	200002d8 	.word	0x200002d8

08005c5c <twiReadReg8>:

//Lee el valor de un registro de 8 bits en un dispo I2C
uint8_t twiReadReg8(uint8_t addr, uint8_t reg, uint8_t* buf) {
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	603a      	str	r2, [r7, #0]
 8005c66:	71fb      	strb	r3, [r7, #7]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;
	ret = twiSendByte(addr, reg);
 8005c6c:	79ba      	ldrb	r2, [r7, #6]
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	4611      	mov	r1, r2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fede 	bl	8005a34 <twiSendByte>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73fb      	strb	r3, [r7, #15]
	if (ret) return ret;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <twiReadReg8+0x2a>
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	e008      	b.n	8005c98 <twiReadReg8+0x3c>
	*buf = twiRecvByte(addr);
 8005c86:	79fb      	ldrb	r3, [r7, #7]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff ff1b 	bl	8005ac4 <twiRecvByte>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	461a      	mov	r2, r3
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	701a      	strb	r2, [r3, #0]
	return 0;
 8005c96:	2300      	movs	r3, #0

}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <twiReadRegs8>:

//Lee el valor de varios registros contiguos de un dispo I2C
uint8_t twiReadRegs8(uint8_t addr, uint8_t reg, uint16_t len, uint8_t* buf) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	4603      	mov	r3, r0
 8005caa:	71fb      	strb	r3, [r7, #7]
 8005cac:	460b      	mov	r3, r1
 8005cae:	71bb      	strb	r3, [r7, #6]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	80bb      	strh	r3, [r7, #4]

  uint8_t ret;
  ret = twiSendByte(addr, reg);
 8005cb4:	79ba      	ldrb	r2, [r7, #6]
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	4611      	mov	r1, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff feba 	bl	8005a34 <twiSendByte>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	73fb      	strb	r3, [r7, #15]
  if (ret) return ret;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <twiReadRegs8+0x2e>
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	e00d      	b.n	8005cea <twiReadRegs8+0x4a>
  if (len == twiRecvBytes(addr, buf, len)) return 0;
 8005cce:	88ba      	ldrh	r2, [r7, #4]
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	6839      	ldr	r1, [r7, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff ff19 	bl	8005b0c <twiRecvBytes>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	461a      	mov	r2, r3
 8005cde:	88bb      	ldrh	r3, [r7, #4]
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d101      	bne.n	8005ce8 <twiReadRegs8+0x48>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e000      	b.n	8005cea <twiReadRegs8+0x4a>
  return (uint8_t)(-1);
 8005ce8:	23ff      	movs	r3, #255	; 0xff

}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <imuCheckPresence>:

//Verifica la presencia de un sensor MPU6500
//Leyendo el registro Who am I y verificando que sea igual a 0x70.
uint8_t imuCheckPresence() {
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
  uint8_t ret = 0, val = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	71fb      	strb	r3, [r7, #7]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	71bb      	strb	r3, [r7, #6]
  ret = twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_WHO_AM_I, &val);
 8005d00:	1dbb      	adds	r3, r7, #6
 8005d02:	461a      	mov	r2, r3
 8005d04:	2175      	movs	r1, #117	; 0x75
 8005d06:	2068      	movs	r0, #104	; 0x68
 8005d08:	f7ff ffa8 	bl	8005c5c <twiReadReg8>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	71fb      	strb	r3, [r7, #7]
  if (ret != 0 || val != MPU6500_WHO_AM_I_BYTE) return 0;
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d102      	bne.n	8005d1c <imuCheckPresence+0x2a>
 8005d16:	79bb      	ldrb	r3, [r7, #6]
 8005d18:	2b70      	cmp	r3, #112	; 0x70
 8005d1a:	d001      	beq.n	8005d20 <imuCheckPresence+0x2e>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e000      	b.n	8005d22 <imuCheckPresence+0x30>
  return 1;
 8005d20:	2301      	movs	r3, #1
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <imuEvalSelfTest>:

//Comprueba los resultados de los self-test
uint8_t imuEvalSelfTest(float low, float high, float value, const char* string) {
 8005d2a:	b480      	push	{r7}
 8005d2c:	b087      	sub	sp, #28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	ed87 0a03 	vstr	s0, [r7, #12]
 8005d34:	edc7 0a02 	vstr	s1, [r7, #8]
 8005d38:	ed87 1a01 	vstr	s2, [r7, #4]
 8005d3c:	6038      	str	r0, [r7, #0]
  
  uint8_t pass = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	75fb      	strb	r3, [r7, #23]
  
  // gyros only have lower limit
  // this is a hack to use same evaluation function
  if (low > high) {
 8005d42:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d46:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d52:	dd0b      	ble.n	8005d6c <imuEvalSelfTest+0x42>
    if (value >= low) pass = 1;
 8005d54:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d58:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d64:	db16      	blt.n	8005d94 <imuEvalSelfTest+0x6a>
 8005d66:	2301      	movs	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]
 8005d6a:	e013      	b.n	8005d94 <imuEvalSelfTest+0x6a>
  } else {
    if (value >= low || value <= high) pass = 1;
 8005d6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d70:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7c:	da08      	bge.n	8005d90 <imuEvalSelfTest+0x66>
 8005d7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d82:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8e:	d801      	bhi.n	8005d94 <imuEvalSelfTest+0x6a>
 8005d90:	2301      	movs	r3, #1
 8005d92:	75fb      	strb	r3, [r7, #23]
//  #ifdef DEBUG_PRINTF
//    Serial.printf("Self test %s %s. low: %0.2f, high: %0.2f, measured: %0.2f\n",
//    string, pass ? "[PASS]" : "[FAIL]" , low, high, value);
//  #endif

  return pass;
 8005d94:	7dfb      	ldrb	r3, [r7, #23]

}
 8005d96:	4618      	mov	r0, r3
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <imuSelfTest>:
// 2: no paso el giro Y
// 4: no paso el giro Z
// 8: no paso el accel X
// 16: no paso el accel Y
// 32: no paso el accel Z
uint8_t imuSelfTest() {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b09c      	sub	sp, #112	; 0x70
 8005da8:	af00      	add	r7, sp, #0
  uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 8005daa:	4aad      	ldr	r2, [pc, #692]	; (8006060 <imuSelfTest+0x2bc>)
 8005dac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005db0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005db4:	6018      	str	r0, [r3, #0]
 8005db6:	3304      	adds	r3, #4
 8005db8:	8019      	strh	r1, [r3, #0]
  uint8_t saveReg[5];
  uint8_t selfTest[6];
  int32_t gAvg[3]={0}, aAvg[3]={0}, aSTAvg[3]={0}, gSTAvg[3]={0};
 8005dba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	605a      	str	r2, [r3, #4]
 8005dc4:	609a      	str	r2, [r3, #8]
 8005dc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	605a      	str	r2, [r3, #4]
 8005dd0:	609a      	str	r2, [r3, #8]
 8005dd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	609a      	str	r2, [r3, #8]
 8005dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	605a      	str	r2, [r3, #4]
 8005de8:	609a      	str	r2, [r3, #8]
  uint16_t factoryTrim[6];
  float aDiff[3], gDiff[3];
  int i;

  uint8_t testStatus = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

  // Save old configuration
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_SMPLRT_DIV, &saveReg[0]);
 8005df0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005df4:	461a      	mov	r2, r3
 8005df6:	2119      	movs	r1, #25
 8005df8:	2068      	movs	r0, #104	; 0x68
 8005dfa:	f7ff ff2f 	bl	8005c5c <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_CONFIG, &saveReg[1]);
 8005dfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e02:	3301      	adds	r3, #1
 8005e04:	461a      	mov	r2, r3
 8005e06:	211a      	movs	r1, #26
 8005e08:	2068      	movs	r0, #104	; 0x68
 8005e0a:	f7ff ff27 	bl	8005c5c <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, &saveReg[2]);
 8005e0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e12:	3302      	adds	r3, #2
 8005e14:	461a      	mov	r2, r3
 8005e16:	211b      	movs	r1, #27
 8005e18:	2068      	movs	r0, #104	; 0x68
 8005e1a:	f7ff ff1f 	bl	8005c5c <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG_2, &saveReg[3]);
 8005e1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e22:	3303      	adds	r3, #3
 8005e24:	461a      	mov	r2, r3
 8005e26:	211d      	movs	r1, #29
 8005e28:	2068      	movs	r0, #104	; 0x68
 8005e2a:	f7ff ff17 	bl	8005c5c <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, &saveReg[4]);
 8005e2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e32:	3304      	adds	r3, #4
 8005e34:	461a      	mov	r2, r3
 8005e36:	211c      	movs	r1, #28
 8005e38:	2068      	movs	r0, #104	; 0x68
 8005e3a:	f7ff ff0f 	bl	8005c5c <twiReadReg8>
  // Write test configuration
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2119      	movs	r1, #25
 8005e42:	2068      	movs	r0, #104	; 0x68
 8005e44:	f7ff fe86 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8005e48:	2202      	movs	r2, #2
 8005e4a:	211a      	movs	r1, #26
 8005e4c:	2068      	movs	r0, #104	; 0x68
 8005e4e:	f7ff fe81 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, MPU6500_GYRO_FS_250); // Set full scale range for the gyro to 250 dps
 8005e52:	2200      	movs	r2, #0
 8005e54:	211b      	movs	r1, #27
 8005e56:	2068      	movs	r0, #104	; 0x68
 8005e58:	f7ff fe7c 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG_2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	211d      	movs	r1, #29
 8005e60:	2068      	movs	r0, #104	; 0x68
 8005e62:	f7ff fe77 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, MPU6500_ACCEL_FS_2); // Set full scale range for the accelerometer to 2 g
 8005e66:	2200      	movs	r2, #0
 8005e68:	211c      	movs	r1, #28
 8005e6a:	2068      	movs	r0, #104	; 0x68
 8005e6c:	f7ff fe72 	bl	8005b54 <twiWriteReg8>

  for(i = 0; i < 200; i++)
 8005e70:	2300      	movs	r3, #0
 8005e72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e74:	e055      	b.n	8005f22 <imuSelfTest+0x17e>
  {
    // get average current values of gyro and acclerometer
    twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8005e76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005e7a:	2206      	movs	r2, #6
 8005e7c:	213b      	movs	r1, #59	; 0x3b
 8005e7e:	2068      	movs	r0, #104	; 0x68
 8005e80:	f7ff ff0e 	bl	8005ca0 <twiReadRegs8>
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8005e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e86:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8005e8a:	0212      	lsls	r2, r2, #8
 8005e8c:	b211      	sxth	r1, r2
 8005e8e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8005e92:	b212      	sxth	r2, r2
 8005e94:	430a      	orrs	r2, r1
 8005e96:	b212      	sxth	r2, r2
 8005e98:	4413      	add	r3, r2
 8005e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8005e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8005ea2:	0212      	lsls	r2, r2, #8
 8005ea4:	b211      	sxth	r1, r2
 8005ea6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8005eaa:	b212      	sxth	r2, r2
 8005eac:	430a      	orrs	r2, r1
 8005eae:	b212      	sxth	r2, r2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	643b      	str	r3, [r7, #64]	; 0x40
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8005eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb6:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8005eba:	0212      	lsls	r2, r2, #8
 8005ebc:	b211      	sxth	r1, r2
 8005ebe:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8005ec2:	b212      	sxth	r2, r2
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	b212      	sxth	r2, r2
 8005ec8:	4413      	add	r3, r2
 8005eca:	647b      	str	r3, [r7, #68]	; 0x44

    twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8005ecc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005ed0:	2206      	movs	r2, #6
 8005ed2:	2143      	movs	r1, #67	; 0x43
 8005ed4:	2068      	movs	r0, #104	; 0x68
 8005ed6:	f7ff fee3 	bl	8005ca0 <twiReadRegs8>
    gAvg[0] += (int16_t)((int16_t)rawData[0] << 8) | rawData[1]; // Turn the MSB and LSB into a signed 16-bit value
 8005eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005edc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8005ee0:	021b      	lsls	r3, r3, #8
 8005ee2:	b21b      	sxth	r3, r3
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005eea:	430b      	orrs	r3, r1
 8005eec:	4413      	add	r3, r2
 8005eee:	64bb      	str	r3, [r7, #72]	; 0x48
    gAvg[1] += (int16_t)((int16_t)rawData[2] << 8) | rawData[3];
 8005ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ef2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	b21b      	sxth	r3, r3
 8005efa:	4619      	mov	r1, r3
 8005efc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f00:	430b      	orrs	r3, r1
 8005f02:	4413      	add	r3, r2
 8005f04:	64fb      	str	r3, [r7, #76]	; 0x4c
    gAvg[2] += (int16_t)((int16_t)rawData[4] << 8) | rawData[5];
 8005f06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f08:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	b21b      	sxth	r3, r3
 8005f10:	4619      	mov	r1, r3
 8005f12:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8005f16:	430b      	orrs	r3, r1
 8005f18:	4413      	add	r3, r2
 8005f1a:	653b      	str	r3, [r7, #80]	; 0x50
  for(i = 0; i < 200; i++)
 8005f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1e:	3301      	adds	r3, #1
 8005f20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f24:	2bc7      	cmp	r3, #199	; 0xc7
 8005f26:	dda6      	ble.n	8005e76 <imuSelfTest+0xd2>
  }

  for (i = 0; i < 3; i++)
 8005f28:	2300      	movs	r3, #0
 8005f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f2c:	e026      	b.n	8005f7c <imuSelfTest+0x1d8>
  { // Get average of 200 values and store as average current readings
    aAvg[i] /= 200;
 8005f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	3370      	adds	r3, #112	; 0x70
 8005f34:	443b      	add	r3, r7
 8005f36:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8005f3a:	4a4a      	ldr	r2, [pc, #296]	; (8006064 <imuSelfTest+0x2c0>)
 8005f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8005f40:	1192      	asrs	r2, r2, #6
 8005f42:	17db      	asrs	r3, r3, #31
 8005f44:	1ad2      	subs	r2, r2, r3
 8005f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	3370      	adds	r3, #112	; 0x70
 8005f4c:	443b      	add	r3, r7
 8005f4e:	f843 2c34 	str.w	r2, [r3, #-52]
    gAvg[i] /= 200;
 8005f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	3370      	adds	r3, #112	; 0x70
 8005f58:	443b      	add	r3, r7
 8005f5a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8005f5e:	4a41      	ldr	r2, [pc, #260]	; (8006064 <imuSelfTest+0x2c0>)
 8005f60:	fb82 1203 	smull	r1, r2, r2, r3
 8005f64:	1192      	asrs	r2, r2, #6
 8005f66:	17db      	asrs	r3, r3, #31
 8005f68:	1ad2      	subs	r2, r2, r3
 8005f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	3370      	adds	r3, #112	; 0x70
 8005f70:	443b      	add	r3, r7
 8005f72:	f843 2c28 	str.w	r2, [r3, #-40]
  for (i = 0; i < 3; i++)
 8005f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f78:	3301      	adds	r3, #1
 8005f7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	ddd5      	ble.n	8005f2e <imuSelfTest+0x18a>
  }

  // Configure the accelerometer for self-test
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8005f82:	22e0      	movs	r2, #224	; 0xe0
 8005f84:	211c      	movs	r1, #28
 8005f86:	2068      	movs	r0, #104	; 0x68
 8005f88:	f7ff fde4 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8005f8c:	22e0      	movs	r2, #224	; 0xe0
 8005f8e:	211b      	movs	r1, #27
 8005f90:	2068      	movs	r0, #104	; 0x68
 8005f92:	f7ff fddf 	bl	8005b54 <twiWriteReg8>
  HAL_Delay(25); // Delay a while to let the device stabilize
 8005f96:	2019      	movs	r0, #25
 8005f98:	f7fd fba4 	bl	80036e4 <HAL_Delay>

  for(i = 0; i < 200; i++)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fa0:	e058      	b.n	8006054 <imuSelfTest+0x2b0>
  {
    // get average self-test values of gyro and acclerometer
    twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8005fa2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005fa6:	2206      	movs	r2, #6
 8005fa8:	213b      	movs	r1, #59	; 0x3b
 8005faa:	2068      	movs	r0, #104	; 0x68
 8005fac:	f7ff fe78 	bl	8005ca0 <twiReadRegs8>
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8005fb6:	0212      	lsls	r2, r2, #8
 8005fb8:	b211      	sxth	r1, r2
 8005fba:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8005fbe:	b212      	sxth	r2, r2
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	b212      	sxth	r2, r2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	633b      	str	r3, [r7, #48]	; 0x30
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fca:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8005fce:	0212      	lsls	r2, r2, #8
 8005fd0:	b211      	sxth	r1, r2
 8005fd2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8005fd6:	b212      	sxth	r2, r2
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	b212      	sxth	r2, r2
 8005fdc:	4413      	add	r3, r2
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8005fe6:	0212      	lsls	r2, r2, #8
 8005fe8:	b211      	sxth	r1, r2
 8005fea:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8005fee:	b212      	sxth	r2, r2
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	b212      	sxth	r2, r2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	63bb      	str	r3, [r7, #56]	; 0x38

    twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8005ff8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005ffc:	2206      	movs	r2, #6
 8005ffe:	2143      	movs	r1, #67	; 0x43
 8006000:	2068      	movs	r0, #104	; 0x68
 8006002:	f7ff fe4d 	bl	8005ca0 <twiReadRegs8>
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800600c:	0212      	lsls	r2, r2, #8
 800600e:	b211      	sxth	r1, r2
 8006010:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8006014:	b212      	sxth	r2, r2
 8006016:	430a      	orrs	r2, r1
 8006018:	b212      	sxth	r2, r2
 800601a:	4413      	add	r3, r2
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8006024:	0212      	lsls	r2, r2, #8
 8006026:	b211      	sxth	r1, r2
 8006028:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800602c:	b212      	sxth	r2, r2
 800602e:	430a      	orrs	r2, r1
 8006030:	b212      	sxth	r2, r2
 8006032:	4413      	add	r3, r2
 8006034:	62bb      	str	r3, [r7, #40]	; 0x28
    gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800603c:	0212      	lsls	r2, r2, #8
 800603e:	b211      	sxth	r1, r2
 8006040:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8006044:	b212      	sxth	r2, r2
 8006046:	430a      	orrs	r2, r1
 8006048:	b212      	sxth	r2, r2
 800604a:	4413      	add	r3, r2
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(i = 0; i < 200; i++)
 800604e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006050:	3301      	adds	r3, #1
 8006052:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006056:	2bc7      	cmp	r3, #199	; 0xc7
 8006058:	dda3      	ble.n	8005fa2 <imuSelfTest+0x1fe>
  }

  for (i =0; i < 3; i++)
 800605a:	2300      	movs	r3, #0
 800605c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800605e:	e02a      	b.n	80060b6 <imuSelfTest+0x312>
 8006060:	08008028 	.word	0x08008028
 8006064:	51eb851f 	.word	0x51eb851f
  { // Get average of 200 values and store as average self-test readings
    aSTAvg[i] /= 200;
 8006068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	3370      	adds	r3, #112	; 0x70
 800606e:	443b      	add	r3, r7
 8006070:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006074:	4ace      	ldr	r2, [pc, #824]	; (80063b0 <imuSelfTest+0x60c>)
 8006076:	fb82 1203 	smull	r1, r2, r2, r3
 800607a:	1192      	asrs	r2, r2, #6
 800607c:	17db      	asrs	r3, r3, #31
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	3370      	adds	r3, #112	; 0x70
 8006086:	443b      	add	r3, r7
 8006088:	f843 2c40 	str.w	r2, [r3, #-64]
    gSTAvg[i] /= 200;
 800608c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	3370      	adds	r3, #112	; 0x70
 8006092:	443b      	add	r3, r7
 8006094:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006098:	4ac5      	ldr	r2, [pc, #788]	; (80063b0 <imuSelfTest+0x60c>)
 800609a:	fb82 1203 	smull	r1, r2, r2, r3
 800609e:	1192      	asrs	r2, r2, #6
 80060a0:	17db      	asrs	r3, r3, #31
 80060a2:	1ad2      	subs	r2, r2, r3
 80060a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	3370      	adds	r3, #112	; 0x70
 80060aa:	443b      	add	r3, r7
 80060ac:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i =0; i < 3; i++)
 80060b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b2:	3301      	adds	r3, #1
 80060b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	ddd5      	ble.n	8006068 <imuSelfTest+0x2c4>
  }

   // Configure the gyro and accelerometer for normal operation
   twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, 0x00);
 80060bc:	2200      	movs	r2, #0
 80060be:	211c      	movs	r1, #28
 80060c0:	2068      	movs	r0, #104	; 0x68
 80060c2:	f7ff fd47 	bl	8005b54 <twiWriteReg8>
   twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, 0x00);
 80060c6:	2200      	movs	r2, #0
 80060c8:	211b      	movs	r1, #27
 80060ca:	2068      	movs	r0, #104	; 0x68
 80060cc:	f7ff fd42 	bl	8005b54 <twiWriteReg8>
   HAL_Delay(25); // Delay a while to let the device stabilize
 80060d0:	2019      	movs	r0, #25
 80060d2:	f7fd fb07 	bl	80036e4 <HAL_Delay>

   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ST_X_ACCEL, &selfTest[0]); // X-axis accel self-test results
 80060d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80060da:	461a      	mov	r2, r3
 80060dc:	210d      	movs	r1, #13
 80060de:	2068      	movs	r0, #104	; 0x68
 80060e0:	f7ff fdbc 	bl	8005c5c <twiReadReg8>
   twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ST_Y_ACCEL, &selfTest[1]); // Y-axis accel self-test results
 80060e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80060e8:	3301      	adds	r3, #1
 80060ea:	461a      	mov	r2, r3
 80060ec:	210e      	movs	r1, #14
 80060ee:	2068      	movs	r0, #104	; 0x68
 80060f0:	f7ff fdb4 	bl	8005c5c <twiReadReg8>
   twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ST_Z_ACCEL, &selfTest[2]); // Z-axis accel self-test results
 80060f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80060f8:	3302      	adds	r3, #2
 80060fa:	461a      	mov	r2, r3
 80060fc:	210f      	movs	r1, #15
 80060fe:	2068      	movs	r0, #104	; 0x68
 8006100:	f7ff fdac 	bl	8005c5c <twiReadReg8>
   twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ST_X_GYRO, &selfTest[3]); // X-axis gyro self-test results
 8006104:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006108:	3303      	adds	r3, #3
 800610a:	461a      	mov	r2, r3
 800610c:	2100      	movs	r1, #0
 800610e:	2068      	movs	r0, #104	; 0x68
 8006110:	f7ff fda4 	bl	8005c5c <twiReadReg8>
   twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ST_Y_GYRO, &selfTest[4]); // Y-axis gyro self-test results
 8006114:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006118:	3304      	adds	r3, #4
 800611a:	461a      	mov	r2, r3
 800611c:	2101      	movs	r1, #1
 800611e:	2068      	movs	r0, #104	; 0x68
 8006120:	f7ff fd9c 	bl	8005c5c <twiReadReg8>
   twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ST_Z_GYRO, &selfTest[5]); // Z-axis gyro self-test results
 8006124:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006128:	3305      	adds	r3, #5
 800612a:	461a      	mov	r2, r3
 800612c:	2102      	movs	r1, #2
 800612e:	2068      	movs	r0, #104	; 0x68
 8006130:	f7ff fd94 	bl	8005c5c <twiReadReg8>

   for (i = 0; i < 6; i++)
 8006134:	2300      	movs	r3, #0
 8006136:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006138:	e023      	b.n	8006182 <imuSelfTest+0x3de>
   {
      if (selfTest[i] != 0)
 800613a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800613e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006140:	4413      	add	r3, r2
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d012      	beq.n	800616e <imuSelfTest+0x3ca>
      {
        factoryTrim[i] = *(mpu6500StTb + selfTest[i] - 1);
 8006148:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800614c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800614e:	4413      	add	r3, r2
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006156:	3b01      	subs	r3, #1
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	4a96      	ldr	r2, [pc, #600]	; (80063b4 <imuSelfTest+0x610>)
 800615c:	4413      	add	r3, r2
 800615e:	881a      	ldrh	r2, [r3, #0]
 8006160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	3370      	adds	r3, #112	; 0x70
 8006166:	443b      	add	r3, r7
 8006168:	f823 2c58 	strh.w	r2, [r3, #-88]
 800616c:	e006      	b.n	800617c <imuSelfTest+0x3d8>
      }
      else
      {
        factoryTrim[i] = 0;
 800616e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	3370      	adds	r3, #112	; 0x70
 8006174:	443b      	add	r3, r7
 8006176:	2200      	movs	r2, #0
 8006178:	f823 2c58 	strh.w	r2, [r3, #-88]
   for (i = 0; i < 6; i++)
 800617c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617e:	3301      	adds	r3, #1
 8006180:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006184:	2b05      	cmp	r3, #5
 8006186:	ddd8      	ble.n	800613a <imuSelfTest+0x396>
      // printf("[Self-test] idx #%d, st-code: %d, codeindex: %p, st-otp: %d\n", i, selfTest[i], mpu6500StTb + selfTest[i] - 1, factoryTrim[i]);
    }

  // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
  // To get percent, must multiply by 100
  for (i = 0; i < 3; i++)
 8006188:	2300      	movs	r3, #0
 800618a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800618c:	e053      	b.n	8006236 <imuSelfTest+0x492>
  {
    // aDiff[i] = 100.0f*((float)((aSTAvg[i] - aAvg[i]) - factoryTrim[i]))/factoryTrim[i]; // Report percent differences
    // gDiff[i] = 100.0f*((float)((gSTAvg[i] - gAvg[i]) - factoryTrim[i+3]))/factoryTrim[i+3]; // Report percent differences
    
    aDiff[i] = 100.0f*((float)((aSTAvg[i] - aAvg[i])))/factoryTrim[i]; // Report percent differences
 800618e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	3370      	adds	r3, #112	; 0x70
 8006194:	443b      	add	r3, r7
 8006196:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800619a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	3370      	adds	r3, #112	; 0x70
 80061a0:	443b      	add	r3, r7
 80061a2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	ee07 3a90 	vmov	s15, r3
 80061ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061b0:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80063b8 <imuSelfTest+0x614>
 80061b4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80061b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	3370      	adds	r3, #112	; 0x70
 80061be:	443b      	add	r3, r7
 80061c0:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 80061c4:	ee07 3a90 	vmov	s15, r3
 80061c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	3370      	adds	r3, #112	; 0x70
 80061d6:	443b      	add	r3, r7
 80061d8:	3b64      	subs	r3, #100	; 0x64
 80061da:	edc3 7a00 	vstr	s15, [r3]
    gDiff[i] = 100.0f*((float)((gSTAvg[i] - gAvg[i])))/factoryTrim[i+3]; // Report percent differences
 80061de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	3370      	adds	r3, #112	; 0x70
 80061e4:	443b      	add	r3, r7
 80061e6:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80061ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	3370      	adds	r3, #112	; 0x70
 80061f0:	443b      	add	r3, r7
 80061f2:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	ee07 3a90 	vmov	s15, r3
 80061fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006200:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80063b8 <imuSelfTest+0x614>
 8006204:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620a:	3303      	adds	r3, #3
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	3370      	adds	r3, #112	; 0x70
 8006210:	443b      	add	r3, r7
 8006212:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800621e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	3370      	adds	r3, #112	; 0x70
 8006228:	443b      	add	r3, r7
 800622a:	3b70      	subs	r3, #112	; 0x70
 800622c:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8006230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006232:	3301      	adds	r3, #1
 8006234:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006238:	2b02      	cmp	r3, #2
 800623a:	dda8      	ble.n	800618e <imuSelfTest+0x3ea>
    // printf("a[%d] Avg:%d, StAvg:%d, Shift:%d, FT:%d, Diff:%0.2f\n", i, aAvg[i], aSTAvg[i], aSTAvg[i] - aAvg[i], factoryTrim[i], aDiff[i]);
    // printf("g[%d] Avg:%d, StAvg:%d, Shift:%d, FT:%d, Diff:%0.2f\n", i, gAvg[i], gSTAvg[i], gSTAvg[i] - gAvg[i], factoryTrim[i+3], gDiff[i]);
  }

  // Restore old configuration
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_SMPLRT_DIV, saveReg[0]);
 800623c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006240:	461a      	mov	r2, r3
 8006242:	2119      	movs	r1, #25
 8006244:	2068      	movs	r0, #104	; 0x68
 8006246:	f7ff fc85 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_CONFIG, saveReg[1]);
 800624a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800624e:	461a      	mov	r2, r3
 8006250:	211a      	movs	r1, #26
 8006252:	2068      	movs	r0, #104	; 0x68
 8006254:	f7ff fc7e 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, saveReg[2]);
 8006258:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800625c:	461a      	mov	r2, r3
 800625e:	211b      	movs	r1, #27
 8006260:	2068      	movs	r0, #104	; 0x68
 8006262:	f7ff fc77 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG_2, saveReg[3]);
 8006266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800626a:	461a      	mov	r2, r3
 800626c:	211d      	movs	r1, #29
 800626e:	2068      	movs	r0, #104	; 0x68
 8006270:	f7ff fc70 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, saveReg[4]);
 8006274:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8006278:	461a      	mov	r2, r3
 800627a:	211c      	movs	r1, #28
 800627c:	2068      	movs	r0, #104	; 0x68
 800627e:	f7ff fc69 	bl	8005b54 <twiWriteReg8>

   // Check result
  testStatus |= imuEvalSelfTest(MPU6500_ST_GYRO_LOW, MPU6500_ST_GYRO_HIGH, gDiff[0], "gyro X") ? 0x00: 0x01;
 8006282:	edd7 7a00 	vldr	s15, [r7]
 8006286:	484d      	ldr	r0, [pc, #308]	; (80063bc <imuSelfTest+0x618>)
 8006288:	eeb0 1a67 	vmov.f32	s2, s15
 800628c:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80063c0 <imuSelfTest+0x61c>
 8006290:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80063c4 <imuSelfTest+0x620>
 8006294:	f7ff fd49 	bl	8005d2a <imuEvalSelfTest>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf0c      	ite	eq
 800629e:	2301      	moveq	r3, #1
 80062a0:	2300      	movne	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	b25a      	sxtb	r2, r3
 80062a6:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 80062aa:	4313      	orrs	r3, r2
 80062ac:	b25b      	sxtb	r3, r3
 80062ae:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  testStatus |= imuEvalSelfTest(MPU6500_ST_GYRO_LOW, MPU6500_ST_GYRO_HIGH, gDiff[1], "gyro Y") ? 0x00 : 0x02;
 80062b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80062b6:	4844      	ldr	r0, [pc, #272]	; (80063c8 <imuSelfTest+0x624>)
 80062b8:	eeb0 1a67 	vmov.f32	s2, s15
 80062bc:	eddf 0a40 	vldr	s1, [pc, #256]	; 80063c0 <imuSelfTest+0x61c>
 80062c0:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80063c4 <imuSelfTest+0x620>
 80062c4:	f7ff fd31 	bl	8005d2a <imuEvalSelfTest>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <imuSelfTest+0x52e>
 80062ce:	2300      	movs	r3, #0
 80062d0:	e000      	b.n	80062d4 <imuSelfTest+0x530>
 80062d2:	2302      	movs	r3, #2
 80062d4:	b25a      	sxtb	r2, r3
 80062d6:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 80062da:	4313      	orrs	r3, r2
 80062dc:	b25b      	sxtb	r3, r3
 80062de:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  testStatus |= imuEvalSelfTest(MPU6500_ST_GYRO_LOW, MPU6500_ST_GYRO_HIGH, gDiff[2], "gyro Z") ? 0x00 : 0x04;
 80062e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80062e6:	4839      	ldr	r0, [pc, #228]	; (80063cc <imuSelfTest+0x628>)
 80062e8:	eeb0 1a67 	vmov.f32	s2, s15
 80062ec:	eddf 0a34 	vldr	s1, [pc, #208]	; 80063c0 <imuSelfTest+0x61c>
 80062f0:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80063c4 <imuSelfTest+0x620>
 80062f4:	f7ff fd19 	bl	8005d2a <imuEvalSelfTest>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <imuSelfTest+0x55e>
 80062fe:	2300      	movs	r3, #0
 8006300:	e000      	b.n	8006304 <imuSelfTest+0x560>
 8006302:	2304      	movs	r3, #4
 8006304:	b25a      	sxtb	r2, r3
 8006306:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 800630a:	4313      	orrs	r3, r2
 800630c:	b25b      	sxtb	r3, r3
 800630e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  testStatus |= imuEvalSelfTest(MPU6500_ST_ACCEL_LOW, MPU6500_ST_ACCEL_HIGH, aDiff[0], "acc X") ? 0x00 : 0x08;
 8006312:	edd7 7a03 	vldr	s15, [r7, #12]
 8006316:	482e      	ldr	r0, [pc, #184]	; (80063d0 <imuSelfTest+0x62c>)
 8006318:	eeb0 1a67 	vmov.f32	s2, s15
 800631c:	eddf 0a2d 	vldr	s1, [pc, #180]	; 80063d4 <imuSelfTest+0x630>
 8006320:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80063c4 <imuSelfTest+0x620>
 8006324:	f7ff fd01 	bl	8005d2a <imuEvalSelfTest>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <imuSelfTest+0x58e>
 800632e:	2300      	movs	r3, #0
 8006330:	e000      	b.n	8006334 <imuSelfTest+0x590>
 8006332:	2308      	movs	r3, #8
 8006334:	b25a      	sxtb	r2, r3
 8006336:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 800633a:	4313      	orrs	r3, r2
 800633c:	b25b      	sxtb	r3, r3
 800633e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  testStatus |= imuEvalSelfTest(MPU6500_ST_ACCEL_LOW, MPU6500_ST_ACCEL_HIGH, aDiff[1], "acc Y") ? 0x00 : 0x10;
 8006342:	edd7 7a04 	vldr	s15, [r7, #16]
 8006346:	4824      	ldr	r0, [pc, #144]	; (80063d8 <imuSelfTest+0x634>)
 8006348:	eeb0 1a67 	vmov.f32	s2, s15
 800634c:	eddf 0a21 	vldr	s1, [pc, #132]	; 80063d4 <imuSelfTest+0x630>
 8006350:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80063c4 <imuSelfTest+0x620>
 8006354:	f7ff fce9 	bl	8005d2a <imuEvalSelfTest>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <imuSelfTest+0x5be>
 800635e:	2300      	movs	r3, #0
 8006360:	e000      	b.n	8006364 <imuSelfTest+0x5c0>
 8006362:	2310      	movs	r3, #16
 8006364:	b25a      	sxtb	r2, r3
 8006366:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 800636a:	4313      	orrs	r3, r2
 800636c:	b25b      	sxtb	r3, r3
 800636e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  testStatus |= imuEvalSelfTest(MPU6500_ST_ACCEL_LOW, MPU6500_ST_ACCEL_HIGH, aDiff[2], "acc Z") ? 0x00 : 0x20;
 8006372:	edd7 7a05 	vldr	s15, [r7, #20]
 8006376:	4819      	ldr	r0, [pc, #100]	; (80063dc <imuSelfTest+0x638>)
 8006378:	eeb0 1a67 	vmov.f32	s2, s15
 800637c:	eddf 0a15 	vldr	s1, [pc, #84]	; 80063d4 <imuSelfTest+0x630>
 8006380:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80063c4 <imuSelfTest+0x620>
 8006384:	f7ff fcd1 	bl	8005d2a <imuEvalSelfTest>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <imuSelfTest+0x5ee>
 800638e:	2300      	movs	r3, #0
 8006390:	e000      	b.n	8006394 <imuSelfTest+0x5f0>
 8006392:	2320      	movs	r3, #32
 8006394:	b25a      	sxtb	r2, r3
 8006396:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 800639a:	4313      	orrs	r3, r2
 800639c:	b25b      	sxtb	r3, r3
 800639e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

  return testStatus;
 80063a2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3770      	adds	r7, #112	; 0x70
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	51eb851f 	.word	0x51eb851f
 80063b4:	08008048 	.word	0x08008048
 80063b8:	42c80000 	.word	0x42c80000
 80063bc:	08007ff8 	.word	0x08007ff8
 80063c0:	00000000 	.word	0x00000000
 80063c4:	42480000 	.word	0x42480000
 80063c8:	08008000 	.word	0x08008000
 80063cc:	08008008 	.word	0x08008008
 80063d0:	08008010 	.word	0x08008010
 80063d4:	43160000 	.word	0x43160000
 80063d8:	08008018 	.word	0x08008018
 80063dc:	08008020 	.word	0x08008020

080063e0 <imuSetOffsets>:

// Setea los registros de corrección de offsets.
// De acelerometro y giroscopos.
void imuSetOffsets() {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b090      	sub	sp, #64	; 0x40
 80063e4:	af00      	add	r7, sp, #0
  uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 80063e6:	4aaa      	ldr	r2, [pc, #680]	; (8006690 <imuSetOffsets+0x2b0>)
 80063e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80063ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063f0:	6018      	str	r0, [r3, #0]
 80063f2:	3304      	adds	r3, #4
 80063f4:	8019      	strh	r1, [r3, #0]
  uint8_t saveReg[5];
  uint8_t offsetsA[6] = {}, offsetsG[6] = {};
 80063f6:	2300      	movs	r3, #0
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
 80063fa:	2300      	movs	r3, #0
 80063fc:	853b      	strh	r3, [r7, #40]	; 0x28
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
 8006402:	2300      	movs	r3, #0
 8006404:	843b      	strh	r3, [r7, #32]
  int32_t gAvg[3]={0}, aAvg[3]={0};
 8006406:	f107 0310 	add.w	r3, r7, #16
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	605a      	str	r2, [r3, #4]
 8006410:	609a      	str	r2, [r3, #8]
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	609a      	str	r2, [r3, #8]
  int i;

  // Save old configuration
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_SMPLRT_DIV, &saveReg[0]);
 800641c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006420:	461a      	mov	r2, r3
 8006422:	2119      	movs	r1, #25
 8006424:	2068      	movs	r0, #104	; 0x68
 8006426:	f7ff fc19 	bl	8005c5c <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_CONFIG, &saveReg[1]);
 800642a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800642e:	3301      	adds	r3, #1
 8006430:	461a      	mov	r2, r3
 8006432:	211a      	movs	r1, #26
 8006434:	2068      	movs	r0, #104	; 0x68
 8006436:	f7ff fc11 	bl	8005c5c <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, &saveReg[2]);
 800643a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800643e:	3302      	adds	r3, #2
 8006440:	461a      	mov	r2, r3
 8006442:	211b      	movs	r1, #27
 8006444:	2068      	movs	r0, #104	; 0x68
 8006446:	f7ff fc09 	bl	8005c5c <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG_2, &saveReg[3]);
 800644a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800644e:	3303      	adds	r3, #3
 8006450:	461a      	mov	r2, r3
 8006452:	211d      	movs	r1, #29
 8006454:	2068      	movs	r0, #104	; 0x68
 8006456:	f7ff fc01 	bl	8005c5c <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, &saveReg[4]);
 800645a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800645e:	3304      	adds	r3, #4
 8006460:	461a      	mov	r2, r3
 8006462:	211c      	movs	r1, #28
 8006464:	2068      	movs	r0, #104	; 0x68
 8006466:	f7ff fbf9 	bl	8005c5c <twiReadReg8>
  // Write test configuration
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 800646a:	2200      	movs	r2, #0
 800646c:	2119      	movs	r1, #25
 800646e:	2068      	movs	r0, #104	; 0x68
 8006470:	f7ff fb70 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8006474:	2202      	movs	r2, #2
 8006476:	211a      	movs	r1, #26
 8006478:	2068      	movs	r0, #104	; 0x68
 800647a:	f7ff fb6b 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, MPU6500_GYRO_FS_250); // Set full scale range for the gyro to 250 dps
 800647e:	2200      	movs	r2, #0
 8006480:	211b      	movs	r1, #27
 8006482:	2068      	movs	r0, #104	; 0x68
 8006484:	f7ff fb66 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG_2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8006488:	2202      	movs	r2, #2
 800648a:	211d      	movs	r1, #29
 800648c:	2068      	movs	r0, #104	; 0x68
 800648e:	f7ff fb61 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, MPU6500_ACCEL_FS_2); // Set full scale range for the accelerometer to 2 g
 8006492:	2200      	movs	r2, #0
 8006494:	211c      	movs	r1, #28
 8006496:	2068      	movs	r0, #104	; 0x68
 8006498:	f7ff fb5c 	bl	8005b54 <twiWriteReg8>

  for(i = 0; i < 200; i++)
 800649c:	2300      	movs	r3, #0
 800649e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a0:	e055      	b.n	800654e <imuSetOffsets+0x16e>
  {
    // get average current values of gyro and acclerometer
    twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 80064a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80064a6:	2206      	movs	r2, #6
 80064a8:	213b      	movs	r1, #59	; 0x3b
 80064aa:	2068      	movs	r0, #104	; 0x68
 80064ac:	f7ff fbf8 	bl	8005ca0 <twiReadRegs8>
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80064b6:	0212      	lsls	r2, r2, #8
 80064b8:	b211      	sxth	r1, r2
 80064ba:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80064be:	b212      	sxth	r2, r2
 80064c0:	430a      	orrs	r2, r1
 80064c2:	b212      	sxth	r2, r2
 80064c4:	4413      	add	r3, r2
 80064c6:	607b      	str	r3, [r7, #4]
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80064ce:	0212      	lsls	r2, r2, #8
 80064d0:	b211      	sxth	r1, r2
 80064d2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80064d6:	b212      	sxth	r2, r2
 80064d8:	430a      	orrs	r2, r1
 80064da:	b212      	sxth	r2, r2
 80064dc:	4413      	add	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80064e6:	0212      	lsls	r2, r2, #8
 80064e8:	b211      	sxth	r1, r2
 80064ea:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80064ee:	b212      	sxth	r2, r2
 80064f0:	430a      	orrs	r2, r1
 80064f2:	b212      	sxth	r2, r2
 80064f4:	4413      	add	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]

    twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 80064f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80064fc:	2206      	movs	r2, #6
 80064fe:	2143      	movs	r1, #67	; 0x43
 8006500:	2068      	movs	r0, #104	; 0x68
 8006502:	f7ff fbcd 	bl	8005ca0 <twiReadRegs8>
    gAvg[0] += (int16_t)((int16_t)rawData[0] << 8) | rawData[1]; // Turn the MSB and LSB into a signed 16-bit value
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	b21b      	sxth	r3, r3
 8006510:	4619      	mov	r1, r3
 8006512:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006516:	430b      	orrs	r3, r1
 8006518:	4413      	add	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
    gAvg[1] += (int16_t)((int16_t)rawData[2] << 8) | rawData[3];
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	b21b      	sxth	r3, r3
 8006526:	4619      	mov	r1, r3
 8006528:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800652c:	430b      	orrs	r3, r1
 800652e:	4413      	add	r3, r2
 8006530:	617b      	str	r3, [r7, #20]
    gAvg[2] += (int16_t)((int16_t)rawData[4] << 8) | rawData[5];
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006538:	021b      	lsls	r3, r3, #8
 800653a:	b21b      	sxth	r3, r3
 800653c:	4619      	mov	r1, r3
 800653e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006542:	430b      	orrs	r3, r1
 8006544:	4413      	add	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < 200; i++)
 8006548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654a:	3301      	adds	r3, #1
 800654c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800654e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006550:	2bc7      	cmp	r3, #199	; 0xc7
 8006552:	dda6      	ble.n	80064a2 <imuSetOffsets+0xc2>
  }

  for (i = 0; i < 3; i++)
 8006554:	2300      	movs	r3, #0
 8006556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006558:	e068      	b.n	800662c <imuSetOffsets+0x24c>
  { // Get average of 200 values and store as average current readings
    aAvg[i] /= 200;
 800655a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	3340      	adds	r3, #64	; 0x40
 8006560:	443b      	add	r3, r7
 8006562:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006566:	4a4b      	ldr	r2, [pc, #300]	; (8006694 <imuSetOffsets+0x2b4>)
 8006568:	fb82 1203 	smull	r1, r2, r2, r3
 800656c:	1192      	asrs	r2, r2, #6
 800656e:	17db      	asrs	r3, r3, #31
 8006570:	1ad2      	subs	r2, r2, r3
 8006572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	3340      	adds	r3, #64	; 0x40
 8006578:	443b      	add	r3, r7
 800657a:	f843 2c3c 	str.w	r2, [r3, #-60]
    gAvg[i] /= 200;
 800657e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	3340      	adds	r3, #64	; 0x40
 8006584:	443b      	add	r3, r7
 8006586:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800658a:	4a42      	ldr	r2, [pc, #264]	; (8006694 <imuSetOffsets+0x2b4>)
 800658c:	fb82 1203 	smull	r1, r2, r2, r3
 8006590:	1192      	asrs	r2, r2, #6
 8006592:	17db      	asrs	r3, r3, #31
 8006594:	1ad2      	subs	r2, r2, r3
 8006596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	3340      	adds	r3, #64	; 0x40
 800659c:	443b      	add	r3, r7
 800659e:	f843 2c30 	str.w	r2, [r3, #-48]

    offsetsA[i*2] = ((aAvg[i] >> 3) & 0x0000ff00) >> 8;
 80065a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	3340      	adds	r3, #64	; 0x40
 80065a8:	443b      	add	r3, r7
 80065aa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80065ae:	10db      	asrs	r3, r3, #3
 80065b0:	121a      	asrs	r2, r3, #8
 80065b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	3340      	adds	r3, #64	; 0x40
 80065ba:	443b      	add	r3, r7
 80065bc:	f803 2c1c 	strb.w	r2, [r3, #-28]
    offsetsA[(i*2) + 1] = (aAvg[i] >> 3) & 0x000000fe;
 80065c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	3340      	adds	r3, #64	; 0x40
 80065c6:	443b      	add	r3, r7
 80065c8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80065cc:	10db      	asrs	r3, r3, #3
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	3301      	adds	r3, #1
 80065d6:	f022 0201 	bic.w	r2, r2, #1
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	3340      	adds	r3, #64	; 0x40
 80065de:	443b      	add	r3, r7
 80065e0:	f803 2c1c 	strb.w	r2, [r3, #-28]

    offsetsG[i*2] = ((gAvg[i] >> 3) & 0x0000ff00) >> 8;
 80065e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	3340      	adds	r3, #64	; 0x40
 80065ea:	443b      	add	r3, r7
 80065ec:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80065f0:	10db      	asrs	r3, r3, #3
 80065f2:	121a      	asrs	r2, r3, #8
 80065f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	3340      	adds	r3, #64	; 0x40
 80065fc:	443b      	add	r3, r7
 80065fe:	f803 2c24 	strb.w	r2, [r3, #-36]
    offsetsG[(i*2) + 1] = (gAvg[i] >> 3) & 0x000000fe;
 8006602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	3340      	adds	r3, #64	; 0x40
 8006608:	443b      	add	r3, r7
 800660a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800660e:	10db      	asrs	r3, r3, #3
 8006610:	b2da      	uxtb	r2, r3
 8006612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006614:	005b      	lsls	r3, r3, #1
 8006616:	3301      	adds	r3, #1
 8006618:	f022 0201 	bic.w	r2, r2, #1
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	3340      	adds	r3, #64	; 0x40
 8006620:	443b      	add	r3, r7
 8006622:	f803 2c24 	strb.w	r2, [r3, #-36]
  for (i = 0; i < 3; i++)
 8006626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006628:	3301      	adds	r3, #1
 800662a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800662c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662e:	2b02      	cmp	r3, #2
 8006630:	dd93      	ble.n	800655a <imuSetOffsets+0x17a>
  }

  //Write offsets
  twiWriteRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_XG_OFFS_USRH, 6, offsetsG);
 8006632:	f107 031c 	add.w	r3, r7, #28
 8006636:	2206      	movs	r2, #6
 8006638:	2113      	movs	r1, #19
 800663a:	2068      	movs	r0, #104	; 0x68
 800663c:	f7ff faa4 	bl	8005b88 <twiWriteRegs8>
  //twiWriteRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_XA_OFFSET_H, 6, offsetsA);

  //Restore registers
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_SMPLRT_DIV, saveReg[0]);
 8006640:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006644:	461a      	mov	r2, r3
 8006646:	2119      	movs	r1, #25
 8006648:	2068      	movs	r0, #104	; 0x68
 800664a:	f7ff fa83 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_CONFIG, saveReg[1]);
 800664e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006652:	461a      	mov	r2, r3
 8006654:	211a      	movs	r1, #26
 8006656:	2068      	movs	r0, #104	; 0x68
 8006658:	f7ff fa7c 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, saveReg[2]);
 800665c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006660:	461a      	mov	r2, r3
 8006662:	211b      	movs	r1, #27
 8006664:	2068      	movs	r0, #104	; 0x68
 8006666:	f7ff fa75 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG_2, saveReg[3]);
 800666a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800666e:	461a      	mov	r2, r3
 8006670:	211d      	movs	r1, #29
 8006672:	2068      	movs	r0, #104	; 0x68
 8006674:	f7ff fa6e 	bl	8005b54 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, saveReg[4]);
 8006678:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800667c:	461a      	mov	r2, r3
 800667e:	211c      	movs	r1, #28
 8006680:	2068      	movs	r0, #104	; 0x68
 8006682:	f7ff fa67 	bl	8005b54 <twiWriteReg8>
  
}
 8006686:	bf00      	nop
 8006688:	3740      	adds	r7, #64	; 0x40
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	08008028 	.word	0x08008028
 8006694:	51eb851f 	.word	0x51eb851f

08006698 <imuGetAccelData>:
  return ((float)temp / 333.87f) + 21.0f;
}

//Retorna en un uint64 los datos de los 3 ejes del acelerometro.
//Formato: IIXXYYZZ (donde cada letra es un grupo de 8 bits. I: Ignorados)
uint64_t imuGetAccelData() {
 8006698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800669c:	b08c      	sub	sp, #48	; 0x30
 800669e:	af00      	add	r7, sp, #0
  uint8_t buf[6];
  uint64_t ret = 0;
 80066a0:	f04f 0200 	mov.w	r2, #0
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_XOUT_H, 6, buf);
 80066ac:	f107 031c 	add.w	r3, r7, #28
 80066b0:	2206      	movs	r2, #6
 80066b2:	213b      	movs	r1, #59	; 0x3b
 80066b4:	2068      	movs	r0, #104	; 0x68
 80066b6:	f7ff faf3 	bl	8005ca0 <twiReadRegs8>
  for (int i = 0; i < 3; i++) {
 80066ba:	2300      	movs	r3, #0
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
 80066be:	e05d      	b.n	800677c <imuGetAccelData+0xe4>
	  //Esta operativa me carga en el uint64 los datos de x, y & z.
	  //Es posible que sea mas legible y eficiente si unrolleo el loop;
	  ret |= ((uint64_t)buf[i*2]) << (8 + (2-i) * 16);
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	3318      	adds	r3, #24
 80066c6:	f107 0218 	add.w	r2, r7, #24
 80066ca:	4413      	add	r3, r2
 80066cc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2200      	movs	r2, #0
 80066d4:	469a      	mov	sl, r3
 80066d6:	4693      	mov	fp, r2
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	f1c3 0302 	rsb	r3, r3, #2
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	3308      	adds	r3, #8
 80066e2:	f1a3 0120 	sub.w	r1, r3, #32
 80066e6:	f1c3 0220 	rsb	r2, r3, #32
 80066ea:	fa0b f503 	lsl.w	r5, fp, r3
 80066ee:	fa0a f101 	lsl.w	r1, sl, r1
 80066f2:	430d      	orrs	r5, r1
 80066f4:	fa2a f202 	lsr.w	r2, sl, r2
 80066f8:	4315      	orrs	r5, r2
 80066fa:	fa0a f403 	lsl.w	r4, sl, r3
 80066fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006702:	ea42 0104 	orr.w	r1, r2, r4
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	432b      	orrs	r3, r5
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006710:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  ret |= ((uint64_t)buf[(i*2)+1]) << (2-i) * 16;
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	3301      	adds	r3, #1
 800671a:	3318      	adds	r3, #24
 800671c:	f107 0218 	add.w	r2, r7, #24
 8006720:	4413      	add	r3, r2
 8006722:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2200      	movs	r2, #0
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	617a      	str	r2, [r7, #20]
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	f1c3 0302 	rsb	r3, r3, #2
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	f1a3 0120 	sub.w	r1, r3, #32
 800673a:	f1c3 0220 	rsb	r2, r3, #32
 800673e:	6978      	ldr	r0, [r7, #20]
 8006740:	fa00 f903 	lsl.w	r9, r0, r3
 8006744:	6938      	ldr	r0, [r7, #16]
 8006746:	fa00 f101 	lsl.w	r1, r0, r1
 800674a:	ea49 0901 	orr.w	r9, r9, r1
 800674e:	6939      	ldr	r1, [r7, #16]
 8006750:	fa21 f202 	lsr.w	r2, r1, r2
 8006754:	ea49 0902 	orr.w	r9, r9, r2
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	fa02 f803 	lsl.w	r8, r2, r3
 800675e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006762:	ea42 0108 	orr.w	r1, r2, r8
 8006766:	6039      	str	r1, [r7, #0]
 8006768:	ea43 0309 	orr.w	r3, r3, r9
 800676c:	607b      	str	r3, [r7, #4]
 800676e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006772:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for (int i = 0; i < 3; i++) {
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	3301      	adds	r3, #1
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	2b02      	cmp	r3, #2
 8006780:	dd9e      	ble.n	80066c0 <imuGetAccelData+0x28>

  }
  return ret;
 8006782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8006786:	4610      	mov	r0, r2
 8006788:	4619      	mov	r1, r3
 800678a:	3730      	adds	r7, #48	; 0x30
 800678c:	46bd      	mov	sp, r7
 800678e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006792 <imuGetGyroData>:

//Retorna en un uint64 los datos de los 3 ejes del giroscopo
//Formato: IIXXYYZZ (donde cada letra es un grupo de 8 bits. I: Ignorados)
uint64_t imuGetGyroData() {
 8006792:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006796:	b08c      	sub	sp, #48	; 0x30
 8006798:	af00      	add	r7, sp, #0
  uint8_t buf[6];
  uint64_t ret = 0;
 800679a:	f04f 0200 	mov.w	r2, #0
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_XOUT_H, 6, buf);
 80067a6:	f107 031c 	add.w	r3, r7, #28
 80067aa:	2206      	movs	r2, #6
 80067ac:	2143      	movs	r1, #67	; 0x43
 80067ae:	2068      	movs	r0, #104	; 0x68
 80067b0:	f7ff fa76 	bl	8005ca0 <twiReadRegs8>
  for (int i = 0; i < 3; i++) {
 80067b4:	2300      	movs	r3, #0
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
 80067b8:	e05d      	b.n	8006876 <imuGetGyroData+0xe4>
	  //Esta operativa me carga en el uint64 los datos de x, y & z.
	  //Es posible que sea mas legible y eficiente si unrolleo el loop;
	  ret |= ((uint64_t)buf[i*2]) << (8 + (2-i) * 16);
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	3318      	adds	r3, #24
 80067c0:	f107 0218 	add.w	r2, r7, #24
 80067c4:	4413      	add	r3, r2
 80067c6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2200      	movs	r2, #0
 80067ce:	469a      	mov	sl, r3
 80067d0:	4693      	mov	fp, r2
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	f1c3 0302 	rsb	r3, r3, #2
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	3308      	adds	r3, #8
 80067dc:	f1a3 0120 	sub.w	r1, r3, #32
 80067e0:	f1c3 0220 	rsb	r2, r3, #32
 80067e4:	fa0b f503 	lsl.w	r5, fp, r3
 80067e8:	fa0a f101 	lsl.w	r1, sl, r1
 80067ec:	430d      	orrs	r5, r1
 80067ee:	fa2a f202 	lsr.w	r2, sl, r2
 80067f2:	4315      	orrs	r5, r2
 80067f4:	fa0a f403 	lsl.w	r4, sl, r3
 80067f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067fc:	ea42 0104 	orr.w	r1, r2, r4
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	432b      	orrs	r3, r5
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800680a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  ret |= ((uint64_t)buf[(i*2)+1]) << (2-i) * 16;
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	3301      	adds	r3, #1
 8006814:	3318      	adds	r3, #24
 8006816:	f107 0218 	add.w	r2, r7, #24
 800681a:	4413      	add	r3, r2
 800681c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2200      	movs	r2, #0
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	617a      	str	r2, [r7, #20]
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	f1c3 0302 	rsb	r3, r3, #2
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	f1a3 0120 	sub.w	r1, r3, #32
 8006834:	f1c3 0220 	rsb	r2, r3, #32
 8006838:	6978      	ldr	r0, [r7, #20]
 800683a:	fa00 f903 	lsl.w	r9, r0, r3
 800683e:	6938      	ldr	r0, [r7, #16]
 8006840:	fa00 f101 	lsl.w	r1, r0, r1
 8006844:	ea49 0901 	orr.w	r9, r9, r1
 8006848:	6939      	ldr	r1, [r7, #16]
 800684a:	fa21 f202 	lsr.w	r2, r1, r2
 800684e:	ea49 0902 	orr.w	r9, r9, r2
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	fa02 f803 	lsl.w	r8, r2, r3
 8006858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800685c:	ea42 0108 	orr.w	r1, r2, r8
 8006860:	6039      	str	r1, [r7, #0]
 8006862:	ea43 0309 	orr.w	r3, r3, r9
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800686c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for (int i = 0; i < 3; i++) {
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	3301      	adds	r3, #1
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	2b02      	cmp	r3, #2
 800687a:	dd9e      	ble.n	80067ba <imuGetGyroData+0x28>
  }
  return ret;
 800687c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8006880:	4610      	mov	r0, r2
 8006882:	4619      	mov	r1, r3
 8006884:	3730      	adds	r7, #48	; 0x30
 8006886:	46bd      	mov	sp, r7
 8006888:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800688c <__errno>:
 800688c:	4b01      	ldr	r3, [pc, #4]	; (8006894 <__errno+0x8>)
 800688e:	6818      	ldr	r0, [r3, #0]
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20000048 	.word	0x20000048

08006898 <__libc_init_array>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	4d0d      	ldr	r5, [pc, #52]	; (80068d0 <__libc_init_array+0x38>)
 800689c:	4c0d      	ldr	r4, [pc, #52]	; (80068d4 <__libc_init_array+0x3c>)
 800689e:	1b64      	subs	r4, r4, r5
 80068a0:	10a4      	asrs	r4, r4, #2
 80068a2:	2600      	movs	r6, #0
 80068a4:	42a6      	cmp	r6, r4
 80068a6:	d109      	bne.n	80068bc <__libc_init_array+0x24>
 80068a8:	4d0b      	ldr	r5, [pc, #44]	; (80068d8 <__libc_init_array+0x40>)
 80068aa:	4c0c      	ldr	r4, [pc, #48]	; (80068dc <__libc_init_array+0x44>)
 80068ac:	f001 fb98 	bl	8007fe0 <_init>
 80068b0:	1b64      	subs	r4, r4, r5
 80068b2:	10a4      	asrs	r4, r4, #2
 80068b4:	2600      	movs	r6, #0
 80068b6:	42a6      	cmp	r6, r4
 80068b8:	d105      	bne.n	80068c6 <__libc_init_array+0x2e>
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c0:	4798      	blx	r3
 80068c2:	3601      	adds	r6, #1
 80068c4:	e7ee      	b.n	80068a4 <__libc_init_array+0xc>
 80068c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ca:	4798      	blx	r3
 80068cc:	3601      	adds	r6, #1
 80068ce:	e7f2      	b.n	80068b6 <__libc_init_array+0x1e>
 80068d0:	08008470 	.word	0x08008470
 80068d4:	08008470 	.word	0x08008470
 80068d8:	08008470 	.word	0x08008470
 80068dc:	08008474 	.word	0x08008474

080068e0 <memset>:
 80068e0:	4402      	add	r2, r0
 80068e2:	4603      	mov	r3, r0
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d100      	bne.n	80068ea <memset+0xa>
 80068e8:	4770      	bx	lr
 80068ea:	f803 1b01 	strb.w	r1, [r3], #1
 80068ee:	e7f9      	b.n	80068e4 <memset+0x4>

080068f0 <atan>:
 80068f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f4:	ec55 4b10 	vmov	r4, r5, d0
 80068f8:	4bc3      	ldr	r3, [pc, #780]	; (8006c08 <atan+0x318>)
 80068fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80068fe:	429e      	cmp	r6, r3
 8006900:	46ab      	mov	fp, r5
 8006902:	dd18      	ble.n	8006936 <atan+0x46>
 8006904:	4bc1      	ldr	r3, [pc, #772]	; (8006c0c <atan+0x31c>)
 8006906:	429e      	cmp	r6, r3
 8006908:	dc01      	bgt.n	800690e <atan+0x1e>
 800690a:	d109      	bne.n	8006920 <atan+0x30>
 800690c:	b144      	cbz	r4, 8006920 <atan+0x30>
 800690e:	4622      	mov	r2, r4
 8006910:	462b      	mov	r3, r5
 8006912:	4620      	mov	r0, r4
 8006914:	4629      	mov	r1, r5
 8006916:	f7f9 fc65 	bl	80001e4 <__adddf3>
 800691a:	4604      	mov	r4, r0
 800691c:	460d      	mov	r5, r1
 800691e:	e006      	b.n	800692e <atan+0x3e>
 8006920:	f1bb 0f00 	cmp.w	fp, #0
 8006924:	f300 8131 	bgt.w	8006b8a <atan+0x29a>
 8006928:	a59b      	add	r5, pc, #620	; (adr r5, 8006b98 <atan+0x2a8>)
 800692a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800692e:	ec45 4b10 	vmov	d0, r4, r5
 8006932:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006936:	4bb6      	ldr	r3, [pc, #728]	; (8006c10 <atan+0x320>)
 8006938:	429e      	cmp	r6, r3
 800693a:	dc14      	bgt.n	8006966 <atan+0x76>
 800693c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006940:	429e      	cmp	r6, r3
 8006942:	dc0d      	bgt.n	8006960 <atan+0x70>
 8006944:	a396      	add	r3, pc, #600	; (adr r3, 8006ba0 <atan+0x2b0>)
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	ee10 0a10 	vmov	r0, s0
 800694e:	4629      	mov	r1, r5
 8006950:	f7f9 fc48 	bl	80001e4 <__adddf3>
 8006954:	4baf      	ldr	r3, [pc, #700]	; (8006c14 <atan+0x324>)
 8006956:	2200      	movs	r2, #0
 8006958:	f7fa f88a 	bl	8000a70 <__aeabi_dcmpgt>
 800695c:	2800      	cmp	r0, #0
 800695e:	d1e6      	bne.n	800692e <atan+0x3e>
 8006960:	f04f 3aff 	mov.w	sl, #4294967295
 8006964:	e02b      	b.n	80069be <atan+0xce>
 8006966:	f000 f9b7 	bl	8006cd8 <fabs>
 800696a:	4bab      	ldr	r3, [pc, #684]	; (8006c18 <atan+0x328>)
 800696c:	429e      	cmp	r6, r3
 800696e:	ec55 4b10 	vmov	r4, r5, d0
 8006972:	f300 80bf 	bgt.w	8006af4 <atan+0x204>
 8006976:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800697a:	429e      	cmp	r6, r3
 800697c:	f300 80a0 	bgt.w	8006ac0 <atan+0x1d0>
 8006980:	ee10 2a10 	vmov	r2, s0
 8006984:	ee10 0a10 	vmov	r0, s0
 8006988:	462b      	mov	r3, r5
 800698a:	4629      	mov	r1, r5
 800698c:	f7f9 fc2a 	bl	80001e4 <__adddf3>
 8006990:	4ba0      	ldr	r3, [pc, #640]	; (8006c14 <atan+0x324>)
 8006992:	2200      	movs	r2, #0
 8006994:	f7f9 fc24 	bl	80001e0 <__aeabi_dsub>
 8006998:	2200      	movs	r2, #0
 800699a:	4606      	mov	r6, r0
 800699c:	460f      	mov	r7, r1
 800699e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069a2:	4620      	mov	r0, r4
 80069a4:	4629      	mov	r1, r5
 80069a6:	f7f9 fc1d 	bl	80001e4 <__adddf3>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4630      	mov	r0, r6
 80069b0:	4639      	mov	r1, r7
 80069b2:	f7f9 fef7 	bl	80007a4 <__aeabi_ddiv>
 80069b6:	f04f 0a00 	mov.w	sl, #0
 80069ba:	4604      	mov	r4, r0
 80069bc:	460d      	mov	r5, r1
 80069be:	4622      	mov	r2, r4
 80069c0:	462b      	mov	r3, r5
 80069c2:	4620      	mov	r0, r4
 80069c4:	4629      	mov	r1, r5
 80069c6:	f7f9 fdc3 	bl	8000550 <__aeabi_dmul>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	4680      	mov	r8, r0
 80069d0:	4689      	mov	r9, r1
 80069d2:	f7f9 fdbd 	bl	8000550 <__aeabi_dmul>
 80069d6:	a374      	add	r3, pc, #464	; (adr r3, 8006ba8 <atan+0x2b8>)
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	4606      	mov	r6, r0
 80069de:	460f      	mov	r7, r1
 80069e0:	f7f9 fdb6 	bl	8000550 <__aeabi_dmul>
 80069e4:	a372      	add	r3, pc, #456	; (adr r3, 8006bb0 <atan+0x2c0>)
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	f7f9 fbfb 	bl	80001e4 <__adddf3>
 80069ee:	4632      	mov	r2, r6
 80069f0:	463b      	mov	r3, r7
 80069f2:	f7f9 fdad 	bl	8000550 <__aeabi_dmul>
 80069f6:	a370      	add	r3, pc, #448	; (adr r3, 8006bb8 <atan+0x2c8>)
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f7f9 fbf2 	bl	80001e4 <__adddf3>
 8006a00:	4632      	mov	r2, r6
 8006a02:	463b      	mov	r3, r7
 8006a04:	f7f9 fda4 	bl	8000550 <__aeabi_dmul>
 8006a08:	a36d      	add	r3, pc, #436	; (adr r3, 8006bc0 <atan+0x2d0>)
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f7f9 fbe9 	bl	80001e4 <__adddf3>
 8006a12:	4632      	mov	r2, r6
 8006a14:	463b      	mov	r3, r7
 8006a16:	f7f9 fd9b 	bl	8000550 <__aeabi_dmul>
 8006a1a:	a36b      	add	r3, pc, #428	; (adr r3, 8006bc8 <atan+0x2d8>)
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f7f9 fbe0 	bl	80001e4 <__adddf3>
 8006a24:	4632      	mov	r2, r6
 8006a26:	463b      	mov	r3, r7
 8006a28:	f7f9 fd92 	bl	8000550 <__aeabi_dmul>
 8006a2c:	a368      	add	r3, pc, #416	; (adr r3, 8006bd0 <atan+0x2e0>)
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	f7f9 fbd7 	bl	80001e4 <__adddf3>
 8006a36:	4642      	mov	r2, r8
 8006a38:	464b      	mov	r3, r9
 8006a3a:	f7f9 fd89 	bl	8000550 <__aeabi_dmul>
 8006a3e:	a366      	add	r3, pc, #408	; (adr r3, 8006bd8 <atan+0x2e8>)
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	4680      	mov	r8, r0
 8006a46:	4689      	mov	r9, r1
 8006a48:	4630      	mov	r0, r6
 8006a4a:	4639      	mov	r1, r7
 8006a4c:	f7f9 fd80 	bl	8000550 <__aeabi_dmul>
 8006a50:	a363      	add	r3, pc, #396	; (adr r3, 8006be0 <atan+0x2f0>)
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	f7f9 fbc3 	bl	80001e0 <__aeabi_dsub>
 8006a5a:	4632      	mov	r2, r6
 8006a5c:	463b      	mov	r3, r7
 8006a5e:	f7f9 fd77 	bl	8000550 <__aeabi_dmul>
 8006a62:	a361      	add	r3, pc, #388	; (adr r3, 8006be8 <atan+0x2f8>)
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f7f9 fbba 	bl	80001e0 <__aeabi_dsub>
 8006a6c:	4632      	mov	r2, r6
 8006a6e:	463b      	mov	r3, r7
 8006a70:	f7f9 fd6e 	bl	8000550 <__aeabi_dmul>
 8006a74:	a35e      	add	r3, pc, #376	; (adr r3, 8006bf0 <atan+0x300>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fbb1 	bl	80001e0 <__aeabi_dsub>
 8006a7e:	4632      	mov	r2, r6
 8006a80:	463b      	mov	r3, r7
 8006a82:	f7f9 fd65 	bl	8000550 <__aeabi_dmul>
 8006a86:	a35c      	add	r3, pc, #368	; (adr r3, 8006bf8 <atan+0x308>)
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f7f9 fba8 	bl	80001e0 <__aeabi_dsub>
 8006a90:	4632      	mov	r2, r6
 8006a92:	463b      	mov	r3, r7
 8006a94:	f7f9 fd5c 	bl	8000550 <__aeabi_dmul>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	f7f9 fba0 	bl	80001e4 <__adddf3>
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	462b      	mov	r3, r5
 8006aa8:	f7f9 fd52 	bl	8000550 <__aeabi_dmul>
 8006aac:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	d14b      	bne.n	8006b4e <atan+0x25e>
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	4629      	mov	r1, r5
 8006aba:	f7f9 fb91 	bl	80001e0 <__aeabi_dsub>
 8006abe:	e72c      	b.n	800691a <atan+0x2a>
 8006ac0:	ee10 0a10 	vmov	r0, s0
 8006ac4:	4b53      	ldr	r3, [pc, #332]	; (8006c14 <atan+0x324>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	4629      	mov	r1, r5
 8006aca:	f7f9 fb89 	bl	80001e0 <__aeabi_dsub>
 8006ace:	4b51      	ldr	r3, [pc, #324]	; (8006c14 <atan+0x324>)
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	460f      	mov	r7, r1
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	4629      	mov	r1, r5
 8006ada:	f7f9 fb83 	bl	80001e4 <__adddf3>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	f7f9 fe5d 	bl	80007a4 <__aeabi_ddiv>
 8006aea:	f04f 0a01 	mov.w	sl, #1
 8006aee:	4604      	mov	r4, r0
 8006af0:	460d      	mov	r5, r1
 8006af2:	e764      	b.n	80069be <atan+0xce>
 8006af4:	4b49      	ldr	r3, [pc, #292]	; (8006c1c <atan+0x32c>)
 8006af6:	429e      	cmp	r6, r3
 8006af8:	da1d      	bge.n	8006b36 <atan+0x246>
 8006afa:	ee10 0a10 	vmov	r0, s0
 8006afe:	4b48      	ldr	r3, [pc, #288]	; (8006c20 <atan+0x330>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	4629      	mov	r1, r5
 8006b04:	f7f9 fb6c 	bl	80001e0 <__aeabi_dsub>
 8006b08:	4b45      	ldr	r3, [pc, #276]	; (8006c20 <atan+0x330>)
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	460f      	mov	r7, r1
 8006b0e:	2200      	movs	r2, #0
 8006b10:	4620      	mov	r0, r4
 8006b12:	4629      	mov	r1, r5
 8006b14:	f7f9 fd1c 	bl	8000550 <__aeabi_dmul>
 8006b18:	4b3e      	ldr	r3, [pc, #248]	; (8006c14 <atan+0x324>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f7f9 fb62 	bl	80001e4 <__adddf3>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4630      	mov	r0, r6
 8006b26:	4639      	mov	r1, r7
 8006b28:	f7f9 fe3c 	bl	80007a4 <__aeabi_ddiv>
 8006b2c:	f04f 0a02 	mov.w	sl, #2
 8006b30:	4604      	mov	r4, r0
 8006b32:	460d      	mov	r5, r1
 8006b34:	e743      	b.n	80069be <atan+0xce>
 8006b36:	462b      	mov	r3, r5
 8006b38:	ee10 2a10 	vmov	r2, s0
 8006b3c:	4939      	ldr	r1, [pc, #228]	; (8006c24 <atan+0x334>)
 8006b3e:	2000      	movs	r0, #0
 8006b40:	f7f9 fe30 	bl	80007a4 <__aeabi_ddiv>
 8006b44:	f04f 0a03 	mov.w	sl, #3
 8006b48:	4604      	mov	r4, r0
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	e737      	b.n	80069be <atan+0xce>
 8006b4e:	4b36      	ldr	r3, [pc, #216]	; (8006c28 <atan+0x338>)
 8006b50:	4e36      	ldr	r6, [pc, #216]	; (8006c2c <atan+0x33c>)
 8006b52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006b56:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006b5a:	e9da 2300 	ldrd	r2, r3, [sl]
 8006b5e:	f7f9 fb3f 	bl	80001e0 <__aeabi_dsub>
 8006b62:	4622      	mov	r2, r4
 8006b64:	462b      	mov	r3, r5
 8006b66:	f7f9 fb3b 	bl	80001e0 <__aeabi_dsub>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006b72:	f7f9 fb35 	bl	80001e0 <__aeabi_dsub>
 8006b76:	f1bb 0f00 	cmp.w	fp, #0
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	460d      	mov	r5, r1
 8006b7e:	f6bf aed6 	bge.w	800692e <atan+0x3e>
 8006b82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b86:	461d      	mov	r5, r3
 8006b88:	e6d1      	b.n	800692e <atan+0x3e>
 8006b8a:	a51d      	add	r5, pc, #116	; (adr r5, 8006c00 <atan+0x310>)
 8006b8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b90:	e6cd      	b.n	800692e <atan+0x3e>
 8006b92:	bf00      	nop
 8006b94:	f3af 8000 	nop.w
 8006b98:	54442d18 	.word	0x54442d18
 8006b9c:	bff921fb 	.word	0xbff921fb
 8006ba0:	8800759c 	.word	0x8800759c
 8006ba4:	7e37e43c 	.word	0x7e37e43c
 8006ba8:	e322da11 	.word	0xe322da11
 8006bac:	3f90ad3a 	.word	0x3f90ad3a
 8006bb0:	24760deb 	.word	0x24760deb
 8006bb4:	3fa97b4b 	.word	0x3fa97b4b
 8006bb8:	a0d03d51 	.word	0xa0d03d51
 8006bbc:	3fb10d66 	.word	0x3fb10d66
 8006bc0:	c54c206e 	.word	0xc54c206e
 8006bc4:	3fb745cd 	.word	0x3fb745cd
 8006bc8:	920083ff 	.word	0x920083ff
 8006bcc:	3fc24924 	.word	0x3fc24924
 8006bd0:	5555550d 	.word	0x5555550d
 8006bd4:	3fd55555 	.word	0x3fd55555
 8006bd8:	2c6a6c2f 	.word	0x2c6a6c2f
 8006bdc:	bfa2b444 	.word	0xbfa2b444
 8006be0:	52defd9a 	.word	0x52defd9a
 8006be4:	3fadde2d 	.word	0x3fadde2d
 8006be8:	af749a6d 	.word	0xaf749a6d
 8006bec:	3fb3b0f2 	.word	0x3fb3b0f2
 8006bf0:	fe231671 	.word	0xfe231671
 8006bf4:	3fbc71c6 	.word	0x3fbc71c6
 8006bf8:	9998ebc4 	.word	0x9998ebc4
 8006bfc:	3fc99999 	.word	0x3fc99999
 8006c00:	54442d18 	.word	0x54442d18
 8006c04:	3ff921fb 	.word	0x3ff921fb
 8006c08:	440fffff 	.word	0x440fffff
 8006c0c:	7ff00000 	.word	0x7ff00000
 8006c10:	3fdbffff 	.word	0x3fdbffff
 8006c14:	3ff00000 	.word	0x3ff00000
 8006c18:	3ff2ffff 	.word	0x3ff2ffff
 8006c1c:	40038000 	.word	0x40038000
 8006c20:	3ff80000 	.word	0x3ff80000
 8006c24:	bff00000 	.word	0xbff00000
 8006c28:	08008268 	.word	0x08008268
 8006c2c:	08008248 	.word	0x08008248

08006c30 <cos>:
 8006c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c32:	ec53 2b10 	vmov	r2, r3, d0
 8006c36:	4826      	ldr	r0, [pc, #152]	; (8006cd0 <cos+0xa0>)
 8006c38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c3c:	4281      	cmp	r1, r0
 8006c3e:	dc06      	bgt.n	8006c4e <cos+0x1e>
 8006c40:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006cc8 <cos+0x98>
 8006c44:	b005      	add	sp, #20
 8006c46:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c4a:	f000 bbdd 	b.w	8007408 <__kernel_cos>
 8006c4e:	4821      	ldr	r0, [pc, #132]	; (8006cd4 <cos+0xa4>)
 8006c50:	4281      	cmp	r1, r0
 8006c52:	dd09      	ble.n	8006c68 <cos+0x38>
 8006c54:	ee10 0a10 	vmov	r0, s0
 8006c58:	4619      	mov	r1, r3
 8006c5a:	f7f9 fac1 	bl	80001e0 <__aeabi_dsub>
 8006c5e:	ec41 0b10 	vmov	d0, r0, r1
 8006c62:	b005      	add	sp, #20
 8006c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c68:	4668      	mov	r0, sp
 8006c6a:	f000 f8c5 	bl	8006df8 <__ieee754_rem_pio2>
 8006c6e:	f000 0003 	and.w	r0, r0, #3
 8006c72:	2801      	cmp	r0, #1
 8006c74:	d00b      	beq.n	8006c8e <cos+0x5e>
 8006c76:	2802      	cmp	r0, #2
 8006c78:	d016      	beq.n	8006ca8 <cos+0x78>
 8006c7a:	b9e0      	cbnz	r0, 8006cb6 <cos+0x86>
 8006c7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c80:	ed9d 0b00 	vldr	d0, [sp]
 8006c84:	f000 fbc0 	bl	8007408 <__kernel_cos>
 8006c88:	ec51 0b10 	vmov	r0, r1, d0
 8006c8c:	e7e7      	b.n	8006c5e <cos+0x2e>
 8006c8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c92:	ed9d 0b00 	vldr	d0, [sp]
 8006c96:	f000 ffcf 	bl	8007c38 <__kernel_sin>
 8006c9a:	ec53 2b10 	vmov	r2, r3, d0
 8006c9e:	ee10 0a10 	vmov	r0, s0
 8006ca2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006ca6:	e7da      	b.n	8006c5e <cos+0x2e>
 8006ca8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cac:	ed9d 0b00 	vldr	d0, [sp]
 8006cb0:	f000 fbaa 	bl	8007408 <__kernel_cos>
 8006cb4:	e7f1      	b.n	8006c9a <cos+0x6a>
 8006cb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cba:	ed9d 0b00 	vldr	d0, [sp]
 8006cbe:	2001      	movs	r0, #1
 8006cc0:	f000 ffba 	bl	8007c38 <__kernel_sin>
 8006cc4:	e7e0      	b.n	8006c88 <cos+0x58>
 8006cc6:	bf00      	nop
	...
 8006cd0:	3fe921fb 	.word	0x3fe921fb
 8006cd4:	7fefffff 	.word	0x7fefffff

08006cd8 <fabs>:
 8006cd8:	ec51 0b10 	vmov	r0, r1, d0
 8006cdc:	ee10 2a10 	vmov	r2, s0
 8006ce0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ce4:	ec43 2b10 	vmov	d0, r2, r3
 8006ce8:	4770      	bx	lr
 8006cea:	0000      	movs	r0, r0
 8006cec:	0000      	movs	r0, r0
	...

08006cf0 <sin>:
 8006cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cf2:	ec53 2b10 	vmov	r2, r3, d0
 8006cf6:	4828      	ldr	r0, [pc, #160]	; (8006d98 <sin+0xa8>)
 8006cf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006cfc:	4281      	cmp	r1, r0
 8006cfe:	dc07      	bgt.n	8006d10 <sin+0x20>
 8006d00:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006d90 <sin+0xa0>
 8006d04:	2000      	movs	r0, #0
 8006d06:	b005      	add	sp, #20
 8006d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d0c:	f000 bf94 	b.w	8007c38 <__kernel_sin>
 8006d10:	4822      	ldr	r0, [pc, #136]	; (8006d9c <sin+0xac>)
 8006d12:	4281      	cmp	r1, r0
 8006d14:	dd09      	ble.n	8006d2a <sin+0x3a>
 8006d16:	ee10 0a10 	vmov	r0, s0
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	f7f9 fa60 	bl	80001e0 <__aeabi_dsub>
 8006d20:	ec41 0b10 	vmov	d0, r0, r1
 8006d24:	b005      	add	sp, #20
 8006d26:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d2a:	4668      	mov	r0, sp
 8006d2c:	f000 f864 	bl	8006df8 <__ieee754_rem_pio2>
 8006d30:	f000 0003 	and.w	r0, r0, #3
 8006d34:	2801      	cmp	r0, #1
 8006d36:	d00c      	beq.n	8006d52 <sin+0x62>
 8006d38:	2802      	cmp	r0, #2
 8006d3a:	d011      	beq.n	8006d60 <sin+0x70>
 8006d3c:	b9f0      	cbnz	r0, 8006d7c <sin+0x8c>
 8006d3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d42:	ed9d 0b00 	vldr	d0, [sp]
 8006d46:	2001      	movs	r0, #1
 8006d48:	f000 ff76 	bl	8007c38 <__kernel_sin>
 8006d4c:	ec51 0b10 	vmov	r0, r1, d0
 8006d50:	e7e6      	b.n	8006d20 <sin+0x30>
 8006d52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d56:	ed9d 0b00 	vldr	d0, [sp]
 8006d5a:	f000 fb55 	bl	8007408 <__kernel_cos>
 8006d5e:	e7f5      	b.n	8006d4c <sin+0x5c>
 8006d60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d64:	ed9d 0b00 	vldr	d0, [sp]
 8006d68:	2001      	movs	r0, #1
 8006d6a:	f000 ff65 	bl	8007c38 <__kernel_sin>
 8006d6e:	ec53 2b10 	vmov	r2, r3, d0
 8006d72:	ee10 0a10 	vmov	r0, s0
 8006d76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006d7a:	e7d1      	b.n	8006d20 <sin+0x30>
 8006d7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d80:	ed9d 0b00 	vldr	d0, [sp]
 8006d84:	f000 fb40 	bl	8007408 <__kernel_cos>
 8006d88:	e7f1      	b.n	8006d6e <sin+0x7e>
 8006d8a:	bf00      	nop
 8006d8c:	f3af 8000 	nop.w
	...
 8006d98:	3fe921fb 	.word	0x3fe921fb
 8006d9c:	7fefffff 	.word	0x7fefffff

08006da0 <acosf>:
 8006da0:	b508      	push	{r3, lr}
 8006da2:	ed2d 8b02 	vpush	{d8}
 8006da6:	eeb0 8a40 	vmov.f32	s16, s0
 8006daa:	f000 fa31 	bl	8007210 <__ieee754_acosf>
 8006dae:	eeb4 8a48 	vcmp.f32	s16, s16
 8006db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db6:	eef0 8a40 	vmov.f32	s17, s0
 8006dba:	d615      	bvs.n	8006de8 <acosf+0x48>
 8006dbc:	eeb0 0a48 	vmov.f32	s0, s16
 8006dc0:	f001 f900 	bl	8007fc4 <fabsf>
 8006dc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006dc8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd0:	dd0a      	ble.n	8006de8 <acosf+0x48>
 8006dd2:	f7ff fd5b 	bl	800688c <__errno>
 8006dd6:	ecbd 8b02 	vpop	{d8}
 8006dda:	2321      	movs	r3, #33	; 0x21
 8006ddc:	6003      	str	r3, [r0, #0]
 8006dde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006de2:	4804      	ldr	r0, [pc, #16]	; (8006df4 <acosf+0x54>)
 8006de4:	f001 b8f6 	b.w	8007fd4 <nanf>
 8006de8:	eeb0 0a68 	vmov.f32	s0, s17
 8006dec:	ecbd 8b02 	vpop	{d8}
 8006df0:	bd08      	pop	{r3, pc}
 8006df2:	bf00      	nop
 8006df4:	08008288 	.word	0x08008288

08006df8 <__ieee754_rem_pio2>:
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	ed2d 8b02 	vpush	{d8}
 8006e00:	ec55 4b10 	vmov	r4, r5, d0
 8006e04:	4bca      	ldr	r3, [pc, #808]	; (8007130 <__ieee754_rem_pio2+0x338>)
 8006e06:	b08b      	sub	sp, #44	; 0x2c
 8006e08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006e0c:	4598      	cmp	r8, r3
 8006e0e:	4682      	mov	sl, r0
 8006e10:	9502      	str	r5, [sp, #8]
 8006e12:	dc08      	bgt.n	8006e26 <__ieee754_rem_pio2+0x2e>
 8006e14:	2200      	movs	r2, #0
 8006e16:	2300      	movs	r3, #0
 8006e18:	ed80 0b00 	vstr	d0, [r0]
 8006e1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006e20:	f04f 0b00 	mov.w	fp, #0
 8006e24:	e028      	b.n	8006e78 <__ieee754_rem_pio2+0x80>
 8006e26:	4bc3      	ldr	r3, [pc, #780]	; (8007134 <__ieee754_rem_pio2+0x33c>)
 8006e28:	4598      	cmp	r8, r3
 8006e2a:	dc78      	bgt.n	8006f1e <__ieee754_rem_pio2+0x126>
 8006e2c:	9b02      	ldr	r3, [sp, #8]
 8006e2e:	4ec2      	ldr	r6, [pc, #776]	; (8007138 <__ieee754_rem_pio2+0x340>)
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	ee10 0a10 	vmov	r0, s0
 8006e36:	a3b0      	add	r3, pc, #704	; (adr r3, 80070f8 <__ieee754_rem_pio2+0x300>)
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	dd39      	ble.n	8006eb4 <__ieee754_rem_pio2+0xbc>
 8006e40:	f7f9 f9ce 	bl	80001e0 <__aeabi_dsub>
 8006e44:	45b0      	cmp	r8, r6
 8006e46:	4604      	mov	r4, r0
 8006e48:	460d      	mov	r5, r1
 8006e4a:	d01b      	beq.n	8006e84 <__ieee754_rem_pio2+0x8c>
 8006e4c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007100 <__ieee754_rem_pio2+0x308>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f7f9 f9c5 	bl	80001e0 <__aeabi_dsub>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	e9ca 2300 	strd	r2, r3, [sl]
 8006e5e:	4620      	mov	r0, r4
 8006e60:	4629      	mov	r1, r5
 8006e62:	f7f9 f9bd 	bl	80001e0 <__aeabi_dsub>
 8006e66:	a3a6      	add	r3, pc, #664	; (adr r3, 8007100 <__ieee754_rem_pio2+0x308>)
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	f7f9 f9b8 	bl	80001e0 <__aeabi_dsub>
 8006e70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006e74:	f04f 0b01 	mov.w	fp, #1
 8006e78:	4658      	mov	r0, fp
 8006e7a:	b00b      	add	sp, #44	; 0x2c
 8006e7c:	ecbd 8b02 	vpop	{d8}
 8006e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e84:	a3a0      	add	r3, pc, #640	; (adr r3, 8007108 <__ieee754_rem_pio2+0x310>)
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	f7f9 f9a9 	bl	80001e0 <__aeabi_dsub>
 8006e8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007110 <__ieee754_rem_pio2+0x318>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	4604      	mov	r4, r0
 8006e96:	460d      	mov	r5, r1
 8006e98:	f7f9 f9a2 	bl	80001e0 <__aeabi_dsub>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	e9ca 2300 	strd	r2, r3, [sl]
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7f9 f99a 	bl	80001e0 <__aeabi_dsub>
 8006eac:	a398      	add	r3, pc, #608	; (adr r3, 8007110 <__ieee754_rem_pio2+0x318>)
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	e7db      	b.n	8006e6c <__ieee754_rem_pio2+0x74>
 8006eb4:	f7f9 f996 	bl	80001e4 <__adddf3>
 8006eb8:	45b0      	cmp	r8, r6
 8006eba:	4604      	mov	r4, r0
 8006ebc:	460d      	mov	r5, r1
 8006ebe:	d016      	beq.n	8006eee <__ieee754_rem_pio2+0xf6>
 8006ec0:	a38f      	add	r3, pc, #572	; (adr r3, 8007100 <__ieee754_rem_pio2+0x308>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f7f9 f98d 	bl	80001e4 <__adddf3>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	e9ca 2300 	strd	r2, r3, [sl]
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	f7f9 f983 	bl	80001e0 <__aeabi_dsub>
 8006eda:	a389      	add	r3, pc, #548	; (adr r3, 8007100 <__ieee754_rem_pio2+0x308>)
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	f7f9 f980 	bl	80001e4 <__adddf3>
 8006ee4:	f04f 3bff 	mov.w	fp, #4294967295
 8006ee8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006eec:	e7c4      	b.n	8006e78 <__ieee754_rem_pio2+0x80>
 8006eee:	a386      	add	r3, pc, #536	; (adr r3, 8007108 <__ieee754_rem_pio2+0x310>)
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	f7f9 f976 	bl	80001e4 <__adddf3>
 8006ef8:	a385      	add	r3, pc, #532	; (adr r3, 8007110 <__ieee754_rem_pio2+0x318>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	4604      	mov	r4, r0
 8006f00:	460d      	mov	r5, r1
 8006f02:	f7f9 f96f 	bl	80001e4 <__adddf3>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	e9ca 2300 	strd	r2, r3, [sl]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	4629      	mov	r1, r5
 8006f12:	f7f9 f965 	bl	80001e0 <__aeabi_dsub>
 8006f16:	a37e      	add	r3, pc, #504	; (adr r3, 8007110 <__ieee754_rem_pio2+0x318>)
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	e7e0      	b.n	8006ee0 <__ieee754_rem_pio2+0xe8>
 8006f1e:	4b87      	ldr	r3, [pc, #540]	; (800713c <__ieee754_rem_pio2+0x344>)
 8006f20:	4598      	cmp	r8, r3
 8006f22:	f300 80d9 	bgt.w	80070d8 <__ieee754_rem_pio2+0x2e0>
 8006f26:	f7ff fed7 	bl	8006cd8 <fabs>
 8006f2a:	ec55 4b10 	vmov	r4, r5, d0
 8006f2e:	ee10 0a10 	vmov	r0, s0
 8006f32:	a379      	add	r3, pc, #484	; (adr r3, 8007118 <__ieee754_rem_pio2+0x320>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f7f9 fb09 	bl	8000550 <__aeabi_dmul>
 8006f3e:	4b80      	ldr	r3, [pc, #512]	; (8007140 <__ieee754_rem_pio2+0x348>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	f7f9 f94f 	bl	80001e4 <__adddf3>
 8006f46:	f7f9 fd9d 	bl	8000a84 <__aeabi_d2iz>
 8006f4a:	4683      	mov	fp, r0
 8006f4c:	f7f9 fa96 	bl	800047c <__aeabi_i2d>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	ec43 2b18 	vmov	d8, r2, r3
 8006f58:	a367      	add	r3, pc, #412	; (adr r3, 80070f8 <__ieee754_rem_pio2+0x300>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 faf7 	bl	8000550 <__aeabi_dmul>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4620      	mov	r0, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	f7f9 f939 	bl	80001e0 <__aeabi_dsub>
 8006f6e:	a364      	add	r3, pc, #400	; (adr r3, 8007100 <__ieee754_rem_pio2+0x308>)
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	4606      	mov	r6, r0
 8006f76:	460f      	mov	r7, r1
 8006f78:	ec51 0b18 	vmov	r0, r1, d8
 8006f7c:	f7f9 fae8 	bl	8000550 <__aeabi_dmul>
 8006f80:	f1bb 0f1f 	cmp.w	fp, #31
 8006f84:	4604      	mov	r4, r0
 8006f86:	460d      	mov	r5, r1
 8006f88:	dc0d      	bgt.n	8006fa6 <__ieee754_rem_pio2+0x1ae>
 8006f8a:	4b6e      	ldr	r3, [pc, #440]	; (8007144 <__ieee754_rem_pio2+0x34c>)
 8006f8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f94:	4543      	cmp	r3, r8
 8006f96:	d006      	beq.n	8006fa6 <__ieee754_rem_pio2+0x1ae>
 8006f98:	4622      	mov	r2, r4
 8006f9a:	462b      	mov	r3, r5
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	f7f9 f91e 	bl	80001e0 <__aeabi_dsub>
 8006fa4:	e00f      	b.n	8006fc6 <__ieee754_rem_pio2+0x1ce>
 8006fa6:	462b      	mov	r3, r5
 8006fa8:	4622      	mov	r2, r4
 8006faa:	4630      	mov	r0, r6
 8006fac:	4639      	mov	r1, r7
 8006fae:	f7f9 f917 	bl	80001e0 <__aeabi_dsub>
 8006fb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006fb6:	9303      	str	r3, [sp, #12]
 8006fb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006fbc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006fc0:	f1b8 0f10 	cmp.w	r8, #16
 8006fc4:	dc02      	bgt.n	8006fcc <__ieee754_rem_pio2+0x1d4>
 8006fc6:	e9ca 0100 	strd	r0, r1, [sl]
 8006fca:	e039      	b.n	8007040 <__ieee754_rem_pio2+0x248>
 8006fcc:	a34e      	add	r3, pc, #312	; (adr r3, 8007108 <__ieee754_rem_pio2+0x310>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	ec51 0b18 	vmov	r0, r1, d8
 8006fd6:	f7f9 fabb 	bl	8000550 <__aeabi_dmul>
 8006fda:	4604      	mov	r4, r0
 8006fdc:	460d      	mov	r5, r1
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	f7f9 f8fb 	bl	80001e0 <__aeabi_dsub>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4680      	mov	r8, r0
 8006ff0:	4689      	mov	r9, r1
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	f7f9 f8f3 	bl	80001e0 <__aeabi_dsub>
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	f7f9 f8ef 	bl	80001e0 <__aeabi_dsub>
 8007002:	a343      	add	r3, pc, #268	; (adr r3, 8007110 <__ieee754_rem_pio2+0x318>)
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	4604      	mov	r4, r0
 800700a:	460d      	mov	r5, r1
 800700c:	ec51 0b18 	vmov	r0, r1, d8
 8007010:	f7f9 fa9e 	bl	8000550 <__aeabi_dmul>
 8007014:	4622      	mov	r2, r4
 8007016:	462b      	mov	r3, r5
 8007018:	f7f9 f8e2 	bl	80001e0 <__aeabi_dsub>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4604      	mov	r4, r0
 8007022:	460d      	mov	r5, r1
 8007024:	4640      	mov	r0, r8
 8007026:	4649      	mov	r1, r9
 8007028:	f7f9 f8da 	bl	80001e0 <__aeabi_dsub>
 800702c:	9a03      	ldr	r2, [sp, #12]
 800702e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b31      	cmp	r3, #49	; 0x31
 8007036:	dc24      	bgt.n	8007082 <__ieee754_rem_pio2+0x28a>
 8007038:	e9ca 0100 	strd	r0, r1, [sl]
 800703c:	4646      	mov	r6, r8
 800703e:	464f      	mov	r7, r9
 8007040:	e9da 8900 	ldrd	r8, r9, [sl]
 8007044:	4630      	mov	r0, r6
 8007046:	4642      	mov	r2, r8
 8007048:	464b      	mov	r3, r9
 800704a:	4639      	mov	r1, r7
 800704c:	f7f9 f8c8 	bl	80001e0 <__aeabi_dsub>
 8007050:	462b      	mov	r3, r5
 8007052:	4622      	mov	r2, r4
 8007054:	f7f9 f8c4 	bl	80001e0 <__aeabi_dsub>
 8007058:	9b02      	ldr	r3, [sp, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007060:	f6bf af0a 	bge.w	8006e78 <__ieee754_rem_pio2+0x80>
 8007064:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007068:	f8ca 3004 	str.w	r3, [sl, #4]
 800706c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007070:	f8ca 8000 	str.w	r8, [sl]
 8007074:	f8ca 0008 	str.w	r0, [sl, #8]
 8007078:	f8ca 300c 	str.w	r3, [sl, #12]
 800707c:	f1cb 0b00 	rsb	fp, fp, #0
 8007080:	e6fa      	b.n	8006e78 <__ieee754_rem_pio2+0x80>
 8007082:	a327      	add	r3, pc, #156	; (adr r3, 8007120 <__ieee754_rem_pio2+0x328>)
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	ec51 0b18 	vmov	r0, r1, d8
 800708c:	f7f9 fa60 	bl	8000550 <__aeabi_dmul>
 8007090:	4604      	mov	r4, r0
 8007092:	460d      	mov	r5, r1
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4640      	mov	r0, r8
 800709a:	4649      	mov	r1, r9
 800709c:	f7f9 f8a0 	bl	80001e0 <__aeabi_dsub>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4606      	mov	r6, r0
 80070a6:	460f      	mov	r7, r1
 80070a8:	4640      	mov	r0, r8
 80070aa:	4649      	mov	r1, r9
 80070ac:	f7f9 f898 	bl	80001e0 <__aeabi_dsub>
 80070b0:	4622      	mov	r2, r4
 80070b2:	462b      	mov	r3, r5
 80070b4:	f7f9 f894 	bl	80001e0 <__aeabi_dsub>
 80070b8:	a31b      	add	r3, pc, #108	; (adr r3, 8007128 <__ieee754_rem_pio2+0x330>)
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	4604      	mov	r4, r0
 80070c0:	460d      	mov	r5, r1
 80070c2:	ec51 0b18 	vmov	r0, r1, d8
 80070c6:	f7f9 fa43 	bl	8000550 <__aeabi_dmul>
 80070ca:	4622      	mov	r2, r4
 80070cc:	462b      	mov	r3, r5
 80070ce:	f7f9 f887 	bl	80001e0 <__aeabi_dsub>
 80070d2:	4604      	mov	r4, r0
 80070d4:	460d      	mov	r5, r1
 80070d6:	e75f      	b.n	8006f98 <__ieee754_rem_pio2+0x1a0>
 80070d8:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <__ieee754_rem_pio2+0x350>)
 80070da:	4598      	cmp	r8, r3
 80070dc:	dd36      	ble.n	800714c <__ieee754_rem_pio2+0x354>
 80070de:	ee10 2a10 	vmov	r2, s0
 80070e2:	462b      	mov	r3, r5
 80070e4:	4620      	mov	r0, r4
 80070e6:	4629      	mov	r1, r5
 80070e8:	f7f9 f87a 	bl	80001e0 <__aeabi_dsub>
 80070ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80070f0:	e9ca 0100 	strd	r0, r1, [sl]
 80070f4:	e694      	b.n	8006e20 <__ieee754_rem_pio2+0x28>
 80070f6:	bf00      	nop
 80070f8:	54400000 	.word	0x54400000
 80070fc:	3ff921fb 	.word	0x3ff921fb
 8007100:	1a626331 	.word	0x1a626331
 8007104:	3dd0b461 	.word	0x3dd0b461
 8007108:	1a600000 	.word	0x1a600000
 800710c:	3dd0b461 	.word	0x3dd0b461
 8007110:	2e037073 	.word	0x2e037073
 8007114:	3ba3198a 	.word	0x3ba3198a
 8007118:	6dc9c883 	.word	0x6dc9c883
 800711c:	3fe45f30 	.word	0x3fe45f30
 8007120:	2e000000 	.word	0x2e000000
 8007124:	3ba3198a 	.word	0x3ba3198a
 8007128:	252049c1 	.word	0x252049c1
 800712c:	397b839a 	.word	0x397b839a
 8007130:	3fe921fb 	.word	0x3fe921fb
 8007134:	4002d97b 	.word	0x4002d97b
 8007138:	3ff921fb 	.word	0x3ff921fb
 800713c:	413921fb 	.word	0x413921fb
 8007140:	3fe00000 	.word	0x3fe00000
 8007144:	0800828c 	.word	0x0800828c
 8007148:	7fefffff 	.word	0x7fefffff
 800714c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007150:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007154:	ee10 0a10 	vmov	r0, s0
 8007158:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800715c:	ee10 6a10 	vmov	r6, s0
 8007160:	460f      	mov	r7, r1
 8007162:	f7f9 fc8f 	bl	8000a84 <__aeabi_d2iz>
 8007166:	f7f9 f989 	bl	800047c <__aeabi_i2d>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4630      	mov	r0, r6
 8007170:	4639      	mov	r1, r7
 8007172:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007176:	f7f9 f833 	bl	80001e0 <__aeabi_dsub>
 800717a:	4b23      	ldr	r3, [pc, #140]	; (8007208 <__ieee754_rem_pio2+0x410>)
 800717c:	2200      	movs	r2, #0
 800717e:	f7f9 f9e7 	bl	8000550 <__aeabi_dmul>
 8007182:	460f      	mov	r7, r1
 8007184:	4606      	mov	r6, r0
 8007186:	f7f9 fc7d 	bl	8000a84 <__aeabi_d2iz>
 800718a:	f7f9 f977 	bl	800047c <__aeabi_i2d>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4630      	mov	r0, r6
 8007194:	4639      	mov	r1, r7
 8007196:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800719a:	f7f9 f821 	bl	80001e0 <__aeabi_dsub>
 800719e:	4b1a      	ldr	r3, [pc, #104]	; (8007208 <__ieee754_rem_pio2+0x410>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	f7f9 f9d5 	bl	8000550 <__aeabi_dmul>
 80071a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80071aa:	ad04      	add	r5, sp, #16
 80071ac:	f04f 0803 	mov.w	r8, #3
 80071b0:	46a9      	mov	r9, r5
 80071b2:	2600      	movs	r6, #0
 80071b4:	2700      	movs	r7, #0
 80071b6:	4632      	mov	r2, r6
 80071b8:	463b      	mov	r3, r7
 80071ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80071be:	46c3      	mov	fp, r8
 80071c0:	3d08      	subs	r5, #8
 80071c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80071c6:	f7f9 fc2b 	bl	8000a20 <__aeabi_dcmpeq>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d1f3      	bne.n	80071b6 <__ieee754_rem_pio2+0x3be>
 80071ce:	4b0f      	ldr	r3, [pc, #60]	; (800720c <__ieee754_rem_pio2+0x414>)
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	2302      	movs	r3, #2
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	4622      	mov	r2, r4
 80071d8:	465b      	mov	r3, fp
 80071da:	4651      	mov	r1, sl
 80071dc:	4648      	mov	r0, r9
 80071de:	f000 f9db 	bl	8007598 <__kernel_rem_pio2>
 80071e2:	9b02      	ldr	r3, [sp, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	4683      	mov	fp, r0
 80071e8:	f6bf ae46 	bge.w	8006e78 <__ieee754_rem_pio2+0x80>
 80071ec:	e9da 2100 	ldrd	r2, r1, [sl]
 80071f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071f4:	e9ca 2300 	strd	r2, r3, [sl]
 80071f8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80071fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007200:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007204:	e73a      	b.n	800707c <__ieee754_rem_pio2+0x284>
 8007206:	bf00      	nop
 8007208:	41700000 	.word	0x41700000
 800720c:	0800830c 	.word	0x0800830c

08007210 <__ieee754_acosf>:
 8007210:	b508      	push	{r3, lr}
 8007212:	ee10 3a10 	vmov	r3, s0
 8007216:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800721a:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800721e:	ed2d 8b0c 	vpush	{d8-d13}
 8007222:	d10a      	bne.n	800723a <__ieee754_acosf+0x2a>
 8007224:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80073bc <__ieee754_acosf+0x1ac>
 8007228:	ed9f 8a65 	vldr	s16, [pc, #404]	; 80073c0 <__ieee754_acosf+0x1b0>
 800722c:	2b00      	cmp	r3, #0
 800722e:	bfd8      	it	le
 8007230:	eeb0 0a48 	vmovle.f32	s0, s16
 8007234:	ecbd 8b0c 	vpop	{d8-d13}
 8007238:	bd08      	pop	{r3, pc}
 800723a:	dd04      	ble.n	8007246 <__ieee754_acosf+0x36>
 800723c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8007240:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007244:	e7f6      	b.n	8007234 <__ieee754_acosf+0x24>
 8007246:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800724a:	da3c      	bge.n	80072c6 <__ieee754_acosf+0xb6>
 800724c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8007250:	f340 80b1 	ble.w	80073b6 <__ieee754_acosf+0x1a6>
 8007254:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007258:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80073c4 <__ieee754_acosf+0x1b4>
 800725c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80073c8 <__ieee754_acosf+0x1b8>
 8007260:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 80073cc <__ieee754_acosf+0x1bc>
 8007264:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 80073d0 <__ieee754_acosf+0x1c0>
 8007268:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800726c:	eddf 6a59 	vldr	s13, [pc, #356]	; 80073d4 <__ieee754_acosf+0x1c4>
 8007270:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007274:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80073d8 <__ieee754_acosf+0x1c8>
 8007278:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800727c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80073dc <__ieee754_acosf+0x1cc>
 8007280:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007284:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80073e0 <__ieee754_acosf+0x1d0>
 8007288:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800728c:	eddf 6a55 	vldr	s13, [pc, #340]	; 80073e4 <__ieee754_acosf+0x1d4>
 8007290:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8007294:	eddf 6a54 	vldr	s13, [pc, #336]	; 80073e8 <__ieee754_acosf+0x1d8>
 8007298:	eee6 6a27 	vfma.f32	s13, s12, s15
 800729c:	ed9f 6a53 	vldr	s12, [pc, #332]	; 80073ec <__ieee754_acosf+0x1dc>
 80072a0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80072a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80072b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072b4:	eea0 8a67 	vfms.f32	s16, s0, s15
 80072b8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80073f0 <__ieee754_acosf+0x1e0>
 80072bc:	ee30 0a48 	vsub.f32	s0, s0, s16
 80072c0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80072c4:	e7b6      	b.n	8007234 <__ieee754_acosf+0x24>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	eddf da3e 	vldr	s27, [pc, #248]	; 80073c4 <__ieee754_acosf+0x1b4>
 80072cc:	eddf ca3e 	vldr	s25, [pc, #248]	; 80073c8 <__ieee754_acosf+0x1b8>
 80072d0:	ed9f ca40 	vldr	s24, [pc, #256]	; 80073d4 <__ieee754_acosf+0x1c4>
 80072d4:	eddf ba40 	vldr	s23, [pc, #256]	; 80073d8 <__ieee754_acosf+0x1c8>
 80072d8:	ed9f ba40 	vldr	s22, [pc, #256]	; 80073dc <__ieee754_acosf+0x1cc>
 80072dc:	eddf 8a40 	vldr	s17, [pc, #256]	; 80073e0 <__ieee754_acosf+0x1d0>
 80072e0:	ed9f da40 	vldr	s26, [pc, #256]	; 80073e4 <__ieee754_acosf+0x1d4>
 80072e4:	eddf aa39 	vldr	s21, [pc, #228]	; 80073cc <__ieee754_acosf+0x1bc>
 80072e8:	ed9f aa3f 	vldr	s20, [pc, #252]	; 80073e8 <__ieee754_acosf+0x1d8>
 80072ec:	eddf 9a3f 	vldr	s19, [pc, #252]	; 80073ec <__ieee754_acosf+0x1dc>
 80072f0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80072f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80072f8:	da28      	bge.n	800734c <__ieee754_acosf+0x13c>
 80072fa:	ee30 0a09 	vadd.f32	s0, s0, s18
 80072fe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007302:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8007306:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800730a:	eeac ca80 	vfma.f32	s24, s25, s0
 800730e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8007312:	eeec ba00 	vfma.f32	s23, s24, s0
 8007316:	eeea 9a00 	vfma.f32	s19, s20, s0
 800731a:	eeab ba80 	vfma.f32	s22, s23, s0
 800731e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8007322:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8007326:	ee68 8a80 	vmul.f32	s17, s17, s0
 800732a:	f000 f869 	bl	8007400 <__ieee754_sqrtf>
 800732e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8007332:	eddf 7a30 	vldr	s15, [pc, #192]	; 80073f4 <__ieee754_acosf+0x1e4>
 8007336:	eee0 7a07 	vfma.f32	s15, s0, s14
 800733a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800733e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007342:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80073f8 <__ieee754_acosf+0x1e8>
 8007346:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800734a:	e773      	b.n	8007234 <__ieee754_acosf+0x24>
 800734c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8007350:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007354:	eeb0 0a48 	vmov.f32	s0, s16
 8007358:	f000 f852 	bl	8007400 <__ieee754_sqrtf>
 800735c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8007360:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8007364:	eeac ca88 	vfma.f32	s24, s25, s16
 8007368:	eeaa aa88 	vfma.f32	s20, s21, s16
 800736c:	eeec ba08 	vfma.f32	s23, s24, s16
 8007370:	ee10 3a10 	vmov	r3, s0
 8007374:	eeab ba88 	vfma.f32	s22, s23, s16
 8007378:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800737c:	f023 030f 	bic.w	r3, r3, #15
 8007380:	eeea 9a08 	vfma.f32	s19, s20, s16
 8007384:	ee07 3a90 	vmov	s15, r3
 8007388:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800738c:	eeb0 6a48 	vmov.f32	s12, s16
 8007390:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8007394:	eea9 9a88 	vfma.f32	s18, s19, s16
 8007398:	ee70 6a27 	vadd.f32	s13, s0, s15
 800739c:	ee68 8a88 	vmul.f32	s17, s17, s16
 80073a0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80073a4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80073a8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80073ac:	ee37 0a87 	vadd.f32	s0, s15, s14
 80073b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80073b4:	e73e      	b.n	8007234 <__ieee754_acosf+0x24>
 80073b6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80073fc <__ieee754_acosf+0x1ec>
 80073ba:	e73b      	b.n	8007234 <__ieee754_acosf+0x24>
 80073bc:	00000000 	.word	0x00000000
 80073c0:	40490fdb 	.word	0x40490fdb
 80073c4:	3811ef08 	.word	0x3811ef08
 80073c8:	3a4f7f04 	.word	0x3a4f7f04
 80073cc:	bf303361 	.word	0xbf303361
 80073d0:	33a22168 	.word	0x33a22168
 80073d4:	bd241146 	.word	0xbd241146
 80073d8:	3e4e0aa8 	.word	0x3e4e0aa8
 80073dc:	bea6b090 	.word	0xbea6b090
 80073e0:	3e2aaaab 	.word	0x3e2aaaab
 80073e4:	3d9dc62e 	.word	0x3d9dc62e
 80073e8:	4001572d 	.word	0x4001572d
 80073ec:	c019d139 	.word	0xc019d139
 80073f0:	3fc90fda 	.word	0x3fc90fda
 80073f4:	b3a22168 	.word	0xb3a22168
 80073f8:	40490fda 	.word	0x40490fda
 80073fc:	3fc90fdb 	.word	0x3fc90fdb

08007400 <__ieee754_sqrtf>:
 8007400:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007404:	4770      	bx	lr
	...

08007408 <__kernel_cos>:
 8007408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740c:	ec57 6b10 	vmov	r6, r7, d0
 8007410:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007414:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007418:	ed8d 1b00 	vstr	d1, [sp]
 800741c:	da07      	bge.n	800742e <__kernel_cos+0x26>
 800741e:	ee10 0a10 	vmov	r0, s0
 8007422:	4639      	mov	r1, r7
 8007424:	f7f9 fb2e 	bl	8000a84 <__aeabi_d2iz>
 8007428:	2800      	cmp	r0, #0
 800742a:	f000 8088 	beq.w	800753e <__kernel_cos+0x136>
 800742e:	4632      	mov	r2, r6
 8007430:	463b      	mov	r3, r7
 8007432:	4630      	mov	r0, r6
 8007434:	4639      	mov	r1, r7
 8007436:	f7f9 f88b 	bl	8000550 <__aeabi_dmul>
 800743a:	4b51      	ldr	r3, [pc, #324]	; (8007580 <__kernel_cos+0x178>)
 800743c:	2200      	movs	r2, #0
 800743e:	4604      	mov	r4, r0
 8007440:	460d      	mov	r5, r1
 8007442:	f7f9 f885 	bl	8000550 <__aeabi_dmul>
 8007446:	a340      	add	r3, pc, #256	; (adr r3, 8007548 <__kernel_cos+0x140>)
 8007448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744c:	4682      	mov	sl, r0
 800744e:	468b      	mov	fp, r1
 8007450:	4620      	mov	r0, r4
 8007452:	4629      	mov	r1, r5
 8007454:	f7f9 f87c 	bl	8000550 <__aeabi_dmul>
 8007458:	a33d      	add	r3, pc, #244	; (adr r3, 8007550 <__kernel_cos+0x148>)
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	f7f8 fec1 	bl	80001e4 <__adddf3>
 8007462:	4622      	mov	r2, r4
 8007464:	462b      	mov	r3, r5
 8007466:	f7f9 f873 	bl	8000550 <__aeabi_dmul>
 800746a:	a33b      	add	r3, pc, #236	; (adr r3, 8007558 <__kernel_cos+0x150>)
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	f7f8 feb6 	bl	80001e0 <__aeabi_dsub>
 8007474:	4622      	mov	r2, r4
 8007476:	462b      	mov	r3, r5
 8007478:	f7f9 f86a 	bl	8000550 <__aeabi_dmul>
 800747c:	a338      	add	r3, pc, #224	; (adr r3, 8007560 <__kernel_cos+0x158>)
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	f7f8 feaf 	bl	80001e4 <__adddf3>
 8007486:	4622      	mov	r2, r4
 8007488:	462b      	mov	r3, r5
 800748a:	f7f9 f861 	bl	8000550 <__aeabi_dmul>
 800748e:	a336      	add	r3, pc, #216	; (adr r3, 8007568 <__kernel_cos+0x160>)
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	f7f8 fea4 	bl	80001e0 <__aeabi_dsub>
 8007498:	4622      	mov	r2, r4
 800749a:	462b      	mov	r3, r5
 800749c:	f7f9 f858 	bl	8000550 <__aeabi_dmul>
 80074a0:	a333      	add	r3, pc, #204	; (adr r3, 8007570 <__kernel_cos+0x168>)
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	f7f8 fe9d 	bl	80001e4 <__adddf3>
 80074aa:	4622      	mov	r2, r4
 80074ac:	462b      	mov	r3, r5
 80074ae:	f7f9 f84f 	bl	8000550 <__aeabi_dmul>
 80074b2:	4622      	mov	r2, r4
 80074b4:	462b      	mov	r3, r5
 80074b6:	f7f9 f84b 	bl	8000550 <__aeabi_dmul>
 80074ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074be:	4604      	mov	r4, r0
 80074c0:	460d      	mov	r5, r1
 80074c2:	4630      	mov	r0, r6
 80074c4:	4639      	mov	r1, r7
 80074c6:	f7f9 f843 	bl	8000550 <__aeabi_dmul>
 80074ca:	460b      	mov	r3, r1
 80074cc:	4602      	mov	r2, r0
 80074ce:	4629      	mov	r1, r5
 80074d0:	4620      	mov	r0, r4
 80074d2:	f7f8 fe85 	bl	80001e0 <__aeabi_dsub>
 80074d6:	4b2b      	ldr	r3, [pc, #172]	; (8007584 <__kernel_cos+0x17c>)
 80074d8:	4598      	cmp	r8, r3
 80074da:	4606      	mov	r6, r0
 80074dc:	460f      	mov	r7, r1
 80074de:	dc10      	bgt.n	8007502 <__kernel_cos+0xfa>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4650      	mov	r0, sl
 80074e6:	4659      	mov	r1, fp
 80074e8:	f7f8 fe7a 	bl	80001e0 <__aeabi_dsub>
 80074ec:	460b      	mov	r3, r1
 80074ee:	4926      	ldr	r1, [pc, #152]	; (8007588 <__kernel_cos+0x180>)
 80074f0:	4602      	mov	r2, r0
 80074f2:	2000      	movs	r0, #0
 80074f4:	f7f8 fe74 	bl	80001e0 <__aeabi_dsub>
 80074f8:	ec41 0b10 	vmov	d0, r0, r1
 80074fc:	b003      	add	sp, #12
 80074fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007502:	4b22      	ldr	r3, [pc, #136]	; (800758c <__kernel_cos+0x184>)
 8007504:	4920      	ldr	r1, [pc, #128]	; (8007588 <__kernel_cos+0x180>)
 8007506:	4598      	cmp	r8, r3
 8007508:	bfcc      	ite	gt
 800750a:	4d21      	ldrgt	r5, [pc, #132]	; (8007590 <__kernel_cos+0x188>)
 800750c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007510:	2400      	movs	r4, #0
 8007512:	4622      	mov	r2, r4
 8007514:	462b      	mov	r3, r5
 8007516:	2000      	movs	r0, #0
 8007518:	f7f8 fe62 	bl	80001e0 <__aeabi_dsub>
 800751c:	4622      	mov	r2, r4
 800751e:	4680      	mov	r8, r0
 8007520:	4689      	mov	r9, r1
 8007522:	462b      	mov	r3, r5
 8007524:	4650      	mov	r0, sl
 8007526:	4659      	mov	r1, fp
 8007528:	f7f8 fe5a 	bl	80001e0 <__aeabi_dsub>
 800752c:	4632      	mov	r2, r6
 800752e:	463b      	mov	r3, r7
 8007530:	f7f8 fe56 	bl	80001e0 <__aeabi_dsub>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4640      	mov	r0, r8
 800753a:	4649      	mov	r1, r9
 800753c:	e7da      	b.n	80074f4 <__kernel_cos+0xec>
 800753e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007578 <__kernel_cos+0x170>
 8007542:	e7db      	b.n	80074fc <__kernel_cos+0xf4>
 8007544:	f3af 8000 	nop.w
 8007548:	be8838d4 	.word	0xbe8838d4
 800754c:	bda8fae9 	.word	0xbda8fae9
 8007550:	bdb4b1c4 	.word	0xbdb4b1c4
 8007554:	3e21ee9e 	.word	0x3e21ee9e
 8007558:	809c52ad 	.word	0x809c52ad
 800755c:	3e927e4f 	.word	0x3e927e4f
 8007560:	19cb1590 	.word	0x19cb1590
 8007564:	3efa01a0 	.word	0x3efa01a0
 8007568:	16c15177 	.word	0x16c15177
 800756c:	3f56c16c 	.word	0x3f56c16c
 8007570:	5555554c 	.word	0x5555554c
 8007574:	3fa55555 	.word	0x3fa55555
 8007578:	00000000 	.word	0x00000000
 800757c:	3ff00000 	.word	0x3ff00000
 8007580:	3fe00000 	.word	0x3fe00000
 8007584:	3fd33332 	.word	0x3fd33332
 8007588:	3ff00000 	.word	0x3ff00000
 800758c:	3fe90000 	.word	0x3fe90000
 8007590:	3fd20000 	.word	0x3fd20000
 8007594:	00000000 	.word	0x00000000

08007598 <__kernel_rem_pio2>:
 8007598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759c:	ed2d 8b02 	vpush	{d8}
 80075a0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80075a4:	f112 0f14 	cmn.w	r2, #20
 80075a8:	9308      	str	r3, [sp, #32]
 80075aa:	9101      	str	r1, [sp, #4]
 80075ac:	4bc4      	ldr	r3, [pc, #784]	; (80078c0 <__kernel_rem_pio2+0x328>)
 80075ae:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80075b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80075b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075b6:	9302      	str	r3, [sp, #8]
 80075b8:	9b08      	ldr	r3, [sp, #32]
 80075ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80075be:	bfa8      	it	ge
 80075c0:	1ed4      	subge	r4, r2, #3
 80075c2:	9306      	str	r3, [sp, #24]
 80075c4:	bfb2      	itee	lt
 80075c6:	2400      	movlt	r4, #0
 80075c8:	2318      	movge	r3, #24
 80075ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80075ce:	f06f 0317 	mvn.w	r3, #23
 80075d2:	fb04 3303 	mla	r3, r4, r3, r3
 80075d6:	eb03 0a02 	add.w	sl, r3, r2
 80075da:	9b02      	ldr	r3, [sp, #8]
 80075dc:	9a06      	ldr	r2, [sp, #24]
 80075de:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80078b0 <__kernel_rem_pio2+0x318>
 80075e2:	eb03 0802 	add.w	r8, r3, r2
 80075e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80075e8:	1aa7      	subs	r7, r4, r2
 80075ea:	ae22      	add	r6, sp, #136	; 0x88
 80075ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80075f0:	2500      	movs	r5, #0
 80075f2:	4545      	cmp	r5, r8
 80075f4:	dd13      	ble.n	800761e <__kernel_rem_pio2+0x86>
 80075f6:	9b08      	ldr	r3, [sp, #32]
 80075f8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80078b0 <__kernel_rem_pio2+0x318>
 80075fc:	aa22      	add	r2, sp, #136	; 0x88
 80075fe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007602:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007606:	f04f 0800 	mov.w	r8, #0
 800760a:	9b02      	ldr	r3, [sp, #8]
 800760c:	4598      	cmp	r8, r3
 800760e:	dc2f      	bgt.n	8007670 <__kernel_rem_pio2+0xd8>
 8007610:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007614:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007618:	462f      	mov	r7, r5
 800761a:	2600      	movs	r6, #0
 800761c:	e01b      	b.n	8007656 <__kernel_rem_pio2+0xbe>
 800761e:	42ef      	cmn	r7, r5
 8007620:	d407      	bmi.n	8007632 <__kernel_rem_pio2+0x9a>
 8007622:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007626:	f7f8 ff29 	bl	800047c <__aeabi_i2d>
 800762a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800762e:	3501      	adds	r5, #1
 8007630:	e7df      	b.n	80075f2 <__kernel_rem_pio2+0x5a>
 8007632:	ec51 0b18 	vmov	r0, r1, d8
 8007636:	e7f8      	b.n	800762a <__kernel_rem_pio2+0x92>
 8007638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800763c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007640:	f7f8 ff86 	bl	8000550 <__aeabi_dmul>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800764c:	f7f8 fdca 	bl	80001e4 <__adddf3>
 8007650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007654:	3601      	adds	r6, #1
 8007656:	9b06      	ldr	r3, [sp, #24]
 8007658:	429e      	cmp	r6, r3
 800765a:	f1a7 0708 	sub.w	r7, r7, #8
 800765e:	ddeb      	ble.n	8007638 <__kernel_rem_pio2+0xa0>
 8007660:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007664:	f108 0801 	add.w	r8, r8, #1
 8007668:	ecab 7b02 	vstmia	fp!, {d7}
 800766c:	3508      	adds	r5, #8
 800766e:	e7cc      	b.n	800760a <__kernel_rem_pio2+0x72>
 8007670:	9b02      	ldr	r3, [sp, #8]
 8007672:	aa0e      	add	r2, sp, #56	; 0x38
 8007674:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007678:	930d      	str	r3, [sp, #52]	; 0x34
 800767a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800767c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007680:	9c02      	ldr	r4, [sp, #8]
 8007682:	930c      	str	r3, [sp, #48]	; 0x30
 8007684:	00e3      	lsls	r3, r4, #3
 8007686:	930a      	str	r3, [sp, #40]	; 0x28
 8007688:	ab9a      	add	r3, sp, #616	; 0x268
 800768a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800768e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007692:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8007696:	ab72      	add	r3, sp, #456	; 0x1c8
 8007698:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800769c:	46c3      	mov	fp, r8
 800769e:	46a1      	mov	r9, r4
 80076a0:	f1b9 0f00 	cmp.w	r9, #0
 80076a4:	f1a5 0508 	sub.w	r5, r5, #8
 80076a8:	dc77      	bgt.n	800779a <__kernel_rem_pio2+0x202>
 80076aa:	ec47 6b10 	vmov	d0, r6, r7
 80076ae:	4650      	mov	r0, sl
 80076b0:	f000 fc02 	bl	8007eb8 <scalbn>
 80076b4:	ec57 6b10 	vmov	r6, r7, d0
 80076b8:	2200      	movs	r2, #0
 80076ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80076be:	ee10 0a10 	vmov	r0, s0
 80076c2:	4639      	mov	r1, r7
 80076c4:	f7f8 ff44 	bl	8000550 <__aeabi_dmul>
 80076c8:	ec41 0b10 	vmov	d0, r0, r1
 80076cc:	f000 fb74 	bl	8007db8 <floor>
 80076d0:	4b7c      	ldr	r3, [pc, #496]	; (80078c4 <__kernel_rem_pio2+0x32c>)
 80076d2:	ec51 0b10 	vmov	r0, r1, d0
 80076d6:	2200      	movs	r2, #0
 80076d8:	f7f8 ff3a 	bl	8000550 <__aeabi_dmul>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4630      	mov	r0, r6
 80076e2:	4639      	mov	r1, r7
 80076e4:	f7f8 fd7c 	bl	80001e0 <__aeabi_dsub>
 80076e8:	460f      	mov	r7, r1
 80076ea:	4606      	mov	r6, r0
 80076ec:	f7f9 f9ca 	bl	8000a84 <__aeabi_d2iz>
 80076f0:	9004      	str	r0, [sp, #16]
 80076f2:	f7f8 fec3 	bl	800047c <__aeabi_i2d>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4630      	mov	r0, r6
 80076fc:	4639      	mov	r1, r7
 80076fe:	f7f8 fd6f 	bl	80001e0 <__aeabi_dsub>
 8007702:	f1ba 0f00 	cmp.w	sl, #0
 8007706:	4606      	mov	r6, r0
 8007708:	460f      	mov	r7, r1
 800770a:	dd6d      	ble.n	80077e8 <__kernel_rem_pio2+0x250>
 800770c:	1e62      	subs	r2, r4, #1
 800770e:	ab0e      	add	r3, sp, #56	; 0x38
 8007710:	9d04      	ldr	r5, [sp, #16]
 8007712:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007716:	f1ca 0118 	rsb	r1, sl, #24
 800771a:	fa40 f301 	asr.w	r3, r0, r1
 800771e:	441d      	add	r5, r3
 8007720:	408b      	lsls	r3, r1
 8007722:	1ac0      	subs	r0, r0, r3
 8007724:	ab0e      	add	r3, sp, #56	; 0x38
 8007726:	9504      	str	r5, [sp, #16]
 8007728:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800772c:	f1ca 0317 	rsb	r3, sl, #23
 8007730:	fa40 fb03 	asr.w	fp, r0, r3
 8007734:	f1bb 0f00 	cmp.w	fp, #0
 8007738:	dd65      	ble.n	8007806 <__kernel_rem_pio2+0x26e>
 800773a:	9b04      	ldr	r3, [sp, #16]
 800773c:	2200      	movs	r2, #0
 800773e:	3301      	adds	r3, #1
 8007740:	9304      	str	r3, [sp, #16]
 8007742:	4615      	mov	r5, r2
 8007744:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007748:	4294      	cmp	r4, r2
 800774a:	f300 809c 	bgt.w	8007886 <__kernel_rem_pio2+0x2ee>
 800774e:	f1ba 0f00 	cmp.w	sl, #0
 8007752:	dd07      	ble.n	8007764 <__kernel_rem_pio2+0x1cc>
 8007754:	f1ba 0f01 	cmp.w	sl, #1
 8007758:	f000 80c0 	beq.w	80078dc <__kernel_rem_pio2+0x344>
 800775c:	f1ba 0f02 	cmp.w	sl, #2
 8007760:	f000 80c6 	beq.w	80078f0 <__kernel_rem_pio2+0x358>
 8007764:	f1bb 0f02 	cmp.w	fp, #2
 8007768:	d14d      	bne.n	8007806 <__kernel_rem_pio2+0x26e>
 800776a:	4632      	mov	r2, r6
 800776c:	463b      	mov	r3, r7
 800776e:	4956      	ldr	r1, [pc, #344]	; (80078c8 <__kernel_rem_pio2+0x330>)
 8007770:	2000      	movs	r0, #0
 8007772:	f7f8 fd35 	bl	80001e0 <__aeabi_dsub>
 8007776:	4606      	mov	r6, r0
 8007778:	460f      	mov	r7, r1
 800777a:	2d00      	cmp	r5, #0
 800777c:	d043      	beq.n	8007806 <__kernel_rem_pio2+0x26e>
 800777e:	4650      	mov	r0, sl
 8007780:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80078b8 <__kernel_rem_pio2+0x320>
 8007784:	f000 fb98 	bl	8007eb8 <scalbn>
 8007788:	4630      	mov	r0, r6
 800778a:	4639      	mov	r1, r7
 800778c:	ec53 2b10 	vmov	r2, r3, d0
 8007790:	f7f8 fd26 	bl	80001e0 <__aeabi_dsub>
 8007794:	4606      	mov	r6, r0
 8007796:	460f      	mov	r7, r1
 8007798:	e035      	b.n	8007806 <__kernel_rem_pio2+0x26e>
 800779a:	4b4c      	ldr	r3, [pc, #304]	; (80078cc <__kernel_rem_pio2+0x334>)
 800779c:	2200      	movs	r2, #0
 800779e:	4630      	mov	r0, r6
 80077a0:	4639      	mov	r1, r7
 80077a2:	f7f8 fed5 	bl	8000550 <__aeabi_dmul>
 80077a6:	f7f9 f96d 	bl	8000a84 <__aeabi_d2iz>
 80077aa:	f7f8 fe67 	bl	800047c <__aeabi_i2d>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	ec43 2b18 	vmov	d8, r2, r3
 80077b6:	4b46      	ldr	r3, [pc, #280]	; (80078d0 <__kernel_rem_pio2+0x338>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	f7f8 fec9 	bl	8000550 <__aeabi_dmul>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4630      	mov	r0, r6
 80077c4:	4639      	mov	r1, r7
 80077c6:	f7f8 fd0b 	bl	80001e0 <__aeabi_dsub>
 80077ca:	f7f9 f95b 	bl	8000a84 <__aeabi_d2iz>
 80077ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077d2:	f84b 0b04 	str.w	r0, [fp], #4
 80077d6:	ec51 0b18 	vmov	r0, r1, d8
 80077da:	f7f8 fd03 	bl	80001e4 <__adddf3>
 80077de:	f109 39ff 	add.w	r9, r9, #4294967295
 80077e2:	4606      	mov	r6, r0
 80077e4:	460f      	mov	r7, r1
 80077e6:	e75b      	b.n	80076a0 <__kernel_rem_pio2+0x108>
 80077e8:	d106      	bne.n	80077f8 <__kernel_rem_pio2+0x260>
 80077ea:	1e63      	subs	r3, r4, #1
 80077ec:	aa0e      	add	r2, sp, #56	; 0x38
 80077ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80077f2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80077f6:	e79d      	b.n	8007734 <__kernel_rem_pio2+0x19c>
 80077f8:	4b36      	ldr	r3, [pc, #216]	; (80078d4 <__kernel_rem_pio2+0x33c>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	f7f9 f92e 	bl	8000a5c <__aeabi_dcmpge>
 8007800:	2800      	cmp	r0, #0
 8007802:	d13d      	bne.n	8007880 <__kernel_rem_pio2+0x2e8>
 8007804:	4683      	mov	fp, r0
 8007806:	2200      	movs	r2, #0
 8007808:	2300      	movs	r3, #0
 800780a:	4630      	mov	r0, r6
 800780c:	4639      	mov	r1, r7
 800780e:	f7f9 f907 	bl	8000a20 <__aeabi_dcmpeq>
 8007812:	2800      	cmp	r0, #0
 8007814:	f000 80c0 	beq.w	8007998 <__kernel_rem_pio2+0x400>
 8007818:	1e65      	subs	r5, r4, #1
 800781a:	462b      	mov	r3, r5
 800781c:	2200      	movs	r2, #0
 800781e:	9902      	ldr	r1, [sp, #8]
 8007820:	428b      	cmp	r3, r1
 8007822:	da6c      	bge.n	80078fe <__kernel_rem_pio2+0x366>
 8007824:	2a00      	cmp	r2, #0
 8007826:	f000 8089 	beq.w	800793c <__kernel_rem_pio2+0x3a4>
 800782a:	ab0e      	add	r3, sp, #56	; 0x38
 800782c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007830:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 80ad 	beq.w	8007994 <__kernel_rem_pio2+0x3fc>
 800783a:	4650      	mov	r0, sl
 800783c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80078b8 <__kernel_rem_pio2+0x320>
 8007840:	f000 fb3a 	bl	8007eb8 <scalbn>
 8007844:	ab9a      	add	r3, sp, #616	; 0x268
 8007846:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800784a:	ec57 6b10 	vmov	r6, r7, d0
 800784e:	00ec      	lsls	r4, r5, #3
 8007850:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007854:	46aa      	mov	sl, r5
 8007856:	f1ba 0f00 	cmp.w	sl, #0
 800785a:	f280 80d6 	bge.w	8007a0a <__kernel_rem_pio2+0x472>
 800785e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80078b0 <__kernel_rem_pio2+0x318>
 8007862:	462e      	mov	r6, r5
 8007864:	2e00      	cmp	r6, #0
 8007866:	f2c0 8104 	blt.w	8007a72 <__kernel_rem_pio2+0x4da>
 800786a:	ab72      	add	r3, sp, #456	; 0x1c8
 800786c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007870:	f8df a064 	ldr.w	sl, [pc, #100]	; 80078d8 <__kernel_rem_pio2+0x340>
 8007874:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007878:	f04f 0800 	mov.w	r8, #0
 800787c:	1baf      	subs	r7, r5, r6
 800787e:	e0ea      	b.n	8007a56 <__kernel_rem_pio2+0x4be>
 8007880:	f04f 0b02 	mov.w	fp, #2
 8007884:	e759      	b.n	800773a <__kernel_rem_pio2+0x1a2>
 8007886:	f8d8 3000 	ldr.w	r3, [r8]
 800788a:	b955      	cbnz	r5, 80078a2 <__kernel_rem_pio2+0x30a>
 800788c:	b123      	cbz	r3, 8007898 <__kernel_rem_pio2+0x300>
 800788e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007892:	f8c8 3000 	str.w	r3, [r8]
 8007896:	2301      	movs	r3, #1
 8007898:	3201      	adds	r2, #1
 800789a:	f108 0804 	add.w	r8, r8, #4
 800789e:	461d      	mov	r5, r3
 80078a0:	e752      	b.n	8007748 <__kernel_rem_pio2+0x1b0>
 80078a2:	1acb      	subs	r3, r1, r3
 80078a4:	f8c8 3000 	str.w	r3, [r8]
 80078a8:	462b      	mov	r3, r5
 80078aa:	e7f5      	b.n	8007898 <__kernel_rem_pio2+0x300>
 80078ac:	f3af 8000 	nop.w
	...
 80078bc:	3ff00000 	.word	0x3ff00000
 80078c0:	08008458 	.word	0x08008458
 80078c4:	40200000 	.word	0x40200000
 80078c8:	3ff00000 	.word	0x3ff00000
 80078cc:	3e700000 	.word	0x3e700000
 80078d0:	41700000 	.word	0x41700000
 80078d4:	3fe00000 	.word	0x3fe00000
 80078d8:	08008418 	.word	0x08008418
 80078dc:	1e62      	subs	r2, r4, #1
 80078de:	ab0e      	add	r3, sp, #56	; 0x38
 80078e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80078e8:	a90e      	add	r1, sp, #56	; 0x38
 80078ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80078ee:	e739      	b.n	8007764 <__kernel_rem_pio2+0x1cc>
 80078f0:	1e62      	subs	r2, r4, #1
 80078f2:	ab0e      	add	r3, sp, #56	; 0x38
 80078f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80078fc:	e7f4      	b.n	80078e8 <__kernel_rem_pio2+0x350>
 80078fe:	a90e      	add	r1, sp, #56	; 0x38
 8007900:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007904:	3b01      	subs	r3, #1
 8007906:	430a      	orrs	r2, r1
 8007908:	e789      	b.n	800781e <__kernel_rem_pio2+0x286>
 800790a:	3301      	adds	r3, #1
 800790c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007910:	2900      	cmp	r1, #0
 8007912:	d0fa      	beq.n	800790a <__kernel_rem_pio2+0x372>
 8007914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007916:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800791a:	446a      	add	r2, sp
 800791c:	3a98      	subs	r2, #152	; 0x98
 800791e:	920a      	str	r2, [sp, #40]	; 0x28
 8007920:	9a08      	ldr	r2, [sp, #32]
 8007922:	18e3      	adds	r3, r4, r3
 8007924:	18a5      	adds	r5, r4, r2
 8007926:	aa22      	add	r2, sp, #136	; 0x88
 8007928:	f104 0801 	add.w	r8, r4, #1
 800792c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007930:	9304      	str	r3, [sp, #16]
 8007932:	9b04      	ldr	r3, [sp, #16]
 8007934:	4543      	cmp	r3, r8
 8007936:	da04      	bge.n	8007942 <__kernel_rem_pio2+0x3aa>
 8007938:	461c      	mov	r4, r3
 800793a:	e6a3      	b.n	8007684 <__kernel_rem_pio2+0xec>
 800793c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800793e:	2301      	movs	r3, #1
 8007940:	e7e4      	b.n	800790c <__kernel_rem_pio2+0x374>
 8007942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007944:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007948:	f7f8 fd98 	bl	800047c <__aeabi_i2d>
 800794c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007952:	46ab      	mov	fp, r5
 8007954:	461c      	mov	r4, r3
 8007956:	f04f 0900 	mov.w	r9, #0
 800795a:	2600      	movs	r6, #0
 800795c:	2700      	movs	r7, #0
 800795e:	9b06      	ldr	r3, [sp, #24]
 8007960:	4599      	cmp	r9, r3
 8007962:	dd06      	ble.n	8007972 <__kernel_rem_pio2+0x3da>
 8007964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007966:	e8e3 6702 	strd	r6, r7, [r3], #8
 800796a:	f108 0801 	add.w	r8, r8, #1
 800796e:	930a      	str	r3, [sp, #40]	; 0x28
 8007970:	e7df      	b.n	8007932 <__kernel_rem_pio2+0x39a>
 8007972:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007976:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800797a:	f7f8 fde9 	bl	8000550 <__aeabi_dmul>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4630      	mov	r0, r6
 8007984:	4639      	mov	r1, r7
 8007986:	f7f8 fc2d 	bl	80001e4 <__adddf3>
 800798a:	f109 0901 	add.w	r9, r9, #1
 800798e:	4606      	mov	r6, r0
 8007990:	460f      	mov	r7, r1
 8007992:	e7e4      	b.n	800795e <__kernel_rem_pio2+0x3c6>
 8007994:	3d01      	subs	r5, #1
 8007996:	e748      	b.n	800782a <__kernel_rem_pio2+0x292>
 8007998:	ec47 6b10 	vmov	d0, r6, r7
 800799c:	f1ca 0000 	rsb	r0, sl, #0
 80079a0:	f000 fa8a 	bl	8007eb8 <scalbn>
 80079a4:	ec57 6b10 	vmov	r6, r7, d0
 80079a8:	4ba0      	ldr	r3, [pc, #640]	; (8007c2c <__kernel_rem_pio2+0x694>)
 80079aa:	ee10 0a10 	vmov	r0, s0
 80079ae:	2200      	movs	r2, #0
 80079b0:	4639      	mov	r1, r7
 80079b2:	f7f9 f853 	bl	8000a5c <__aeabi_dcmpge>
 80079b6:	b1f8      	cbz	r0, 80079f8 <__kernel_rem_pio2+0x460>
 80079b8:	4b9d      	ldr	r3, [pc, #628]	; (8007c30 <__kernel_rem_pio2+0x698>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	4630      	mov	r0, r6
 80079be:	4639      	mov	r1, r7
 80079c0:	f7f8 fdc6 	bl	8000550 <__aeabi_dmul>
 80079c4:	f7f9 f85e 	bl	8000a84 <__aeabi_d2iz>
 80079c8:	4680      	mov	r8, r0
 80079ca:	f7f8 fd57 	bl	800047c <__aeabi_i2d>
 80079ce:	4b97      	ldr	r3, [pc, #604]	; (8007c2c <__kernel_rem_pio2+0x694>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	f7f8 fdbd 	bl	8000550 <__aeabi_dmul>
 80079d6:	460b      	mov	r3, r1
 80079d8:	4602      	mov	r2, r0
 80079da:	4639      	mov	r1, r7
 80079dc:	4630      	mov	r0, r6
 80079de:	f7f8 fbff 	bl	80001e0 <__aeabi_dsub>
 80079e2:	f7f9 f84f 	bl	8000a84 <__aeabi_d2iz>
 80079e6:	1c65      	adds	r5, r4, #1
 80079e8:	ab0e      	add	r3, sp, #56	; 0x38
 80079ea:	f10a 0a18 	add.w	sl, sl, #24
 80079ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80079f2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80079f6:	e720      	b.n	800783a <__kernel_rem_pio2+0x2a2>
 80079f8:	4630      	mov	r0, r6
 80079fa:	4639      	mov	r1, r7
 80079fc:	f7f9 f842 	bl	8000a84 <__aeabi_d2iz>
 8007a00:	ab0e      	add	r3, sp, #56	; 0x38
 8007a02:	4625      	mov	r5, r4
 8007a04:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007a08:	e717      	b.n	800783a <__kernel_rem_pio2+0x2a2>
 8007a0a:	ab0e      	add	r3, sp, #56	; 0x38
 8007a0c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007a10:	f7f8 fd34 	bl	800047c <__aeabi_i2d>
 8007a14:	4632      	mov	r2, r6
 8007a16:	463b      	mov	r3, r7
 8007a18:	f7f8 fd9a 	bl	8000550 <__aeabi_dmul>
 8007a1c:	4b84      	ldr	r3, [pc, #528]	; (8007c30 <__kernel_rem_pio2+0x698>)
 8007a1e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007a22:	2200      	movs	r2, #0
 8007a24:	4630      	mov	r0, r6
 8007a26:	4639      	mov	r1, r7
 8007a28:	f7f8 fd92 	bl	8000550 <__aeabi_dmul>
 8007a2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a30:	4606      	mov	r6, r0
 8007a32:	460f      	mov	r7, r1
 8007a34:	e70f      	b.n	8007856 <__kernel_rem_pio2+0x2be>
 8007a36:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007a3a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007a3e:	f7f8 fd87 	bl	8000550 <__aeabi_dmul>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a4a:	f7f8 fbcb 	bl	80001e4 <__adddf3>
 8007a4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a52:	f108 0801 	add.w	r8, r8, #1
 8007a56:	9b02      	ldr	r3, [sp, #8]
 8007a58:	4598      	cmp	r8, r3
 8007a5a:	dc01      	bgt.n	8007a60 <__kernel_rem_pio2+0x4c8>
 8007a5c:	45b8      	cmp	r8, r7
 8007a5e:	ddea      	ble.n	8007a36 <__kernel_rem_pio2+0x49e>
 8007a60:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007a64:	ab4a      	add	r3, sp, #296	; 0x128
 8007a66:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007a6a:	ed87 7b00 	vstr	d7, [r7]
 8007a6e:	3e01      	subs	r6, #1
 8007a70:	e6f8      	b.n	8007864 <__kernel_rem_pio2+0x2cc>
 8007a72:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	dc0b      	bgt.n	8007a90 <__kernel_rem_pio2+0x4f8>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	dc35      	bgt.n	8007ae8 <__kernel_rem_pio2+0x550>
 8007a7c:	d059      	beq.n	8007b32 <__kernel_rem_pio2+0x59a>
 8007a7e:	9b04      	ldr	r3, [sp, #16]
 8007a80:	f003 0007 	and.w	r0, r3, #7
 8007a84:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007a88:	ecbd 8b02 	vpop	{d8}
 8007a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a90:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d1f3      	bne.n	8007a7e <__kernel_rem_pio2+0x4e6>
 8007a96:	ab4a      	add	r3, sp, #296	; 0x128
 8007a98:	4423      	add	r3, r4
 8007a9a:	9306      	str	r3, [sp, #24]
 8007a9c:	461c      	mov	r4, r3
 8007a9e:	469a      	mov	sl, r3
 8007aa0:	9502      	str	r5, [sp, #8]
 8007aa2:	9b02      	ldr	r3, [sp, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f1aa 0a08 	sub.w	sl, sl, #8
 8007aaa:	dc6b      	bgt.n	8007b84 <__kernel_rem_pio2+0x5ec>
 8007aac:	46aa      	mov	sl, r5
 8007aae:	f1ba 0f01 	cmp.w	sl, #1
 8007ab2:	f1a4 0408 	sub.w	r4, r4, #8
 8007ab6:	f300 8085 	bgt.w	8007bc4 <__kernel_rem_pio2+0x62c>
 8007aba:	9c06      	ldr	r4, [sp, #24]
 8007abc:	2000      	movs	r0, #0
 8007abe:	3408      	adds	r4, #8
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	2d01      	cmp	r5, #1
 8007ac4:	f300 809d 	bgt.w	8007c02 <__kernel_rem_pio2+0x66a>
 8007ac8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007acc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007ad0:	f1bb 0f00 	cmp.w	fp, #0
 8007ad4:	f040 809b 	bne.w	8007c0e <__kernel_rem_pio2+0x676>
 8007ad8:	9b01      	ldr	r3, [sp, #4]
 8007ada:	e9c3 5600 	strd	r5, r6, [r3]
 8007ade:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007ae2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007ae6:	e7ca      	b.n	8007a7e <__kernel_rem_pio2+0x4e6>
 8007ae8:	3408      	adds	r4, #8
 8007aea:	ab4a      	add	r3, sp, #296	; 0x128
 8007aec:	441c      	add	r4, r3
 8007aee:	462e      	mov	r6, r5
 8007af0:	2000      	movs	r0, #0
 8007af2:	2100      	movs	r1, #0
 8007af4:	2e00      	cmp	r6, #0
 8007af6:	da36      	bge.n	8007b66 <__kernel_rem_pio2+0x5ce>
 8007af8:	f1bb 0f00 	cmp.w	fp, #0
 8007afc:	d039      	beq.n	8007b72 <__kernel_rem_pio2+0x5da>
 8007afe:	4602      	mov	r2, r0
 8007b00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b04:	9c01      	ldr	r4, [sp, #4]
 8007b06:	e9c4 2300 	strd	r2, r3, [r4]
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007b12:	f7f8 fb65 	bl	80001e0 <__aeabi_dsub>
 8007b16:	ae4c      	add	r6, sp, #304	; 0x130
 8007b18:	2401      	movs	r4, #1
 8007b1a:	42a5      	cmp	r5, r4
 8007b1c:	da2c      	bge.n	8007b78 <__kernel_rem_pio2+0x5e0>
 8007b1e:	f1bb 0f00 	cmp.w	fp, #0
 8007b22:	d002      	beq.n	8007b2a <__kernel_rem_pio2+0x592>
 8007b24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b28:	4619      	mov	r1, r3
 8007b2a:	9b01      	ldr	r3, [sp, #4]
 8007b2c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007b30:	e7a5      	b.n	8007a7e <__kernel_rem_pio2+0x4e6>
 8007b32:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007b36:	eb0d 0403 	add.w	r4, sp, r3
 8007b3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007b3e:	2000      	movs	r0, #0
 8007b40:	2100      	movs	r1, #0
 8007b42:	2d00      	cmp	r5, #0
 8007b44:	da09      	bge.n	8007b5a <__kernel_rem_pio2+0x5c2>
 8007b46:	f1bb 0f00 	cmp.w	fp, #0
 8007b4a:	d002      	beq.n	8007b52 <__kernel_rem_pio2+0x5ba>
 8007b4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b50:	4619      	mov	r1, r3
 8007b52:	9b01      	ldr	r3, [sp, #4]
 8007b54:	e9c3 0100 	strd	r0, r1, [r3]
 8007b58:	e791      	b.n	8007a7e <__kernel_rem_pio2+0x4e6>
 8007b5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007b5e:	f7f8 fb41 	bl	80001e4 <__adddf3>
 8007b62:	3d01      	subs	r5, #1
 8007b64:	e7ed      	b.n	8007b42 <__kernel_rem_pio2+0x5aa>
 8007b66:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007b6a:	f7f8 fb3b 	bl	80001e4 <__adddf3>
 8007b6e:	3e01      	subs	r6, #1
 8007b70:	e7c0      	b.n	8007af4 <__kernel_rem_pio2+0x55c>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	e7c5      	b.n	8007b04 <__kernel_rem_pio2+0x56c>
 8007b78:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007b7c:	f7f8 fb32 	bl	80001e4 <__adddf3>
 8007b80:	3401      	adds	r4, #1
 8007b82:	e7ca      	b.n	8007b1a <__kernel_rem_pio2+0x582>
 8007b84:	e9da 8900 	ldrd	r8, r9, [sl]
 8007b88:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007b8c:	9b02      	ldr	r3, [sp, #8]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	9302      	str	r3, [sp, #8]
 8007b92:	4632      	mov	r2, r6
 8007b94:	463b      	mov	r3, r7
 8007b96:	4640      	mov	r0, r8
 8007b98:	4649      	mov	r1, r9
 8007b9a:	f7f8 fb23 	bl	80001e4 <__adddf3>
 8007b9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4640      	mov	r0, r8
 8007ba8:	4649      	mov	r1, r9
 8007baa:	f7f8 fb19 	bl	80001e0 <__aeabi_dsub>
 8007bae:	4632      	mov	r2, r6
 8007bb0:	463b      	mov	r3, r7
 8007bb2:	f7f8 fb17 	bl	80001e4 <__adddf3>
 8007bb6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007bba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007bbe:	ed8a 7b00 	vstr	d7, [sl]
 8007bc2:	e76e      	b.n	8007aa2 <__kernel_rem_pio2+0x50a>
 8007bc4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007bc8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007bcc:	4640      	mov	r0, r8
 8007bce:	4632      	mov	r2, r6
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	f7f8 fb06 	bl	80001e4 <__adddf3>
 8007bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4640      	mov	r0, r8
 8007be2:	4649      	mov	r1, r9
 8007be4:	f7f8 fafc 	bl	80001e0 <__aeabi_dsub>
 8007be8:	4632      	mov	r2, r6
 8007bea:	463b      	mov	r3, r7
 8007bec:	f7f8 fafa 	bl	80001e4 <__adddf3>
 8007bf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bf4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007bf8:	ed84 7b00 	vstr	d7, [r4]
 8007bfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c00:	e755      	b.n	8007aae <__kernel_rem_pio2+0x516>
 8007c02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007c06:	f7f8 faed 	bl	80001e4 <__adddf3>
 8007c0a:	3d01      	subs	r5, #1
 8007c0c:	e759      	b.n	8007ac2 <__kernel_rem_pio2+0x52a>
 8007c0e:	9b01      	ldr	r3, [sp, #4]
 8007c10:	9a01      	ldr	r2, [sp, #4]
 8007c12:	601d      	str	r5, [r3, #0]
 8007c14:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007c18:	605c      	str	r4, [r3, #4]
 8007c1a:	609f      	str	r7, [r3, #8]
 8007c1c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007c20:	60d3      	str	r3, [r2, #12]
 8007c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c26:	6110      	str	r0, [r2, #16]
 8007c28:	6153      	str	r3, [r2, #20]
 8007c2a:	e728      	b.n	8007a7e <__kernel_rem_pio2+0x4e6>
 8007c2c:	41700000 	.word	0x41700000
 8007c30:	3e700000 	.word	0x3e700000
 8007c34:	00000000 	.word	0x00000000

08007c38 <__kernel_sin>:
 8007c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3c:	ed2d 8b04 	vpush	{d8-d9}
 8007c40:	eeb0 8a41 	vmov.f32	s16, s2
 8007c44:	eef0 8a61 	vmov.f32	s17, s3
 8007c48:	ec55 4b10 	vmov	r4, r5, d0
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007c52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007c56:	9001      	str	r0, [sp, #4]
 8007c58:	da06      	bge.n	8007c68 <__kernel_sin+0x30>
 8007c5a:	ee10 0a10 	vmov	r0, s0
 8007c5e:	4629      	mov	r1, r5
 8007c60:	f7f8 ff10 	bl	8000a84 <__aeabi_d2iz>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d051      	beq.n	8007d0c <__kernel_sin+0xd4>
 8007c68:	4622      	mov	r2, r4
 8007c6a:	462b      	mov	r3, r5
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	4629      	mov	r1, r5
 8007c70:	f7f8 fc6e 	bl	8000550 <__aeabi_dmul>
 8007c74:	4682      	mov	sl, r0
 8007c76:	468b      	mov	fp, r1
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	4629      	mov	r1, r5
 8007c80:	f7f8 fc66 	bl	8000550 <__aeabi_dmul>
 8007c84:	a341      	add	r3, pc, #260	; (adr r3, 8007d8c <__kernel_sin+0x154>)
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	4680      	mov	r8, r0
 8007c8c:	4689      	mov	r9, r1
 8007c8e:	4650      	mov	r0, sl
 8007c90:	4659      	mov	r1, fp
 8007c92:	f7f8 fc5d 	bl	8000550 <__aeabi_dmul>
 8007c96:	a33f      	add	r3, pc, #252	; (adr r3, 8007d94 <__kernel_sin+0x15c>)
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	f7f8 faa0 	bl	80001e0 <__aeabi_dsub>
 8007ca0:	4652      	mov	r2, sl
 8007ca2:	465b      	mov	r3, fp
 8007ca4:	f7f8 fc54 	bl	8000550 <__aeabi_dmul>
 8007ca8:	a33c      	add	r3, pc, #240	; (adr r3, 8007d9c <__kernel_sin+0x164>)
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	f7f8 fa99 	bl	80001e4 <__adddf3>
 8007cb2:	4652      	mov	r2, sl
 8007cb4:	465b      	mov	r3, fp
 8007cb6:	f7f8 fc4b 	bl	8000550 <__aeabi_dmul>
 8007cba:	a33a      	add	r3, pc, #232	; (adr r3, 8007da4 <__kernel_sin+0x16c>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fa8e 	bl	80001e0 <__aeabi_dsub>
 8007cc4:	4652      	mov	r2, sl
 8007cc6:	465b      	mov	r3, fp
 8007cc8:	f7f8 fc42 	bl	8000550 <__aeabi_dmul>
 8007ccc:	a337      	add	r3, pc, #220	; (adr r3, 8007dac <__kernel_sin+0x174>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f7f8 fa87 	bl	80001e4 <__adddf3>
 8007cd6:	9b01      	ldr	r3, [sp, #4]
 8007cd8:	4606      	mov	r6, r0
 8007cda:	460f      	mov	r7, r1
 8007cdc:	b9eb      	cbnz	r3, 8007d1a <__kernel_sin+0xe2>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4650      	mov	r0, sl
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	f7f8 fc33 	bl	8000550 <__aeabi_dmul>
 8007cea:	a325      	add	r3, pc, #148	; (adr r3, 8007d80 <__kernel_sin+0x148>)
 8007cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf0:	f7f8 fa76 	bl	80001e0 <__aeabi_dsub>
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	f7f8 fc2a 	bl	8000550 <__aeabi_dmul>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4620      	mov	r0, r4
 8007d02:	4629      	mov	r1, r5
 8007d04:	f7f8 fa6e 	bl	80001e4 <__adddf3>
 8007d08:	4604      	mov	r4, r0
 8007d0a:	460d      	mov	r5, r1
 8007d0c:	ec45 4b10 	vmov	d0, r4, r5
 8007d10:	b003      	add	sp, #12
 8007d12:	ecbd 8b04 	vpop	{d8-d9}
 8007d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1a:	4b1b      	ldr	r3, [pc, #108]	; (8007d88 <__kernel_sin+0x150>)
 8007d1c:	ec51 0b18 	vmov	r0, r1, d8
 8007d20:	2200      	movs	r2, #0
 8007d22:	f7f8 fc15 	bl	8000550 <__aeabi_dmul>
 8007d26:	4632      	mov	r2, r6
 8007d28:	ec41 0b19 	vmov	d9, r0, r1
 8007d2c:	463b      	mov	r3, r7
 8007d2e:	4640      	mov	r0, r8
 8007d30:	4649      	mov	r1, r9
 8007d32:	f7f8 fc0d 	bl	8000550 <__aeabi_dmul>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	ec51 0b19 	vmov	r0, r1, d9
 8007d3e:	f7f8 fa4f 	bl	80001e0 <__aeabi_dsub>
 8007d42:	4652      	mov	r2, sl
 8007d44:	465b      	mov	r3, fp
 8007d46:	f7f8 fc03 	bl	8000550 <__aeabi_dmul>
 8007d4a:	ec53 2b18 	vmov	r2, r3, d8
 8007d4e:	f7f8 fa47 	bl	80001e0 <__aeabi_dsub>
 8007d52:	a30b      	add	r3, pc, #44	; (adr r3, 8007d80 <__kernel_sin+0x148>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	4606      	mov	r6, r0
 8007d5a:	460f      	mov	r7, r1
 8007d5c:	4640      	mov	r0, r8
 8007d5e:	4649      	mov	r1, r9
 8007d60:	f7f8 fbf6 	bl	8000550 <__aeabi_dmul>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4630      	mov	r0, r6
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	f7f8 fa3a 	bl	80001e4 <__adddf3>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4620      	mov	r0, r4
 8007d76:	4629      	mov	r1, r5
 8007d78:	f7f8 fa32 	bl	80001e0 <__aeabi_dsub>
 8007d7c:	e7c4      	b.n	8007d08 <__kernel_sin+0xd0>
 8007d7e:	bf00      	nop
 8007d80:	55555549 	.word	0x55555549
 8007d84:	3fc55555 	.word	0x3fc55555
 8007d88:	3fe00000 	.word	0x3fe00000
 8007d8c:	5acfd57c 	.word	0x5acfd57c
 8007d90:	3de5d93a 	.word	0x3de5d93a
 8007d94:	8a2b9ceb 	.word	0x8a2b9ceb
 8007d98:	3e5ae5e6 	.word	0x3e5ae5e6
 8007d9c:	57b1fe7d 	.word	0x57b1fe7d
 8007da0:	3ec71de3 	.word	0x3ec71de3
 8007da4:	19c161d5 	.word	0x19c161d5
 8007da8:	3f2a01a0 	.word	0x3f2a01a0
 8007dac:	1110f8a6 	.word	0x1110f8a6
 8007db0:	3f811111 	.word	0x3f811111
 8007db4:	00000000 	.word	0x00000000

08007db8 <floor>:
 8007db8:	ec51 0b10 	vmov	r0, r1, d0
 8007dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007dc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007dc8:	2e13      	cmp	r6, #19
 8007dca:	ee10 5a10 	vmov	r5, s0
 8007dce:	ee10 8a10 	vmov	r8, s0
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	dc32      	bgt.n	8007e3c <floor+0x84>
 8007dd6:	2e00      	cmp	r6, #0
 8007dd8:	da14      	bge.n	8007e04 <floor+0x4c>
 8007dda:	a333      	add	r3, pc, #204	; (adr r3, 8007ea8 <floor+0xf0>)
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	f7f8 fa00 	bl	80001e4 <__adddf3>
 8007de4:	2200      	movs	r2, #0
 8007de6:	2300      	movs	r3, #0
 8007de8:	f7f8 fe42 	bl	8000a70 <__aeabi_dcmpgt>
 8007dec:	b138      	cbz	r0, 8007dfe <floor+0x46>
 8007dee:	2c00      	cmp	r4, #0
 8007df0:	da57      	bge.n	8007ea2 <floor+0xea>
 8007df2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007df6:	431d      	orrs	r5, r3
 8007df8:	d001      	beq.n	8007dfe <floor+0x46>
 8007dfa:	4c2d      	ldr	r4, [pc, #180]	; (8007eb0 <floor+0xf8>)
 8007dfc:	2500      	movs	r5, #0
 8007dfe:	4621      	mov	r1, r4
 8007e00:	4628      	mov	r0, r5
 8007e02:	e025      	b.n	8007e50 <floor+0x98>
 8007e04:	4f2b      	ldr	r7, [pc, #172]	; (8007eb4 <floor+0xfc>)
 8007e06:	4137      	asrs	r7, r6
 8007e08:	ea01 0307 	and.w	r3, r1, r7
 8007e0c:	4303      	orrs	r3, r0
 8007e0e:	d01f      	beq.n	8007e50 <floor+0x98>
 8007e10:	a325      	add	r3, pc, #148	; (adr r3, 8007ea8 <floor+0xf0>)
 8007e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e16:	f7f8 f9e5 	bl	80001e4 <__adddf3>
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f7f8 fe27 	bl	8000a70 <__aeabi_dcmpgt>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d0eb      	beq.n	8007dfe <floor+0x46>
 8007e26:	2c00      	cmp	r4, #0
 8007e28:	bfbe      	ittt	lt
 8007e2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007e2e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007e32:	19a4      	addlt	r4, r4, r6
 8007e34:	ea24 0407 	bic.w	r4, r4, r7
 8007e38:	2500      	movs	r5, #0
 8007e3a:	e7e0      	b.n	8007dfe <floor+0x46>
 8007e3c:	2e33      	cmp	r6, #51	; 0x33
 8007e3e:	dd0b      	ble.n	8007e58 <floor+0xa0>
 8007e40:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007e44:	d104      	bne.n	8007e50 <floor+0x98>
 8007e46:	ee10 2a10 	vmov	r2, s0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	f7f8 f9ca 	bl	80001e4 <__adddf3>
 8007e50:	ec41 0b10 	vmov	d0, r0, r1
 8007e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e58:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e60:	fa23 f707 	lsr.w	r7, r3, r7
 8007e64:	4207      	tst	r7, r0
 8007e66:	d0f3      	beq.n	8007e50 <floor+0x98>
 8007e68:	a30f      	add	r3, pc, #60	; (adr r3, 8007ea8 <floor+0xf0>)
 8007e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6e:	f7f8 f9b9 	bl	80001e4 <__adddf3>
 8007e72:	2200      	movs	r2, #0
 8007e74:	2300      	movs	r3, #0
 8007e76:	f7f8 fdfb 	bl	8000a70 <__aeabi_dcmpgt>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d0bf      	beq.n	8007dfe <floor+0x46>
 8007e7e:	2c00      	cmp	r4, #0
 8007e80:	da02      	bge.n	8007e88 <floor+0xd0>
 8007e82:	2e14      	cmp	r6, #20
 8007e84:	d103      	bne.n	8007e8e <floor+0xd6>
 8007e86:	3401      	adds	r4, #1
 8007e88:	ea25 0507 	bic.w	r5, r5, r7
 8007e8c:	e7b7      	b.n	8007dfe <floor+0x46>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007e94:	fa03 f606 	lsl.w	r6, r3, r6
 8007e98:	4435      	add	r5, r6
 8007e9a:	4545      	cmp	r5, r8
 8007e9c:	bf38      	it	cc
 8007e9e:	18e4      	addcc	r4, r4, r3
 8007ea0:	e7f2      	b.n	8007e88 <floor+0xd0>
 8007ea2:	2500      	movs	r5, #0
 8007ea4:	462c      	mov	r4, r5
 8007ea6:	e7aa      	b.n	8007dfe <floor+0x46>
 8007ea8:	8800759c 	.word	0x8800759c
 8007eac:	7e37e43c 	.word	0x7e37e43c
 8007eb0:	bff00000 	.word	0xbff00000
 8007eb4:	000fffff 	.word	0x000fffff

08007eb8 <scalbn>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	ec55 4b10 	vmov	r4, r5, d0
 8007ebe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	462b      	mov	r3, r5
 8007ec6:	b99a      	cbnz	r2, 8007ef0 <scalbn+0x38>
 8007ec8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007ecc:	4323      	orrs	r3, r4
 8007ece:	d036      	beq.n	8007f3e <scalbn+0x86>
 8007ed0:	4b39      	ldr	r3, [pc, #228]	; (8007fb8 <scalbn+0x100>)
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	ee10 0a10 	vmov	r0, s0
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f7f8 fb39 	bl	8000550 <__aeabi_dmul>
 8007ede:	4b37      	ldr	r3, [pc, #220]	; (8007fbc <scalbn+0x104>)
 8007ee0:	429e      	cmp	r6, r3
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	460d      	mov	r5, r1
 8007ee6:	da10      	bge.n	8007f0a <scalbn+0x52>
 8007ee8:	a32b      	add	r3, pc, #172	; (adr r3, 8007f98 <scalbn+0xe0>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	e03a      	b.n	8007f66 <scalbn+0xae>
 8007ef0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007ef4:	428a      	cmp	r2, r1
 8007ef6:	d10c      	bne.n	8007f12 <scalbn+0x5a>
 8007ef8:	ee10 2a10 	vmov	r2, s0
 8007efc:	4620      	mov	r0, r4
 8007efe:	4629      	mov	r1, r5
 8007f00:	f7f8 f970 	bl	80001e4 <__adddf3>
 8007f04:	4604      	mov	r4, r0
 8007f06:	460d      	mov	r5, r1
 8007f08:	e019      	b.n	8007f3e <scalbn+0x86>
 8007f0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007f0e:	460b      	mov	r3, r1
 8007f10:	3a36      	subs	r2, #54	; 0x36
 8007f12:	4432      	add	r2, r6
 8007f14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007f18:	428a      	cmp	r2, r1
 8007f1a:	dd08      	ble.n	8007f2e <scalbn+0x76>
 8007f1c:	2d00      	cmp	r5, #0
 8007f1e:	a120      	add	r1, pc, #128	; (adr r1, 8007fa0 <scalbn+0xe8>)
 8007f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f24:	da1c      	bge.n	8007f60 <scalbn+0xa8>
 8007f26:	a120      	add	r1, pc, #128	; (adr r1, 8007fa8 <scalbn+0xf0>)
 8007f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f2c:	e018      	b.n	8007f60 <scalbn+0xa8>
 8007f2e:	2a00      	cmp	r2, #0
 8007f30:	dd08      	ble.n	8007f44 <scalbn+0x8c>
 8007f32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007f3e:	ec45 4b10 	vmov	d0, r4, r5
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
 8007f44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007f48:	da19      	bge.n	8007f7e <scalbn+0xc6>
 8007f4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007f4e:	429e      	cmp	r6, r3
 8007f50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007f54:	dd0a      	ble.n	8007f6c <scalbn+0xb4>
 8007f56:	a112      	add	r1, pc, #72	; (adr r1, 8007fa0 <scalbn+0xe8>)
 8007f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e2      	bne.n	8007f26 <scalbn+0x6e>
 8007f60:	a30f      	add	r3, pc, #60	; (adr r3, 8007fa0 <scalbn+0xe8>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 faf3 	bl	8000550 <__aeabi_dmul>
 8007f6a:	e7cb      	b.n	8007f04 <scalbn+0x4c>
 8007f6c:	a10a      	add	r1, pc, #40	; (adr r1, 8007f98 <scalbn+0xe0>)
 8007f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0b8      	beq.n	8007ee8 <scalbn+0x30>
 8007f76:	a10e      	add	r1, pc, #56	; (adr r1, 8007fb0 <scalbn+0xf8>)
 8007f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f7c:	e7b4      	b.n	8007ee8 <scalbn+0x30>
 8007f7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f82:	3236      	adds	r2, #54	; 0x36
 8007f84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <scalbn+0x108>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	e7e8      	b.n	8007f66 <scalbn+0xae>
 8007f94:	f3af 8000 	nop.w
 8007f98:	c2f8f359 	.word	0xc2f8f359
 8007f9c:	01a56e1f 	.word	0x01a56e1f
 8007fa0:	8800759c 	.word	0x8800759c
 8007fa4:	7e37e43c 	.word	0x7e37e43c
 8007fa8:	8800759c 	.word	0x8800759c
 8007fac:	fe37e43c 	.word	0xfe37e43c
 8007fb0:	c2f8f359 	.word	0xc2f8f359
 8007fb4:	81a56e1f 	.word	0x81a56e1f
 8007fb8:	43500000 	.word	0x43500000
 8007fbc:	ffff3cb0 	.word	0xffff3cb0
 8007fc0:	3c900000 	.word	0x3c900000

08007fc4 <fabsf>:
 8007fc4:	ee10 3a10 	vmov	r3, s0
 8007fc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fcc:	ee00 3a10 	vmov	s0, r3
 8007fd0:	4770      	bx	lr
	...

08007fd4 <nanf>:
 8007fd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007fdc <nanf+0x8>
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	7fc00000 	.word	0x7fc00000

08007fe0 <_init>:
 8007fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe2:	bf00      	nop
 8007fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fe6:	bc08      	pop	{r3}
 8007fe8:	469e      	mov	lr, r3
 8007fea:	4770      	bx	lr

08007fec <_fini>:
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	bf00      	nop
 8007ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ff2:	bc08      	pop	{r3}
 8007ff4:	469e      	mov	lr, r3
 8007ff6:	4770      	bx	lr
