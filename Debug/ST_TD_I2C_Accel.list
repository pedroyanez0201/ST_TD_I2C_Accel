
ST_TD_I2C_Accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008148  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  080082e0  080082e0  000182e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008750  08008750  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08008750  08008750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008758  08008758  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008758  08008758  00018758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800875c  0800875c  0001875c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08008760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200000b0  0800880c  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  0800880c  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d528  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219b  00000000  00000000  0002d604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002f7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00030290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017182  00000000  00000000  00030c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010891  00000000  00000000  00047e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a383  00000000  00000000  000586a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2a26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003140  00000000  00000000  000e2a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080082c8 	.word	0x080082c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b4 	.word	0x200000b4
 80001d4:	080082c8 	.word	0x080082c8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b974 	b.w	8000e74 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	468e      	mov	lr, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14d      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	d969      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b152      	cbz	r2, 8000bd4 <__udivmoddi4+0x30>
 8000bbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc2:	f1c2 0120 	rsb	r1, r2, #32
 8000bc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bce:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	0c21      	lsrs	r1, r4, #16
 8000bda:	fbbe f6f8 	udiv	r6, lr, r8
 8000bde:	fa1f f78c 	uxth.w	r7, ip
 8000be2:	fb08 e316 	mls	r3, r8, r6, lr
 8000be6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bea:	fb06 f107 	mul.w	r1, r6, r7
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfa:	f080 811f 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 811c 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c10:	fb08 3310 	mls	r3, r8, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 f707 	mul.w	r7, r0, r7
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x92>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c28:	f080 810a 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2c:	42a7      	cmp	r7, r4
 8000c2e:	f240 8107 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c32:	4464      	add	r4, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	1be4      	subs	r4, r4, r7
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	b11d      	cbz	r5, 8000c48 <__udivmoddi4+0xa4>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c5 4300 	strd	r4, r3, [r5]
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	f000 80ef 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5e:	4630      	mov	r0, r6
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f683 	clz	r6, r3
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80f9 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	469e      	mov	lr, r3
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa4>
 8000c86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8092 	bne.w	8000dbe <__udivmoddi4+0x21a>
 8000c9a:	eba1 010c 	sub.w	r1, r1, ip
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	0c20      	lsrs	r0, r4, #16
 8000caa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cae:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	4288      	cmp	r0, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a09      	subs	r1, r1, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79c      	b.n	8000c3e <__udivmoddi4+0x9a>
 8000d04:	f1c6 0720 	rsb	r7, r6, #32
 8000d08:	40b3      	lsls	r3, r6
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa20 f407 	lsr.w	r4, r0, r7
 8000d16:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1a:	431c      	orrs	r4, r3
 8000d1c:	40f9      	lsrs	r1, r7
 8000d1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d22:	fa00 f306 	lsl.w	r3, r0, r6
 8000d26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2a:	0c20      	lsrs	r0, r4, #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fb09 1118 	mls	r1, r9, r8, r1
 8000d34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d38:	fb08 f00e 	mul.w	r0, r8, lr
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1a09      	subs	r1, r1, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d64:	fb09 1110 	mls	r1, r9, r0, r1
 8000d68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d70:	458e      	cmp	lr, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	458e      	cmp	lr, r1
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d8e:	eba1 010e 	sub.w	r1, r1, lr
 8000d92:	42a1      	cmp	r1, r4
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46a6      	mov	lr, r4
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x212>
 8000d9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000da2:	eb61 010e 	sbc.w	r1, r1, lr
 8000da6:	fa01 f707 	lsl.w	r7, r1, r7
 8000daa:	fa22 f306 	lsr.w	r3, r2, r6
 8000dae:	40f1      	lsrs	r1, r6
 8000db0:	431f      	orrs	r7, r3
 8000db2:	e9c5 7100 	strd	r7, r1, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	40d8      	lsrs	r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	4301      	orrs	r1, r0
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ddc:	fb07 3610 	mls	r6, r7, r0, r3
 8000de0:	0c0b      	lsrs	r3, r1, #16
 8000de2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000de6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dea:	429e      	cmp	r6, r3
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	429e      	cmp	r6, r3
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1b9b      	subs	r3, r3, r6
 8000e06:	b289      	uxth	r1, r1
 8000e08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb06 f30e 	mul.w	r3, r6, lr
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3e02      	subs	r6, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1ac9      	subs	r1, r1, r3
 8000e30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	462e      	mov	r6, r5
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e705      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	e6e3      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f8      	b.n	8000c36 <__udivmoddi4+0x92>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4646      	mov	r6, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	3b02      	subs	r3, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e709      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x156>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <Aceleracion_vertical>:

extern float G;
uint8_t flag_detecto_caida;//provisoriamente para compilar

float Aceleracion_vertical(float * zn, float * ya, arm_matrix_instance_f32 * R_b_g)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	//inicio ecuacion 38 Ian = aceleracion vertical
	arm_matrix_instance_f32 Ian,Ian_aux;
	float ian[3]={0,0,0},ian_aux[3]={0,0,0};
 8000e84:	f04f 0300 	mov.w	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
 8000e96:	f04f 0300 	mov.w	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]

	arm_mat_init_f32(&Ian, 3, 1, ian);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	f002 f8bf 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Ian_aux, 3, 1, ian_aux);
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2103      	movs	r1, #3
 8000ec4:	f002 f8b7 	bl	8003036 <arm_mat_init_f32>

	ian_aux[0] = ya[0] - G * zn[0];
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	ed93 7a00 	vldr	s14, [r3]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	edd3 6a00 	vldr	s13, [r3]
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <Aceleracion_vertical+0xd4>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ee2:	edc7 7a04 	vstr	s15, [r7, #16]
	ian_aux[1] = ya[1] - G * zn[1];
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	ed93 7a00 	vldr	s14, [r3]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	edd3 6a00 	vldr	s13, [r3]
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <Aceleracion_vertical+0xd4>)
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f04:	edc7 7a05 	vstr	s15, [r7, #20]
	ian_aux[2] = ya[2] - G * zn[2];
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	3308      	adds	r3, #8
 8000f0c:	ed93 7a00 	vldr	s14, [r3]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3308      	adds	r3, #8
 8000f14:	edd3 6a00 	vldr	s13, [r3]
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <Aceleracion_vertical+0xd4>)
 8000f1a:	edd3 7a00 	vldr	s15, [r3]
 8000f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f26:	edc7 7a06 	vstr	s15, [r7, #24]

	//arm_mat_mult_f32(&Ian, R_b_g, &Ian_aux);//obtengo la aceleracion vertical
	arm_mat_mult_f32(R_b_g, &Ian_aux, &Ian);
 8000f2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f32:	4619      	mov	r1, r3
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f002 face 	bl	80034d6 <arm_mat_mult_f32>
	//fin ecuacion 38
	return ian[2];
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	ee07 3a90 	vmov	s15, r3
}
 8000f40:	eeb0 0a67 	vmov.f32	s0, s15
 8000f44:	3738      	adds	r7, #56	; 0x38
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008

08000f50 <Calculo_theta>:

float Calculo_theta(float * zn) //ecuacion 44
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	float aux_zn =zn[2];
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	60fb      	str	r3, [r7, #12]
	if (aux_zn>1.0 && aux_zn-1.0<0.09)
 8000f5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6e:	dd16      	ble.n	8000f9e <Calculo_theta+0x4e>
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff fa95 	bl	80004a0 <__aeabi_f2d>
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <Calculo_theta+0xb8>)
 8000f7c:	f7ff f930 	bl	80001e0 <__aeabi_dsub>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	a31b      	add	r3, pc, #108	; (adr r3, 8000ff8 <Calculo_theta+0xa8>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff fd51 	bl	8000a34 <__aeabi_dcmplt>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <Calculo_theta+0x4e>
	{
		aux_zn=1.0;
 8000f98:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f9c:	60fb      	str	r3, [r7, #12]
	}

	if (aux_zn<-1.0 && aux_zn+1.0>-0.09)
 8000f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fa2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d515      	bpl.n	8000fdc <Calculo_theta+0x8c>
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff fa75 	bl	80004a0 <__aeabi_f2d>
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <Calculo_theta+0xb8>)
 8000fbc:	f7ff f912 	bl	80001e4 <__adddf3>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	a30d      	add	r3, pc, #52	; (adr r3, 8001000 <Calculo_theta+0xb0>)
 8000fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fce:	f7ff fd4f 	bl	8000a70 <__aeabi_dcmpgt>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <Calculo_theta+0x8c>
	{
		aux_zn=-1.0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <Calculo_theta+0xbc>)
 8000fda:	60fb      	str	r3, [r7, #12]
	}

	return (float)acosf(aux_zn);
 8000fdc:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fe0:	f006 f832 	bl	8007048 <acosf>
 8000fe4:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	70a3d70a 	.word	0x70a3d70a
 8000ffc:	3fb70a3d 	.word	0x3fb70a3d
 8001000:	70a3d70a 	.word	0x70a3d70a
 8001004:	bfb70a3d 	.word	0xbfb70a3d
 8001008:	3ff00000 	.word	0x3ff00000
 800100c:	bf800000 	.word	0xbf800000

08001010 <Promedio_Vel>:

uint32_t Promedio_Vel(float *xnn,uint8_t flag)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	70fb      	strb	r3, [r7, #3]
	//calculo promedio de velocidad
	static uint32_t contador = 1;
	static float Ivavg = 0;


	Ivavg = Ivavg + (xnn[1]-Ivavg)/ contador; //calculo el promedio
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3304      	adds	r3, #4
 8001020:	ed93 7a00 	vldr	s14, [r3]
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <Promedio_Vel+0x78>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <Promedio_Vel+0x7c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800103a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <Promedio_Vel+0x78>)
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <Promedio_Vel+0x78>)
 800104a:	edc3 7a00 	vstr	s15, [r3]

	contador++;
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <Promedio_Vel+0x7c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <Promedio_Vel+0x7c>)
 8001056:	6013      	str	r3, [r2, #0]
	if(flag == 1)
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d106      	bne.n	800106c <Promedio_Vel+0x5c>
	{
		Ivavg = 0;
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <Promedio_Vel+0x78>)
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
		contador = 1;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <Promedio_Vel+0x7c>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]
	}
	//fin del calculo
	return Ivavg;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <Promedio_Vel+0x78>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001076:	ee17 3a90 	vmov	r3, s15
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200000d0 	.word	0x200000d0
 800108c:	20000000 	.word	0x20000000

08001090 <Detector_caida>:

void Detector_caida(float *xnn,float h_pasado, float theta_gravedad, float ian)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	ed87 0a02 	vstr	s0, [r7, #8]
 800109c:	edc7 0a01 	vstr	s1, [r7, #4]
 80010a0:	ed87 1a00 	vstr	s2, [r7]
	static uint8_t estado = 0;
	static float Ivavg=0;



	switch (estado) {
 80010a4:	4b6c      	ldr	r3, [pc, #432]	; (8001258 <Detector_caida+0x1c8>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	f200 80be 	bhi.w	800122a <Detector_caida+0x19a>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <Detector_caida+0x24>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	080010c9 	.word	0x080010c9
 80010b8:	080010f3 	.word	0x080010f3
 80010bc:	08001131 	.word	0x08001131
 80010c0:	0800117f 	.word	0x0800117f
 80010c4:	080011ef 	.word	0x080011ef
		case velocidad:
			if(xnn[1] < Ivth)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3304      	adds	r3, #4
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f9e6 	bl	80004a0 <__aeabi_f2d>
 80010d4:	a358      	add	r3, pc, #352	; (adr r3, 8001238 <Detector_caida+0x1a8>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fcab 	bl	8000a34 <__aeabi_dcmplt>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d100      	bne.n	80010e6 <Detector_caida+0x56>
			{
				estado = aceleracion;
				start_timer_3();//falta configurar el timer en el .ioc
			}
			break;
 80010e4:	e0a2      	b.n	800122c <Detector_caida+0x19c>
				estado = aceleracion;
 80010e6:	4b5c      	ldr	r3, [pc, #368]	; (8001258 <Detector_caida+0x1c8>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
				start_timer_3();//falta configurar el timer en el .ioc
 80010ec:	f001 fe7e 	bl	8002dec <start_timer_3>
			break;
 80010f0:	e09c      	b.n	800122c <Detector_caida+0x19c>
		case aceleracion:
			if(valor_timer_3() >= Tmax_aceleracion)
 80010f2:	f001 fe8d 	bl	8002e10 <valor_timer_3>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a58      	ldr	r2, [pc, #352]	; (800125c <Detector_caida+0x1cc>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d904      	bls.n	8001108 <Detector_caida+0x78>
			{
				stop_timer_3();
 80010fe:	f001 fe97 	bl	8002e30 <stop_timer_3>
				estado = velocidad;
 8001102:	4b55      	ldr	r3, [pc, #340]	; (8001258 <Detector_caida+0x1c8>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
			}
			if(ian < Iazth)
 8001108:	6838      	ldr	r0, [r7, #0]
 800110a:	f7ff f9c9 	bl	80004a0 <__aeabi_f2d>
 800110e:	a34c      	add	r3, pc, #304	; (adr r3, 8001240 <Detector_caida+0x1b0>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	f7ff fc8e 	bl	8000a34 <__aeabi_dcmplt>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d100      	bne.n	8001120 <Detector_caida+0x90>
			{
				stop_timer_3();
				start_timer_3();
				estado = altura;
			}
			break;
 800111e:	e085      	b.n	800122c <Detector_caida+0x19c>
				stop_timer_3();
 8001120:	f001 fe86 	bl	8002e30 <stop_timer_3>
				start_timer_3();
 8001124:	f001 fe62 	bl	8002dec <start_timer_3>
				estado = altura;
 8001128:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <Detector_caida+0x1c8>)
 800112a:	2202      	movs	r2, #2
 800112c:	701a      	strb	r2, [r3, #0]
			break;
 800112e:	e07d      	b.n	800122c <Detector_caida+0x19c>
		case altura:
			if(valor_timer_3() >= Tmax_dh)
 8001130:	f001 fe6e 	bl	8002e10 <valor_timer_3>
 8001134:	4603      	mov	r3, r0
 8001136:	4a4a      	ldr	r2, [pc, #296]	; (8001260 <Detector_caida+0x1d0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d904      	bls.n	8001146 <Detector_caida+0xb6>
			{
				estado = velocidad;
 800113c:	4b46      	ldr	r3, [pc, #280]	; (8001258 <Detector_caida+0x1c8>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
				stop_timer_3();
 8001142:	f001 fe75 	bl	8002e30 <stop_timer_3>
			}
			if((xnn[0]-h_pasado)< d_Hth)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	ed93 7a00 	vldr	s14, [r3]
 800114c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001154:	ee17 0a90 	vmov	r0, s15
 8001158:	f7ff f9a2 	bl	80004a0 <__aeabi_f2d>
 800115c:	a33a      	add	r3, pc, #232	; (adr r3, 8001248 <Detector_caida+0x1b8>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fc67 	bl	8000a34 <__aeabi_dcmplt>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d100      	bne.n	800116e <Detector_caida+0xde>
			{
				stop_timer_3();
				start_timer_3();
				estado = 4;
			}
			break;
 800116c:	e05e      	b.n	800122c <Detector_caida+0x19c>
				stop_timer_3();
 800116e:	f001 fe5f 	bl	8002e30 <stop_timer_3>
				start_timer_3();
 8001172:	f001 fe3b 	bl	8002dec <start_timer_3>
				estado = 4;
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <Detector_caida+0x1c8>)
 8001178:	2204      	movs	r2, #4
 800117a:	701a      	strb	r2, [r3, #0]
			break;
 800117c:	e056      	b.n	800122c <Detector_caida+0x19c>
		case velocidad_avg:
			if(valor_timer_3() >= Tmax_Ivavg)
 800117e:	f001 fe47 	bl	8002e10 <valor_timer_3>
 8001182:	4603      	mov	r3, r0
 8001184:	4a37      	ldr	r2, [pc, #220]	; (8001264 <Detector_caida+0x1d4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d910      	bls.n	80011ac <Detector_caida+0x11c>
			{
				estado = velocidad;
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <Detector_caida+0x1c8>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
				stop_timer_3();
 8001190:	f001 fe4e 	bl	8002e30 <stop_timer_3>
				Ivavg = Promedio_Vel(xnn,Reseteo);
 8001194:	2101      	movs	r1, #1
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f7ff ff3a 	bl	8001010 <Promedio_Vel>
 800119c:	ee07 0a90 	vmov	s15, r0
 80011a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <Detector_caida+0x1d8>)
 80011a6:	edc3 7a00 	vstr	s15, [r3]
 80011aa:	e00a      	b.n	80011c2 <Detector_caida+0x132>
			}
			else
			{
				Ivavg = Promedio_Vel(xnn,ON);
 80011ac:	2100      	movs	r1, #0
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f7ff ff2e 	bl	8001010 <Promedio_Vel>
 80011b4:	ee07 0a90 	vmov	s15, r0
 80011b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <Detector_caida+0x1d8>)
 80011be:	edc3 7a00 	vstr	s15, [r3]
			}
			if( Ivavg < Ivavg_th)
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <Detector_caida+0x1d8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f96a 	bl	80004a0 <__aeabi_f2d>
 80011cc:	a320      	add	r3, pc, #128	; (adr r3, 8001250 <Detector_caida+0x1c0>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff fc2f 	bl	8000a34 <__aeabi_dcmplt>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d100      	bne.n	80011de <Detector_caida+0x14e>
			{
				stop_timer_3();
				start_timer_3();
				estado = theta_g;
			}
			break;
 80011dc:	e026      	b.n	800122c <Detector_caida+0x19c>
				stop_timer_3();
 80011de:	f001 fe27 	bl	8002e30 <stop_timer_3>
				start_timer_3();
 80011e2:	f001 fe03 	bl	8002dec <start_timer_3>
				estado = theta_g;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <Detector_caida+0x1c8>)
 80011e8:	2204      	movs	r2, #4
 80011ea:	701a      	strb	r2, [r3, #0]
			break;
 80011ec:	e01e      	b.n	800122c <Detector_caida+0x19c>
		case theta_g:
			if(valor_timer_3() >= Tmax_thetag)
 80011ee:	f001 fe0f 	bl	8002e10 <valor_timer_3>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a1d      	ldr	r2, [pc, #116]	; (800126c <Detector_caida+0x1dc>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d904      	bls.n	8001204 <Detector_caida+0x174>
			{
				estado = velocidad;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <Detector_caida+0x1c8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
				stop_timer_3();
 8001200:	f001 fe16 	bl	8002e30 <stop_timer_3>
			}
			if( theta_gravedad < theta_g_th)
 8001204:	edd7 7a01 	vldr	s15, [r7, #4]
 8001208:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800120c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	d400      	bmi.n	8001218 <Detector_caida+0x188>
			{
				stop_timer_3();
				flag_detecto_caida = TRUE;//falta definir esto
				estado = velocidad;
			}
			break;
 8001216:	e009      	b.n	800122c <Detector_caida+0x19c>
				stop_timer_3();
 8001218:	f001 fe0a 	bl	8002e30 <stop_timer_3>
				flag_detecto_caida = TRUE;//falta definir esto
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <Detector_caida+0x1e0>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
				estado = velocidad;
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <Detector_caida+0x1c8>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
			break;
 8001228:	e000      	b.n	800122c <Detector_caida+0x19c>
		default:
			break;
 800122a:	bf00      	nop
	}

}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	f3af 8000 	nop.w
 8001238:	33333333 	.word	0x33333333
 800123c:	bff33333 	.word	0xbff33333
 8001240:	33333333 	.word	0x33333333
 8001244:	40273333 	.word	0x40273333
 8001248:	3d70a3d7 	.word	0x3d70a3d7
 800124c:	bfd3d70a 	.word	0xbfd3d70a
 8001250:	9999999a 	.word	0x9999999a
 8001254:	bfd99999 	.word	0xbfd99999
 8001258:	200000d4 	.word	0x200000d4
 800125c:	000c34ff 	.word	0x000c34ff
 8001260:	004c4b3f 	.word	0x004c4b3f
 8001264:	0007a11f 	.word	0x0007a11f
 8001268:	200000d8 	.word	0x200000d8
 800126c:	002dc6bf 	.word	0x002dc6bf
 8001270:	200000cc 	.word	0x200000cc

08001274 <Calculo_F>:
float yg[3];
float znn[3];


void Calculo_F(float yg[], arm_matrix_instance_f32* F)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b098      	sub	sp, #96	; 0x60
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]

	arm_matrix_instance_f32 aux,Ygx;
	float ygx[9];
	float ax[9];

	arm_mat_init_f32(&aux, 3, 3, ax);//auxialiar para ir guardando operaciones
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001286:	2203      	movs	r2, #3
 8001288:	2103      	movs	r1, #3
 800128a:	f001 fed4 	bl	8003036 <arm_mat_init_f32>



	ygx[0]=0;
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
	ygx[1]=-yg[2];
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3308      	adds	r3, #8
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	eef1 7a67 	vneg.f32	s15, s15
 80012a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	ygx[2]=yg[1];
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
	ygx[3]=yg[2];
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
	ygx[4]=0;
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	ygx[5]=-yg[0];
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	eef1 7a67 	vneg.f32	s15, s15
 80012c0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	ygx[6]=-yg[1];
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3304      	adds	r3, #4
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	eef1 7a67 	vneg.f32	s15, s15
 80012d0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	ygx[7]=yg[0];
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	64bb      	str	r3, [r7, #72]	; 0x48
	ygx[8]=0;
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	64fb      	str	r3, [r7, #76]	; 0x4c

	arm_mat_init_f32(&Ygx, 3, 3, ygx);
 80012e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80012e8:	2203      	movs	r2, #3
 80012ea:	2103      	movs	r1, #3
 80012ec:	f001 fea3 	bl	8003036 <arm_mat_init_f32>

	arm_mat_scale_f32(&Ygx, (-dt), &aux);//primera parte de la ecuacion 24 (-delta_t*[yg]x)
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <Calculo_F+0xb0>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	eef1 7a67 	vneg.f32	s15, s15
 80012fa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80012fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001302:	4611      	mov	r1, r2
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	4618      	mov	r0, r3
 800130a:	f002 f9cd 	bl	80036a8 <arm_mat_scale_f32>

	arm_mat_add_f32(&I, &aux, F);//segunda parte de ecuacion 24 I-aux
 800130e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	4804      	ldr	r0, [pc, #16]	; (8001328 <Calculo_F+0xb4>)
 8001318:	f001 fdf5 	bl	8002f06 <arm_mat_add_f32>
}
 800131c:	bf00      	nop
 800131e:	3760      	adds	r7, #96	; 0x60
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000004 	.word	0x20000004
 8001328:	200002c0 	.word	0x200002c0

0800132c <Calculo_Q>:

void Calculo_Q(float znn[], arm_matrix_instance_f32* Q,arm_matrix_instance_f32* Eg )
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0a6      	sub	sp, #152	; 0x98
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
	float kq;
	float ax_1[9];
	float ax_2[9];
	arm_matrix_instance_f32 aux_1,aux_2,Zx;

	kq=(-dt)*dt;//escalar que se utiliza luego en el calculo de Q
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <Calculo_Q+0xe8>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eeb1 7a67 	vneg.f32	s14, s15
 8001342:	4b34      	ldr	r3, [pc, #208]	; (8001414 <Calculo_Q+0xe8>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

	arm_mat_init_f32(&aux_1, 3, 3, ax_1);
 8001350:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001354:	f107 0020 	add.w	r0, r7, #32
 8001358:	2203      	movs	r2, #3
 800135a:	2103      	movs	r1, #3
 800135c:	f001 fe6b 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&aux_2, 3, 3, ax_2);
 8001360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001364:	f107 0018 	add.w	r0, r7, #24
 8001368:	2203      	movs	r2, #3
 800136a:	2103      	movs	r1, #3
 800136c:	f001 fe63 	bl	8003036 <arm_mat_init_f32>


	d_zx[0]=0;
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	673b      	str	r3, [r7, #112]	; 0x70
	d_zx[1]=-znn[2];
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3308      	adds	r3, #8
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	eef1 7a67 	vneg.f32	s15, s15
 8001382:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	d_zx[2]=znn[1];
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	67bb      	str	r3, [r7, #120]	; 0x78
	d_zx[3]=znn[2];
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	67fb      	str	r3, [r7, #124]	; 0x7c
	d_zx[4]=0;
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	d_zx[5]=-znn[0];
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eef1 7a67 	vneg.f32	s15, s15
 80013a4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	d_zx[6]=-znn[1];
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3304      	adds	r3, #4
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	eef1 7a67 	vneg.f32	s15, s15
 80013b4:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	d_zx[7]=znn[0];
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	d_zx[8]=0;
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	arm_mat_init_f32(&Zx, 3, 3, d_zx);//matriz producto vectorial de Znn
 80013c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013cc:	f107 0010 	add.w	r0, r7, #16
 80013d0:	2203      	movs	r2, #3
 80013d2:	2103      	movs	r1, #3
 80013d4:	f001 fe2f 	bl	8003036 <arm_mat_init_f32>

	arm_mat_mult_f32(Eg,&Zx,&aux_1);//primer producto vectorial de ec 26 (Eg.[Znn]x)
 80013d8:	f107 0220 	add.w	r2, r7, #32
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f002 f877 	bl	80034d6 <arm_mat_mult_f32>
	arm_mat_mult_f32(&Zx,&aux_1,&aux_2);//segundo producto vectorial de ec26
 80013e8:	f107 0218 	add.w	r2, r7, #24
 80013ec:	f107 0120 	add.w	r1, r7, #32
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 f86e 	bl	80034d6 <arm_mat_mult_f32>
	arm_mat_scale_f32(&aux_2, kq, Q);//escalamiento final de Q ec 26
 80013fa:	f107 0318 	add.w	r3, r7, #24
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	ed97 0a25 	vldr	s0, [r7, #148]	; 0x94
 8001404:	4618      	mov	r0, r3
 8001406:	f002 f94f 	bl	80036a8 <arm_mat_scale_f32>


}
 800140a:	bf00      	nop
 800140c:	3798      	adds	r7, #152	; 0x98
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000004 	.word	0x20000004

08001418 <Calculo_H>:

void Calculo_H(arm_matrix_instance_f32* H)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	arm_mat_scale_f32(&I, G, H);// H = I*g ecuacion 31
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <Calculo_H+0x24>)
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	eeb0 0a67 	vmov.f32	s0, s15
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <Calculo_H+0x28>)
 800142e:	f002 f93b 	bl	80036a8 <arm_mat_scale_f32>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008
 8001440:	200002c0 	.word	0x200002c0

08001444 <Calculo_Rn>:

void Calculo_Rn(arm_matrix_instance_f32* Ea, arm_matrix_instance_f32* Rn, float a_p[])
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b094      	sub	sp, #80	; 0x50
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
	arm_matrix_instance_f32 Ee;
	float d_Ee[9];
	float norma_ap;
	float ca=0.1;
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <Calculo_Rn+0xbc>)
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c
	float k=0;
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	64bb      	str	r3, [r7, #72]	; 0x48
	float a=0.333333333;
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <Calculo_Rn+0xc0>)
 800145c:	647b      	str	r3, [r7, #68]	; 0x44
	arm_mat_init_f32(&Ee, 3, 3, d_Ee);//solo primea vez
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001466:	2203      	movs	r2, #3
 8001468:	2103      	movs	r1, #3
 800146a:	f001 fde4 	bl	8003036 <arm_mat_init_f32>

	norma_ap= a_p[0]*a_p[0] + a_p[1]*a_p[1] + a_p[2]*a_p[2];
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	ed93 7a00 	vldr	s14, [r3]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3304      	adds	r3, #4
 8001482:	edd3 6a00 	vldr	s13, [r3]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3304      	adds	r3, #4
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001492:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3308      	adds	r3, #8
 800149a:	edd3 6a00 	vldr	s13, [r3]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3308      	adds	r3, #8
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	k = norma_ap*ca*ca;//calculo del escalar que multiplica a identidad en ecuacion 35
 80014b2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80014b6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80014ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014be:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80014c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	k=k*a;
 80014ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80014ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	arm_mat_scale_f32(&I, k, &Ee);//Ee = I*k ecuacion 35
 80014da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014de:	4619      	mov	r1, r3
 80014e0:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 80014e4:	4808      	ldr	r0, [pc, #32]	; (8001508 <Calculo_Rn+0xc4>)
 80014e6:	f002 f8df 	bl	80036a8 <arm_mat_scale_f32>

	arm_mat_add_f32(&Ee, Ea, Rn); //ecuacion 33
 80014ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	68f9      	ldr	r1, [r7, #12]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 fd07 	bl	8002f06 <arm_mat_add_f32>
}
 80014f8:	bf00      	nop
 80014fa:	3750      	adds	r7, #80	; 0x50
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	3dcccccd 	.word	0x3dcccccd
 8001504:	3eaaaaab 	.word	0x3eaaaaab
 8001508:	200002c0 	.word	0x200002c0
 800150c:	00000000 	.word	0x00000000

08001510 <Calculo_matriz_Rb>:

//chequear pasajes de argumentos
uint8_t Calculo_matriz_Rb(arm_matrix_instance_f32* R_b_g, float *zn)
{
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b0a4      	sub	sp, #144	; 0x90
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
	//inicio ecuacion 37
	arm_matrix_instance_f32 R_aux1,R_aux2; //R que depende de beta y gamma
	float r_aux1[9]={0,0,0,0,1,0,0,0,0},r_aux2[9]={1,0,0,0,0,0,0,0,0},cos_b=0,sen_b=0,cos_g=0,sen_g=0,aux_zn[]={zn[0],zn[1],zn[2]};
 800151a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800151e:	2224      	movs	r2, #36	; 0x24
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fb2e 	bl	8006b84 <memset>
 8001528:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800152c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800152e:	f107 0318 	add.w	r3, r7, #24
 8001532:	2224      	movs	r2, #36	; 0x24
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f005 fb24 	bl	8006b84 <memset>
 800153c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	617b      	str	r3, [r7, #20]
	double gamma=0,beta = 0;
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	arm_mat_init_f32(&R_aux1, 3, 3, r_aux1);
 800158c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001590:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001594:	2203      	movs	r2, #3
 8001596:	2103      	movs	r1, #3
 8001598:	f001 fd4d 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&R_aux2, 3, 3, r_aux2);
 800159c:	f107 0318 	add.w	r3, r7, #24
 80015a0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80015a4:	2203      	movs	r2, #3
 80015a6:	2103      	movs	r1, #3
 80015a8:	f001 fd45 	bl	8003036 <arm_mat_init_f32>

	//chequear que no se pasen los valores mucho de uno

	if (aux_zn[0]>1.0 && aux_zn[0]-1.0<0.2)
 80015ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015bc:	dd18      	ble.n	80015f0 <Calculo_matriz_Rb+0xe0>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff6d 	bl	80004a0 <__aeabi_f2d>
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	4bc1      	ldr	r3, [pc, #772]	; (80018d0 <Calculo_matriz_Rb+0x3c0>)
 80015cc:	f7fe fe08 	bl	80001e0 <__aeabi_dsub>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	a3b9      	add	r3, pc, #740	; (adr r3, 80018c0 <Calculo_matriz_Rb+0x3b0>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff fa29 	bl	8000a34 <__aeabi_dcmplt>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <Calculo_matriz_Rb+0xe0>
	{
		aux_zn[0]=1.0;
 80015e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	e01f      	b.n	8001630 <Calculo_matriz_Rb+0x120>
	}else if (aux_zn[0]>1.0 && aux_zn[0]-1.0>0.2)
 80015f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001600:	dd16      	ble.n	8001630 <Calculo_matriz_Rb+0x120>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff4b 	bl	80004a0 <__aeabi_f2d>
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	4bb0      	ldr	r3, [pc, #704]	; (80018d0 <Calculo_matriz_Rb+0x3c0>)
 8001610:	f7fe fde6 	bl	80001e0 <__aeabi_dsub>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	a3a8      	add	r3, pc, #672	; (adr r3, 80018c0 <Calculo_matriz_Rb+0x3b0>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7ff fa25 	bl	8000a70 <__aeabi_dcmpgt>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <Calculo_matriz_Rb+0x120>
	{
		return 1;
 800162c:	2301      	movs	r3, #1
 800162e:	e1e7      	b.n	8001a00 <Calculo_matriz_Rb+0x4f0>
	}

	if (aux_zn[0]<-1.0 && aux_zn[0]+1.0>-0.2)
 8001630:	edd7 7a03 	vldr	s15, [r7, #12]
 8001634:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	d517      	bpl.n	8001672 <Calculo_matriz_Rb+0x162>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff2b 	bl	80004a0 <__aeabi_f2d>
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	4ba0      	ldr	r3, [pc, #640]	; (80018d0 <Calculo_matriz_Rb+0x3c0>)
 8001650:	f7fe fdc8 	bl	80001e4 <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	a39a      	add	r3, pc, #616	; (adr r3, 80018c8 <Calculo_matriz_Rb+0x3b8>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7ff fa05 	bl	8000a70 <__aeabi_dcmpgt>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <Calculo_matriz_Rb+0x162>
	{
		aux_zn[0]=-1.0;
 800166c:	4b99      	ldr	r3, [pc, #612]	; (80018d4 <Calculo_matriz_Rb+0x3c4>)
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e01f      	b.n	80016b2 <Calculo_matriz_Rb+0x1a2>
	}else if (aux_zn[0]<-1.0 && aux_zn[0]+1.0<-0.2)
 8001672:	edd7 7a03 	vldr	s15, [r7, #12]
 8001676:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800167a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	d516      	bpl.n	80016b2 <Calculo_matriz_Rb+0x1a2>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff0a 	bl	80004a0 <__aeabi_f2d>
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	4b8f      	ldr	r3, [pc, #572]	; (80018d0 <Calculo_matriz_Rb+0x3c0>)
 8001692:	f7fe fda7 	bl	80001e4 <__adddf3>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	a38a      	add	r3, pc, #552	; (adr r3, 80018c8 <Calculo_matriz_Rb+0x3b8>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	f7ff f9c6 	bl	8000a34 <__aeabi_dcmplt>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <Calculo_matriz_Rb+0x1a2>
	{
		return 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e1a6      	b.n	8001a00 <Calculo_matriz_Rb+0x4f0>
	}


	if (aux_zn[1]>1.0 && aux_zn[1]-1.0<0.2)
 80016b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	dd18      	ble.n	80016f6 <Calculo_matriz_Rb+0x1e6>
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe feea 	bl	80004a0 <__aeabi_f2d>
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b7f      	ldr	r3, [pc, #508]	; (80018d0 <Calculo_matriz_Rb+0x3c0>)
 80016d2:	f7fe fd85 	bl	80001e0 <__aeabi_dsub>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	a378      	add	r3, pc, #480	; (adr r3, 80018c0 <Calculo_matriz_Rb+0x3b0>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7ff f9a6 	bl	8000a34 <__aeabi_dcmplt>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <Calculo_matriz_Rb+0x1e6>
	{
		aux_zn[1]=1.0;
 80016ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	e01f      	b.n	8001736 <Calculo_matriz_Rb+0x226>
	}else if (aux_zn[1]>1.0 && aux_zn[1]-1.0>0.2)
 80016f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	dd16      	ble.n	8001736 <Calculo_matriz_Rb+0x226>
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fec8 	bl	80004a0 <__aeabi_f2d>
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b6e      	ldr	r3, [pc, #440]	; (80018d0 <Calculo_matriz_Rb+0x3c0>)
 8001716:	f7fe fd63 	bl	80001e0 <__aeabi_dsub>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	a367      	add	r3, pc, #412	; (adr r3, 80018c0 <Calculo_matriz_Rb+0x3b0>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	f7ff f9a2 	bl	8000a70 <__aeabi_dcmpgt>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <Calculo_matriz_Rb+0x226>
	{
		return 1;
 8001732:	2301      	movs	r3, #1
 8001734:	e164      	b.n	8001a00 <Calculo_matriz_Rb+0x4f0>
	}

	if (aux_zn[1]<-1.0 && aux_zn[1]+1.0>-0.2)
 8001736:	edd7 7a04 	vldr	s15, [r7, #16]
 800173a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800173e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	d517      	bpl.n	8001778 <Calculo_matriz_Rb+0x268>
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fea8 	bl	80004a0 <__aeabi_f2d>
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	4b5e      	ldr	r3, [pc, #376]	; (80018d0 <Calculo_matriz_Rb+0x3c0>)
 8001756:	f7fe fd45 	bl	80001e4 <__adddf3>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	a359      	add	r3, pc, #356	; (adr r3, 80018c8 <Calculo_matriz_Rb+0x3b8>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7ff f982 	bl	8000a70 <__aeabi_dcmpgt>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <Calculo_matriz_Rb+0x268>
	{
		aux_zn[1]=-1.0;
 8001772:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <Calculo_matriz_Rb+0x3c4>)
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	e01f      	b.n	80017b8 <Calculo_matriz_Rb+0x2a8>
	}else if (aux_zn[1]<-1.0 && aux_zn[1]+1.0<-0.2)
 8001778:	edd7 7a04 	vldr	s15, [r7, #16]
 800177c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d516      	bpl.n	80017b8 <Calculo_matriz_Rb+0x2a8>
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fe87 	bl	80004a0 <__aeabi_f2d>
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4b4e      	ldr	r3, [pc, #312]	; (80018d0 <Calculo_matriz_Rb+0x3c0>)
 8001798:	f7fe fd24 	bl	80001e4 <__adddf3>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	a348      	add	r3, pc, #288	; (adr r3, 80018c8 <Calculo_matriz_Rb+0x3b8>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	f7ff f943 	bl	8000a34 <__aeabi_dcmplt>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <Calculo_matriz_Rb+0x2a8>
	{
		return 1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e123      	b.n	8001a00 <Calculo_matriz_Rb+0x4f0>
	}


	if (aux_zn[2]>1.0 && aux_zn[2]-1.0<0.2)
 80017b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80017bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c8:	dd18      	ble.n	80017fc <Calculo_matriz_Rb+0x2ec>
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fe67 	bl	80004a0 <__aeabi_f2d>
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <Calculo_matriz_Rb+0x3c0>)
 80017d8:	f7fe fd02 	bl	80001e0 <__aeabi_dsub>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	a336      	add	r3, pc, #216	; (adr r3, 80018c0 <Calculo_matriz_Rb+0x3b0>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7ff f923 	bl	8000a34 <__aeabi_dcmplt>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <Calculo_matriz_Rb+0x2ec>
	{
		aux_zn[2]=1.0;
 80017f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e01f      	b.n	800183c <Calculo_matriz_Rb+0x32c>
	}else if (aux_zn[2]>1.0 && aux_zn[2]-1.0>0.2)
 80017fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	dd16      	ble.n	800183c <Calculo_matriz_Rb+0x32c>
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe45 	bl	80004a0 <__aeabi_f2d>
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <Calculo_matriz_Rb+0x3c0>)
 800181c:	f7fe fce0 	bl	80001e0 <__aeabi_dsub>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	a325      	add	r3, pc, #148	; (adr r3, 80018c0 <Calculo_matriz_Rb+0x3b0>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7ff f91f 	bl	8000a70 <__aeabi_dcmpgt>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <Calculo_matriz_Rb+0x32c>
	{
		return 1;
 8001838:	2301      	movs	r3, #1
 800183a:	e0e1      	b.n	8001a00 <Calculo_matriz_Rb+0x4f0>
	}

	if (aux_zn[2]<-1.0 && aux_zn[2]+1.0>-0.2)
 800183c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001840:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184c:	d517      	bpl.n	800187e <Calculo_matriz_Rb+0x36e>
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe25 	bl	80004a0 <__aeabi_f2d>
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <Calculo_matriz_Rb+0x3c0>)
 800185c:	f7fe fcc2 	bl	80001e4 <__adddf3>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	a317      	add	r3, pc, #92	; (adr r3, 80018c8 <Calculo_matriz_Rb+0x3b8>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7ff f8ff 	bl	8000a70 <__aeabi_dcmpgt>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <Calculo_matriz_Rb+0x36e>
	{
		aux_zn[2]=-1.0;
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <Calculo_matriz_Rb+0x3c4>)
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e02c      	b.n	80018d8 <Calculo_matriz_Rb+0x3c8>
	}else if (aux_zn[2]<-1.0 && aux_zn[2]+1.0<-0.2)
 800187e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001882:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	d523      	bpl.n	80018d8 <Calculo_matriz_Rb+0x3c8>
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe04 	bl	80004a0 <__aeabi_f2d>
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <Calculo_matriz_Rb+0x3c0>)
 800189e:	f7fe fca1 	bl	80001e4 <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	a307      	add	r3, pc, #28	; (adr r3, 80018c8 <Calculo_matriz_Rb+0x3b8>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7ff f8c0 	bl	8000a34 <__aeabi_dcmplt>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00e      	beq.n	80018d8 <Calculo_matriz_Rb+0x3c8>
	{
		return 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0a0      	b.n	8001a00 <Calculo_matriz_Rb+0x4f0>
 80018be:	bf00      	nop
 80018c0:	9999999a 	.word	0x9999999a
 80018c4:	3fc99999 	.word	0x3fc99999
 80018c8:	9999999a 	.word	0x9999999a
 80018cc:	bfc99999 	.word	0xbfc99999
 80018d0:	3ff00000 	.word	0x3ff00000
 80018d4:	bf800000 	.word	0xbf800000
	}


	//calculo beta y gamma
	gamma = atan((double) zn[1]/zn[2]);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	3304      	adds	r3, #4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fdde 	bl	80004a0 <__aeabi_f2d>
 80018e4:	4604      	mov	r4, r0
 80018e6:	460d      	mov	r5, r1
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	3308      	adds	r3, #8
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fdd6 	bl	80004a0 <__aeabi_f2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7fe ff52 	bl	80007a4 <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	ec43 2b17 	vmov	d7, r2, r3
 8001908:	eeb0 0a47 	vmov.f32	s0, s14
 800190c:	eef0 0a67 	vmov.f32	s1, s15
 8001910:	f005 f942 	bl	8006b98 <atan>
 8001914:	ed87 0b1e 	vstr	d0, [r7, #120]	; 0x78

	sen_g= sin(gamma);
 8001918:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 800191c:	f005 fb3c 	bl	8006f98 <sin>
 8001920:	ec53 2b10 	vmov	r2, r3, d0
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f8d4 	bl	8000ad4 <__aeabi_d2f>
 800192c:	4603      	mov	r3, r0
 800192e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	cos_g= cos(gamma);
 8001932:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 8001936:	f005 facf 	bl	8006ed8 <cos>
 800193a:	ec53 2b10 	vmov	r2, r3, d0
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff f8c7 	bl	8000ad4 <__aeabi_d2f>
 8001946:	4603      	mov	r3, r0
 8001948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	beta = atan(zn[0]*sen_g/zn[2]);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	ed93 7a00 	vldr	s14, [r3]
 8001952:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001956:	ee27 7a27 	vmul.f32	s14, s14, s15
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	3308      	adds	r3, #8
 800195e:	edd3 7a00 	vldr	s15, [r3]
 8001962:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001966:	ee16 0a90 	vmov	r0, s13
 800196a:	f7fe fd99 	bl	80004a0 <__aeabi_f2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	ec43 2b10 	vmov	d0, r2, r3
 8001976:	f005 f90f 	bl	8006b98 <atan>
 800197a:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70

	//para que solo se utilize una ves las funciones matematicas las cargo en variables.
	cos_b= cos(beta);
 800197e:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 8001982:	f005 faa9 	bl	8006ed8 <cos>
 8001986:	ec53 2b10 	vmov	r2, r3, d0
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f7ff f8a1 	bl	8000ad4 <__aeabi_d2f>
 8001992:	4603      	mov	r3, r0
 8001994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	sen_b= sin(beta);
 8001998:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 800199c:	f005 fafc 	bl	8006f98 <sin>
 80019a0:	ec53 2b10 	vmov	r2, r3, d0
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	f7ff f894 	bl	8000ad4 <__aeabi_d2f>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	//sen_g= sin(gamma);
	//cos_g= cos(gamma);


	//cargo los valores de la 1ra matriz auxiliar
	r_aux1[0] = (float)cos_b;
 80019b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	r_aux1[2] = (float)sen_b;
 80019b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019bc:	647b      	str	r3, [r7, #68]	; 0x44
	r_aux1[6] = (float)-sen_b;
 80019be:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80019c2:	eef1 7a67 	vneg.f32	s15, s15
 80019c6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	r_aux1[8] = (float)cos_b;
 80019ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019ce:	65fb      	str	r3, [r7, #92]	; 0x5c

	//cargo los valores de la 2da matriz auxiliar
	r_aux2[4] = (float)cos_g;
 80019d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
	r_aux2[5] = (float)-sen_g;
 80019d6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80019da:	eef1 7a67 	vneg.f32	s15, s15
 80019de:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	r_aux2[7] = (float)sen_g;
 80019e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
	r_aux2[8] = (float)cos_g;
 80019e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019ec:	63bb      	str	r3, [r7, #56]	; 0x38

	//arm_mat_mult_f32(R_b_g, &R_aux1, &R_aux2);//calculo la matriz de rotacion
	arm_mat_mult_f32(&R_aux1, &R_aux1, R_b_g);
 80019ee:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80019f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 fd6c 	bl	80034d6 <arm_mat_mult_f32>
	//fin ecuacion 37
	return 0;//salio bien
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3790      	adds	r7, #144	; 0x90
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bdb0      	pop	{r4, r5, r7, pc}

08001a08 <Calculo_Xnn>:

void Calculo_Xnn(arm_matrix_instance_f32 * Xnn, float * h_pasado, float iaz)//xnn tiene 2 posiciones, iaz es el valor devuelto por aceleracion vertical
{
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b092      	sub	sp, #72	; 0x48
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	ed87 0a01 	vstr	s0, [r7, #4]
	//inicio ecuacion 39 --> calculo del Xnn (vector de estado del sistema)
	arm_matrix_instance_f32 Xnp,Mat_aux,T_aux1;
	static float xnp[2]={0,0},aux = 0;//Xn;n-1
	static float h_dif = 0;
	float t_aux2[2]={0.5*dt*dt,dt},t_aux1[4]={1,dt,0,1},mat_aux[2]={0,0};
 8001a16:	4b51      	ldr	r3, [pc, #324]	; (8001b5c <Calculo_Xnn+0x154>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fd40 	bl	80004a0 <__aeabi_f2d>
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	4b4e      	ldr	r3, [pc, #312]	; (8001b60 <Calculo_Xnn+0x158>)
 8001a26:	f7fe fd93 	bl	8000550 <__aeabi_dmul>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4614      	mov	r4, r2
 8001a30:	461d      	mov	r5, r3
 8001a32:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <Calculo_Xnn+0x154>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd32 	bl	80004a0 <__aeabi_f2d>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4620      	mov	r0, r4
 8001a42:	4629      	mov	r1, r5
 8001a44:	f7fe fd84 	bl	8000550 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f840 	bl	8000ad4 <__aeabi_d2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a58:	4b40      	ldr	r3, [pc, #256]	; (8001b5c <Calculo_Xnn+0x154>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a5e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a62:	61bb      	str	r3, [r7, #24]
 8001a64:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <Calculo_Xnn+0x154>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]

	arm_mat_init_f32(&T_aux1, 2, 2, t_aux1);
 8001a82:	f107 0318 	add.w	r3, r7, #24
 8001a86:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	f001 fad2 	bl	8003036 <arm_mat_init_f32>

	//estas definiciones no se usan, pero ya dejo incializadas las matrices.
	arm_mat_init_f32(&Xnp, 2, 1, xnp);
 8001a92:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001a96:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <Calculo_Xnn+0x15c>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	f001 facb 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Mat_aux, 2, 1, mat_aux);
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2102      	movs	r1, #2
 8001aac:	f001 fac3 	bl	8003036 <arm_mat_init_f32>
	//1ra parte de la suma
	//arm_mat_mult_f32(&Mat_aux, &T_aux1, &Xnp);
	arm_mat_mult_f32(&T_aux1, &Xnp, &Mat_aux);
 8001ab0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ab4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001ab8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 fd0a 	bl	80034d6 <arm_mat_mult_f32>

	//calculo final --> suma de matrices 2x1
	Xnn->pData[0]= mat_aux[0]+ t_aux2[0] * iaz;
 8001ac2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ac6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ada:	edc3 7a00 	vstr	s15, [r3]
	Xnn->pData[1]= mat_aux[1]+ t_aux2[1] * iaz;
 8001ade:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ae2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	3304      	adds	r3, #4
 8001af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af8:	edc3 7a00 	vstr	s15, [r3]

	//guardo el valor actual (proximo pasado)
	if(aux == 0)
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <Calculo_Xnn+0x160>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	d105      	bne.n	8001b18 <Calculo_Xnn+0x110>
	{
		start_timer_4();
 8001b0c:	f001 f9a0 	bl	8002e50 <start_timer_4>
		aux = 1;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <Calculo_Xnn+0x160>)
 8001b12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b16:	601a      	str	r2, [r3, #0]
	}
	if(valor_timer_4() >= T_MAX_H)
 8001b18:	f001 f9ac 	bl	8002e74 <valor_timer_4>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <Calculo_Xnn+0x164>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d908      	bls.n	8001b36 <Calculo_Xnn+0x12e>
	{
		stop_timer_4();
 8001b24:	f001 f9b6 	bl	8002e94 <stop_timer_4>
		h_dif = Xnn->pData[0];
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <Calculo_Xnn+0x168>)
 8001b30:	6013      	str	r3, [r2, #0]
		start_timer_4();
 8001b32:	f001 f98d 	bl	8002e50 <start_timer_4>
	}
	xnp[0] = Xnn->pData[0];
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <Calculo_Xnn+0x15c>)
 8001b3e:	6013      	str	r3, [r2, #0]
	xnp[1] = Xnn->pData[1];
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <Calculo_Xnn+0x15c>)
 8001b48:	6053      	str	r3, [r2, #4]

	*h_pasado = h_dif;//devuelve el valor pasado
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <Calculo_Xnn+0x168>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	601a      	str	r2, [r3, #0]
	//fin ecuacion 39
}
 8001b52:	bf00      	nop
 8001b54:	3748      	adds	r7, #72	; 0x48
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bdb0      	pop	{r4, r5, r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000004 	.word	0x20000004
 8001b60:	3fe00000 	.word	0x3fe00000
 8001b64:	200002c8 	.word	0x200002c8
 8001b68:	200002d0 	.word	0x200002d0
 8001b6c:	004c4b3f 	.word	0x004c4b3f
 8001b70:	200002d4 	.word	0x200002d4

08001b74 <fil_kal>:

void fil_kal(float* yg, float* ya, arm_matrix_instance_f32* Ap, arm_matrix_instance_f32* Xaa, arm_matrix_instance_f32* Xap, arm_matrix_instance_f32* Paa, arm_matrix_instance_f32* Pap, uint16_t primero, float cov_a[],float cov_g[])
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	ed2d 8b02 	vpush	{d8}
 8001b7a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	f507 7422 	add.w	r4, r7, #648	; 0x288
 8001b84:	f5a4 741f 	sub.w	r4, r4, #636	; 0x27c
 8001b88:	6020      	str	r0, [r4, #0]
 8001b8a:	f507 7022 	add.w	r0, r7, #648	; 0x288
 8001b8e:	f5a0 7020 	sub.w	r0, r0, #640	; 0x280
 8001b92:	6001      	str	r1, [r0, #0]
 8001b94:	f507 7122 	add.w	r1, r7, #648	; 0x288
 8001b98:	f5a1 7121 	sub.w	r1, r1, #644	; 0x284
 8001b9c:	600a      	str	r2, [r1, #0]
 8001b9e:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8001ba2:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8001ba6:	6013      	str	r3, [r2, #0]
	arm_matrix_instance_f32 Zpnn;
	//arm_matrix_instance_f32 Ap;
	//acoplado
	arm_matrix_instance_f32 R_b_g,Xnn;
	static float  h_pasado = 0;
	float iaz = 0;
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	float32_t norma_1, norma_2;

	float h[9], g[9], f[9], q[9], A[9], B[9], E[9], AX[9], C[3], D[3],ht[9],zn[3],kn[9], zpnn[3];
	float xnn[2]={0,0},r_b_g[9]={0,0,0,0,0,0,0,0,0};
 8001bb0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001bb4:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001bc2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001bd0:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	2324      	movs	r3, #36	; 0x24
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2100      	movs	r1, #0
 8001bdc:	f004 ffd2 	bl	8006b84 <memset>

	arm_mat_init_f32(&I, 3, 3,identidad);
 8001be0:	4bc3      	ldr	r3, [pc, #780]	; (8001ef0 <fil_kal+0x37c>)
 8001be2:	2203      	movs	r2, #3
 8001be4:	2103      	movs	r1, #3
 8001be6:	48c3      	ldr	r0, [pc, #780]	; (8001ef4 <fil_kal+0x380>)
 8001be8:	f001 fa25 	bl	8003036 <arm_mat_init_f32>


	arm_mat_init_f32(&H, 3, 3, h);
 8001bec:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001bf0:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	f001 fa1d 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&F, 3, 3, f);
 8001bfc:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001c00:	f507 701b 	add.w	r0, r7, #620	; 0x26c
 8001c04:	2203      	movs	r2, #3
 8001c06:	2103      	movs	r1, #3
 8001c08:	f001 fa15 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Rn, 3, 3, g);
 8001c0c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001c10:	f507 7015 	add.w	r0, r7, #596	; 0x254
 8001c14:	2203      	movs	r2, #3
 8001c16:	2103      	movs	r1, #3
 8001c18:	f001 fa0d 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Q, 3, 3, q);
 8001c1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001c20:	f507 7019 	add.w	r0, r7, #612	; 0x264
 8001c24:	2203      	movs	r2, #3
 8001c26:	2103      	movs	r1, #3
 8001c28:	f001 fa05 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Ea, 3, 3, cov_a);
 8001c2c:	f507 7013 	add.w	r0, r7, #588	; 0x24c
 8001c30:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001c34:	2203      	movs	r2, #3
 8001c36:	2103      	movs	r1, #3
 8001c38:	f001 f9fd 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Eg, 3, 3, cov_g);
 8001c3c:	f507 7011 	add.w	r0, r7, #580	; 0x244
 8001c40:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001c44:	2203      	movs	r2, #3
 8001c46:	2103      	movs	r1, #3
 8001c48:	f001 f9f5 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Ya, 3, 1, ya);
 8001c4c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001c50:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001c54:	f507 70fa 	add.w	r0, r7, #500	; 0x1f4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2103      	movs	r1, #3
 8001c5e:	f001 f9ea 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&a, 3, 3, A);
 8001c62:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001c66:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	2103      	movs	r1, #3
 8001c6e:	f001 f9e2 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&b, 3, 3, B);
 8001c72:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c76:	f507 700d 	add.w	r0, r7, #564	; 0x234
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	2103      	movs	r1, #3
 8001c7e:	f001 f9da 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&e, 3, 3, E);
 8001c82:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c86:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	2103      	movs	r1, #3
 8001c8e:	f001 f9d2 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&ax, 3, 3, AX);
 8001c92:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c96:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	2103      	movs	r1, #3
 8001c9e:	f001 f9ca 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&c, 3, 1, C);
 8001ca2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ca6:	f507 700b 	add.w	r0, r7, #556	; 0x22c
 8001caa:	2201      	movs	r2, #1
 8001cac:	2103      	movs	r1, #3
 8001cae:	f001 f9c2 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&d, 3, 1, D);
 8001cb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cb6:	f507 7009 	add.w	r0, r7, #548	; 0x224
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2103      	movs	r1, #3
 8001cbe:	f001 f9ba 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Ht, 3, 3, ht);
 8001cc2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cc6:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8001cca:	2203      	movs	r2, #3
 8001ccc:	2103      	movs	r1, #3
 8001cce:	f001 f9b2 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Zn, 3, 1, zn);
 8001cd2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cd6:	f507 7001 	add.w	r0, r7, #516	; 0x204
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2103      	movs	r1, #3
 8001cde:	f001 f9aa 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Kn, 3, 3, kn);
 8001ce2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ce6:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8001cea:	2203      	movs	r2, #3
 8001cec:	2103      	movs	r1, #3
 8001cee:	f001 f9a2 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Zpnn, 3, 3, zpnn);
 8001cf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cf6:	f507 70f6 	add.w	r0, r7, #492	; 0x1ec
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	2103      	movs	r1, #3
 8001cfe:	f001 f99a 	bl	8003036 <arm_mat_init_f32>
	//arm_mat_init_f32(&Ap, 3, 1, a_p);
	//acoplado
	arm_mat_init_f32(&Xnn, 2, 1, xnn);
 8001d02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d06:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	f001 f992 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&R_b_g, 3, 3, r_b_g);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	f507 70f2 	add.w	r0, r7, #484	; 0x1e4
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	2103      	movs	r1, #3
 8001d1e:	f001 f98a 	bl	8003036 <arm_mat_init_f32>

	if (primero==0)
 8001d22:	f8b7 32ac 	ldrh.w	r3, [r7, #684]	; 0x2ac
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 818f 	bne.w	800204a <fil_kal+0x4d6>
	{
		Calculo_H(&H);
 8001d2c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fb71 	bl	8001418 <Calculo_H>

		Calculo_Rn(&Ea, &Rn, Ap->pData);
 8001d36:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001d3a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	f507 7115 	add.w	r1, r7, #596	; 0x254
 8001d46:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fb7a 	bl	8001444 <Calculo_Rn>


		//Kn = P_a_p.Ht.(H.P_a_p.Ht + Rn)-1

		arm_mat_trans_f32(&H, &Ht);
 8001d50:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001d54:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f001 fd28 	bl	80037b0 <arm_mat_trans_f32>
		arm_mat_mult_f32(Pap, &Ht, &b);
 8001d60:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8001d64:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f8d7 02a8 	ldr.w	r0, [r7, #680]	; 0x2a8
 8001d6e:	f001 fbb2 	bl	80034d6 <arm_mat_mult_f32>
		arm_mat_mult_f32(&H, &b, &a);
 8001d72:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8001d76:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8001d7a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f001 fba9 	bl	80034d6 <arm_mat_mult_f32>
		arm_mat_add_f32(&a, &Rn, &b);
 8001d84:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8001d88:	f507 7115 	add.w	r1, r7, #596	; 0x254
 8001d8c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001d90:	4618      	mov	r0, r3
 8001d92:	f001 f8b8 	bl	8002f06 <arm_mat_add_f32>
		arm_mat_inverse_f32(&b, &a);
 8001d96:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8001d9a:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 f960 	bl	8003066 <arm_mat_inverse_f32>
		arm_mat_mult_f32(&Ht, &a, &b);
 8001da6:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8001daa:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8001dae:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 fb8f 	bl	80034d6 <arm_mat_mult_f32>
		arm_mat_mult_f32(Pap,&b,&Kn);
 8001db8:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8001dbc:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f8d7 02a8 	ldr.w	r0, [r7, #680]	; 0x2a8
 8001dc6:	f001 fb86 	bl	80034d6 <arm_mat_mult_f32>

		//zn = ya -Ca*(a_p_p)

		arm_mat_scale_f32(Ap, -Ca, &c);
 8001dca:	4b4b      	ldr	r3, [pc, #300]	; (8001ef8 <fil_kal+0x384>)
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	eef1 7a67 	vneg.f32	s15, s15
 8001dd4:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8001dd8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001ddc:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001de0:	4611      	mov	r1, r2
 8001de2:	eeb0 0a67 	vmov.f32	s0, s15
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	f001 fc5e 	bl	80036a8 <arm_mat_scale_f32>
		//arm_mat_scale_f32(&Ya, G, &d);
		arm_mat_add_f32(&Ya, &c, &Zn);
 8001dec:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8001df0:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8001df4:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f001 f884 	bl	8002f06 <arm_mat_add_f32>

		//x_a_a = x_a_p + Kn.(zn - H.x_a_p)

		arm_mat_mult_f32(&H, Xap, &c);
 8001dfe:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8001e02:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001e06:	f8d7 12a0 	ldr.w	r1, [r7, #672]	; 0x2a0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 fb63 	bl	80034d6 <arm_mat_mult_f32>
		arm_mat_scale_f32(&c, -1, &d);
 8001e10:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001e14:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8001e18:	4611      	mov	r1, r2
 8001e1a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fc42 	bl	80036a8 <arm_mat_scale_f32>
		arm_mat_add_f32(&Zn, &d, &c);
 8001e24:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8001e28:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8001e2c:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8001e30:	4618      	mov	r0, r3
 8001e32:	f001 f868 	bl	8002f06 <arm_mat_add_f32>
		arm_mat_mult_f32(&Kn, &c, &d);
 8001e36:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001e3a:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8001e3e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001e42:	4618      	mov	r0, r3
 8001e44:	f001 fb47 	bl	80034d6 <arm_mat_mult_f32>
		arm_mat_add_f32(Xap, &d, &Zpnn);
 8001e48:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8001e4c:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001e50:	4619      	mov	r1, r3
 8001e52:	f8d7 02a0 	ldr.w	r0, [r7, #672]	; 0x2a0
 8001e56:	f001 f856 	bl	8002f06 <arm_mat_add_f32>

		//normalizacion


		norma_1 = zpnn[0]*zpnn[0] + zpnn[1]*zpnn[1] + zpnn[2]*zpnn[2];
 8001e5a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001e5e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001e62:	ed93 7a00 	vldr	s14, [r3]
 8001e66:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001e6a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e76:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001e7a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001e7e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e82:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001e86:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001e8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e96:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001e9a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001e9e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ea2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001ea6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001eaa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb6:	edc7 7aa0 	vstr	s15, [r7, #640]	; 0x280
 8001eba:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001ebe:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8001ec2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ec6:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001eca:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 8001ece:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed6:	db11      	blt.n	8001efc <fil_kal+0x388>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001ed8:	ed97 0a9e 	vldr	s0, [r7, #632]	; 0x278
 8001edc:	f005 f8e0 	bl	80070a0 <sqrtf>
 8001ee0:	eef0 7a40 	vmov.f32	s15, s0
 8001ee4:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8001ee8:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001eec:	e00c      	b.n	8001f08 <fil_kal+0x394>
 8001eee:	bf00      	nop
 8001ef0:	20000018 	.word	0x20000018
 8001ef4:	200002c0 	.word	0x200002c0
 8001ef8:	2000000c 	.word	0x2000000c
    }
    else
    {
      *pOut = 0.0f;
 8001efc:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001f06:	bf00      	nop
		arm_sqrt_f32(norma_1, &norma_2);

		arm_mat_scale_f32(&Zpnn, 1.0/norma_2, Xaa);
 8001f08:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8001f0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f14:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001f18:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8001f1c:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8001f20:	6819      	ldr	r1, [r3, #0]
 8001f22:	eeb0 0a47 	vmov.f32	s0, s14
 8001f26:	4610      	mov	r0, r2
 8001f28:	f001 fbbe 	bl	80036a8 <arm_mat_scale_f32>


		//P_a_a = (I - Kn.H).P_a_p(I - KnH)t + Kn.Rn.Knt

		arm_mat_trans_f32(&Kn, &a);
 8001f2c:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8001f30:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f001 fc3a 	bl	80037b0 <arm_mat_trans_f32>
		arm_mat_mult_f32(&Rn, &a, &b);
 8001f3c:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8001f40:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8001f44:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f001 fac4 	bl	80034d6 <arm_mat_mult_f32>
		arm_mat_mult_f32(&Kn, &b, &e);
 8001f4e:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8001f52:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8001f56:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f001 fabb 	bl	80034d6 <arm_mat_mult_f32>

		arm_mat_mult_f32(&Kn, &H, &a);
 8001f60:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8001f64:	f507 7117 	add.w	r1, r7, #604	; 0x25c
 8001f68:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 fab2 	bl	80034d6 <arm_mat_mult_f32>
		arm_mat_scale_f32(&a, -1, &b);
 8001f72:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8001f76:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f001 fb91 	bl	80036a8 <arm_mat_scale_f32>
		arm_mat_add_f32(&I, &b, &ax);
 8001f86:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8001f8a:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001f8e:	4619      	mov	r1, r3
 8001f90:	487c      	ldr	r0, [pc, #496]	; (8002184 <fil_kal+0x610>)
 8001f92:	f000 ffb8 	bl	8002f06 <arm_mat_add_f32>


		arm_mat_mult_f32(&Kn, &H, &a);
 8001f96:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8001f9a:	f507 7117 	add.w	r1, r7, #604	; 0x25c
 8001f9e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f001 fa97 	bl	80034d6 <arm_mat_mult_f32>
		arm_mat_scale_f32(&a, -1, &b);
 8001fa8:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8001fac:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 fb76 	bl	80036a8 <arm_mat_scale_f32>
		arm_mat_add_f32(&I, &b, &a);
 8001fbc:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8001fc0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	486f      	ldr	r0, [pc, #444]	; (8002184 <fil_kal+0x610>)
 8001fc8:	f000 ff9d 	bl	8002f06 <arm_mat_add_f32>
		arm_mat_trans_f32(&a, &b);
 8001fcc:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8001fd0:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f001 fbea 	bl	80037b0 <arm_mat_trans_f32>

		arm_mat_mult_f32(Pap, &b, &a);
 8001fdc:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8001fe0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f8d7 02a8 	ldr.w	r0, [r7, #680]	; 0x2a8
 8001fea:	f001 fa74 	bl	80034d6 <arm_mat_mult_f32>
		arm_mat_mult_f32(&ax, &a, &b);
 8001fee:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8001ff2:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8001ff6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 fa6b 	bl	80034d6 <arm_mat_mult_f32>

		arm_mat_add_f32(&b, &e, Paa);
 8002000:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8002004:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8002008:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 800200c:	4618      	mov	r0, r3
 800200e:	f000 ff7a 	bl	8002f06 <arm_mat_add_f32>

		//aceleracion externa
		arm_mat_scale_f32(Xaa, -G, &c);
 8002012:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <fil_kal+0x614>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	eef1 7a67 	vneg.f32	s15, s15
 800201c:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8002020:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002024:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002028:	4611      	mov	r1, r2
 800202a:	eeb0 0a67 	vmov.f32	s0, s15
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	f001 fb3a 	bl	80036a8 <arm_mat_scale_f32>
		arm_mat_add_f32(&Ya, &c, Ap);
 8002034:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002038:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800203c:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8002040:	f507 70fa 	add.w	r0, r7, #500	; 0x1f4
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	f000 ff5e 	bl	8002f06 <arm_mat_add_f32>

		}



	Calculo_F(yg, &F);
 800204a:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 800204e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002052:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002056:	4611      	mov	r1, r2
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	f7ff f90b 	bl	8001274 <Calculo_F>


	Calculo_Q(Xaa->pData, &Q, &Eg);
 800205e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002062:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f507 7211 	add.w	r2, r7, #580	; 0x244
 800206e:	f507 7119 	add.w	r1, r7, #612	; 0x264
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f95a 	bl	800132c <Calculo_Q>
	//x_f_a = F.X_a_a    En la siguiente sera x_a_p
	arm_mat_mult_f32(&F, Xaa, Xap); //esto es 3x1
 8002078:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800207c:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002080:	f507 701b 	add.w	r0, r7, #620	; 0x26c
 8002084:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002088:	6819      	ldr	r1, [r3, #0]
 800208a:	f001 fa24 	bl	80034d6 <arm_mat_mult_f32>

	//P_f_a = F.P_a_a.Ft + Q

	arm_mat_trans_f32(&F, &a);
 800208e:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8002092:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f001 fb89 	bl	80037b0 <arm_mat_trans_f32>
	arm_mat_mult_f32(Paa, &a, &b);
 800209e:	f507 720d 	add.w	r2, r7, #564	; 0x234
 80020a2:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80020a6:	4619      	mov	r1, r3
 80020a8:	f8d7 02a4 	ldr.w	r0, [r7, #676]	; 0x2a4
 80020ac:	f001 fa13 	bl	80034d6 <arm_mat_mult_f32>
	arm_mat_mult_f32(&F, &b, &a);
 80020b0:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 80020b4:	f507 710d 	add.w	r1, r7, #564	; 0x234
 80020b8:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 fa0a 	bl	80034d6 <arm_mat_mult_f32>
	arm_mat_add_f32(&a, &Q, Pap);//chequear ordenes de matrices me parece que p tendria que ser 3x3
 80020c2:	f507 7119 	add.w	r1, r7, #612	; 0x264
 80020c6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80020ca:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 ff19 	bl	8002f06 <arm_mat_add_f32>
#define LD2_Pin GPIO_PIN_5
#define LD2_GPIO_Port GPIOA
	//acoplado
	uint8_t retorno;
	//acoplado
	retorno = Calculo_matriz_Rb(&R_b_g, Xaa->pData);
 80020d4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80020d8:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fa12 	bl	8001510 <Calculo_matriz_Rb>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	if(retorno)
 80020f2:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <fil_kal+0x592>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	2120      	movs	r1, #32
 80020fe:	4823      	ldr	r0, [pc, #140]	; (800218c <fil_kal+0x618>)
 8002100:	f001 fed0 	bl	8003ea4 <HAL_GPIO_WritePin>
/*arm_mat_scale_f32(Xaa, -1, &c);
arm_mat_add_f32(&Ya, &c, &d);
arm_mat_scale_f32(&d, G, Ap);*/


}
 8002104:	e036      	b.n	8002174 <fil_kal+0x600>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	2120      	movs	r1, #32
 800210a:	4820      	ldr	r0, [pc, #128]	; (800218c <fil_kal+0x618>)
 800210c:	f001 feca 	bl	8003ea4 <HAL_GPIO_WritePin>
		iaz = Aceleracion_vertical(Xaa->pData,ya,&R_b_g);
 8002110:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002114:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6858      	ldr	r0, [r3, #4]
 800211c:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8002120:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002124:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	f7fe fea5 	bl	8000e78 <Aceleracion_vertical>
 800212e:	ed87 0aa1 	vstr	s0, [r7, #644]	; 0x284
		Calculo_Xnn(&Xnn, &h_pasado, iaz);
 8002132:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8002136:	ed97 0aa1 	vldr	s0, [r7, #644]	; 0x284
 800213a:	4915      	ldr	r1, [pc, #84]	; (8002190 <fil_kal+0x61c>)
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fc63 	bl	8001a08 <Calculo_Xnn>
		Detector_caida(xnn,h_pasado,Calculo_theta(Xaa->pData),iaz);//maquina de estados
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <fil_kal+0x61c>)
 8002144:	ed93 8a00 	vldr	s16, [r3]
 8002148:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800214c:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fefb 	bl	8000f50 <Calculo_theta>
 800215a:	eef0 7a40 	vmov.f32	s15, s0
 800215e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002162:	ed97 1aa1 	vldr	s2, [r7, #644]	; 0x284
 8002166:	eef0 0a67 	vmov.f32	s1, s15
 800216a:	eeb0 0a48 	vmov.f32	s0, s16
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe ff8e 	bl	8001090 <Detector_caida>
}
 8002174:	bf00      	nop
 8002176:	f507 7723 	add.w	r7, r7, #652	; 0x28c
 800217a:	46bd      	mov	sp, r7
 800217c:	ecbd 8b02 	vpop	{d8}
 8002180:	bd90      	pop	{r4, r7, pc}
 8002182:	bf00      	nop
 8002184:	200002c0 	.word	0x200002c0
 8002188:	20000008 	.word	0x20000008
 800218c:	40020000 	.word	0x40020000
 8002190:	200002d8 	.word	0x200002d8

08002194 <getData>:





void getData() {
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	accel = imuGetAccelData();
 8002198:	f004 fbd0 	bl	800693c <imuGetAccelData>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4943      	ldr	r1, [pc, #268]	; (80022b0 <getData+0x11c>)
 80021a2:	e9c1 2300 	strd	r2, r3, [r1]
	gyros = imuGetGyroData();
 80021a6:	f004 fc46 	bl	8006a36 <imuGetGyroData>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4941      	ldr	r1, [pc, #260]	; (80022b4 <getData+0x120>)
 80021b0:	e9c1 2300 	strd	r2, r3, [r1]
	acc_y = escala_acc*(int16_t)((accel >> 16) & 0x0000000000000000FFFF);
	gir_y = escala_gir*(int16_t)((gyros >> 16) & 0x0000000000000000FFFF);

	acc_x = escala_acc*(int16_t)((accel >> 32) & 0x0000000000000000FFFF);
	gir_x = escala_gir*(int16_t)((gyros >> 32) & 0x0000000000000000FFFF);*/
	acc_z = escala_acc*(int16_t)(accel );
 80021b4:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <getData+0x11c>)
 80021b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ba:	b213      	sxth	r3, r2
 80021bc:	ee07 3a90 	vmov	s15, r3
 80021c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021c4:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <getData+0x124>)
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ce:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <getData+0x128>)
 80021d0:	edc3 7a00 	vstr	s15, [r3]
	gir_z = escala_gir*(int16_t)(gyros);
 80021d4:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <getData+0x120>)
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	b213      	sxth	r3, r2
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <getData+0x12c>)
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ee:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <getData+0x130>)
 80021f0:	edc3 7a00 	vstr	s15, [r3]

	acc_y = escala_acc*(int16_t)((accel >> 16));
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <getData+0x11c>)
 80021f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	0c02      	lsrs	r2, r0, #16
 8002204:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002208:	0c0b      	lsrs	r3, r1, #16
 800220a:	b213      	sxth	r3, r2
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <getData+0x124>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <getData+0x134>)
 8002220:	edc3 7a00 	vstr	s15, [r3]
	gir_y = escala_gir*(int16_t)((gyros >> 16));
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <getData+0x120>)
 8002226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	0c02      	lsrs	r2, r0, #16
 8002234:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002238:	0c0b      	lsrs	r3, r1, #16
 800223a:	b213      	sxth	r3, r2
 800223c:	ee07 3a90 	vmov	s15, r3
 8002240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002244:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <getData+0x12c>)
 8002246:	edd3 7a00 	vldr	s15, [r3]
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <getData+0x138>)
 8002250:	edc3 7a00 	vstr	s15, [r3]

	acc_x = escala_acc*(int16_t)((accel >> 32));
 8002254:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <getData+0x11c>)
 8002256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	000a      	movs	r2, r1
 8002264:	2300      	movs	r3, #0
 8002266:	b213      	sxth	r3, r2
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <getData+0x124>)
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <getData+0x13c>)
 800227c:	edc3 7a00 	vstr	s15, [r3]
	gir_x = escala_gir*(int16_t)((gyros >> 32));
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <getData+0x120>)
 8002282:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	000a      	movs	r2, r1
 8002290:	2300      	movs	r3, #0
 8002292:	b213      	sxth	r3, r2
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <getData+0x12c>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <getData+0x140>)
 80022a8:	edc3 7a00 	vstr	s15, [r3]

}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000178 	.word	0x20000178
 80022b4:	20000180 	.word	0x20000180
 80022b8:	20000010 	.word	0x20000010
 80022bc:	20000190 	.word	0x20000190
 80022c0:	20000014 	.word	0x20000014
 80022c4:	2000019c 	.word	0x2000019c
 80022c8:	2000018c 	.word	0x2000018c
 80022cc:	20000198 	.word	0x20000198
 80022d0:	20000188 	.word	0x20000188
 80022d4:	20000194 	.word	0x20000194

080022d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b0cb      	sub	sp, #300	; 0x12c
 80022dc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022de:	f001 fae1 	bl	80038a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022e2:	f000 fb57 	bl	8002994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022e6:	f000 fc19 	bl	8002b1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022ea:	f000 fbed 	bl	8002ac8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80022ee:	f000 fbbd 	bl	8002a6c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t ret = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
  ret++;
 80022f8:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 80022fc:	3301      	adds	r3, #1
 80022fe:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109

  initMPU6500(&hi2c1);
 8002302:	4880      	ldr	r0, [pc, #512]	; (8002504 <main+0x22c>)
 8002304:	f003 fcd8 	bl	8005cb8 <initMPU6500>
  ret = imuCheckPresence();
 8002308:	f003 fe45 	bl	8005f96 <imuCheckPresence>
 800230c:	4603      	mov	r3, r0
 800230e:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
  imuSetOffsets();
 8002312:	f004 f9b7 	bl	8006684 <imuSetOffsets>
  ret = imuSelfTest();
 8002316:	f003 fe97 	bl	8006048 <imuSelfTest>
 800231a:	4603      	mov	r3, r0
 800231c:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109


int i;


for (i=0;i<10;i++)
 8002320:	2300      	movs	r3, #0
 8002322:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002326:	e036      	b.n	8002396 <main+0xbe>
{
	getData();
 8002328:	f7ff ff34 	bl	8002194 <getData>

	az[i] = acc_z;
 800232c:	4b76      	ldr	r3, [pc, #472]	; (8002508 <main+0x230>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4976      	ldr	r1, [pc, #472]	; (800250c <main+0x234>)
 8002332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	601a      	str	r2, [r3, #0]
	gz[i] = gir_z;
 800233c:	4b74      	ldr	r3, [pc, #464]	; (8002510 <main+0x238>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4974      	ldr	r1, [pc, #464]	; (8002514 <main+0x23c>)
 8002342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	601a      	str	r2, [r3, #0]

	ay[i] = acc_y;
 800234c:	4b72      	ldr	r3, [pc, #456]	; (8002518 <main+0x240>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4972      	ldr	r1, [pc, #456]	; (800251c <main+0x244>)
 8002352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	601a      	str	r2, [r3, #0]
	gy[i] = gir_y;
 800235c:	4b70      	ldr	r3, [pc, #448]	; (8002520 <main+0x248>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4970      	ldr	r1, [pc, #448]	; (8002524 <main+0x24c>)
 8002362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	601a      	str	r2, [r3, #0]

	ax[i] = acc_x;
 800236c:	4b6e      	ldr	r3, [pc, #440]	; (8002528 <main+0x250>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	496e      	ldr	r1, [pc, #440]	; (800252c <main+0x254>)
 8002372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	601a      	str	r2, [r3, #0]
	gx[i] = gir_x;
 800237c:	4b6c      	ldr	r3, [pc, #432]	; (8002530 <main+0x258>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	496c      	ldr	r1, [pc, #432]	; (8002534 <main+0x25c>)
 8002382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	601a      	str	r2, [r3, #0]
for (i=0;i<10;i++)
 800238c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002390:	3301      	adds	r3, #1
 8002392:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800239a:	2b09      	cmp	r3, #9
 800239c:	ddc4      	ble.n	8002328 <main+0x50>

}


amx=0;
 800239e:	4b66      	ldr	r3, [pc, #408]	; (8002538 <main+0x260>)
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
gmx=0;
 80023a6:	4b65      	ldr	r3, [pc, #404]	; (800253c <main+0x264>)
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

amy=0;
 80023ae:	4b64      	ldr	r3, [pc, #400]	; (8002540 <main+0x268>)
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
gmy=0;
 80023b6:	4b63      	ldr	r3, [pc, #396]	; (8002544 <main+0x26c>)
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]

amz=0;
 80023be:	4b62      	ldr	r3, [pc, #392]	; (8002548 <main+0x270>)
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
gmz=0;
 80023c6:	4b61      	ldr	r3, [pc, #388]	; (800254c <main+0x274>)
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]

for (i=0;i<10;i++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80023d4:	e076      	b.n	80024c4 <main+0x1ec>
{
	amx = amx + ax[i]/10;
 80023d6:	4a55      	ldr	r2, [pc, #340]	; (800252c <main+0x254>)
 80023d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80023e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023ec:	4b52      	ldr	r3, [pc, #328]	; (8002538 <main+0x260>)
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f6:	4b50      	ldr	r3, [pc, #320]	; (8002538 <main+0x260>)
 80023f8:	edc3 7a00 	vstr	s15, [r3]
	gmx = gmx + gx[i]/10;
 80023fc:	4a4d      	ldr	r2, [pc, #308]	; (8002534 <main+0x25c>)
 80023fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800240e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002412:	4b4a      	ldr	r3, [pc, #296]	; (800253c <main+0x264>)
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800241c:	4b47      	ldr	r3, [pc, #284]	; (800253c <main+0x264>)
 800241e:	edc3 7a00 	vstr	s15, [r3]

	amy = amy + ay[i]/10;
 8002422:	4a3e      	ldr	r2, [pc, #248]	; (800251c <main+0x244>)
 8002424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002434:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002438:	4b41      	ldr	r3, [pc, #260]	; (8002540 <main+0x268>)
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002442:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <main+0x268>)
 8002444:	edc3 7a00 	vstr	s15, [r3]
	gmy = gmy + gy[i]/10;
 8002448:	4a36      	ldr	r2, [pc, #216]	; (8002524 <main+0x24c>)
 800244a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800245a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800245e:	4b39      	ldr	r3, [pc, #228]	; (8002544 <main+0x26c>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002468:	4b36      	ldr	r3, [pc, #216]	; (8002544 <main+0x26c>)
 800246a:	edc3 7a00 	vstr	s15, [r3]

	amz = amz + az[i]/10;
 800246e:	4a27      	ldr	r2, [pc, #156]	; (800250c <main+0x234>)
 8002470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002480:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <main+0x270>)
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248e:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <main+0x270>)
 8002490:	edc3 7a00 	vstr	s15, [r3]
	gmz = gmz + gz[i]/10;
 8002494:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <main+0x23c>)
 8002496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80024a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024aa:	4b28      	ldr	r3, [pc, #160]	; (800254c <main+0x274>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <main+0x274>)
 80024b6:	edc3 7a00 	vstr	s15, [r3]
for (i=0;i<10;i++)
 80024ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024be:	3301      	adds	r3, #1
 80024c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80024c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024c8:	2b09      	cmp	r3, #9
 80024ca:	dd84      	ble.n	80023d6 <main+0xfe>

}



vax=0;
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <main+0x278>)
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
vgx=0;
 80024d4:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <main+0x27c>)
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

vay=0;
 80024dc:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <main+0x280>)
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
vgy=0;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <main+0x284>)
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

vaz=0;
 80024ec:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <main+0x288>)
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
vgz=0;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <main+0x28c>)
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

for (i=0;i<10;i++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002502:	e0fc      	b.n	80026fe <main+0x426>
 8002504:	200000dc 	.word	0x200000dc
 8002508:	20000190 	.word	0x20000190
 800250c:	200001f0 	.word	0x200001f0
 8002510:	2000019c 	.word	0x2000019c
 8002514:	20000268 	.word	0x20000268
 8002518:	2000018c 	.word	0x2000018c
 800251c:	200001c8 	.word	0x200001c8
 8002520:	20000198 	.word	0x20000198
 8002524:	20000240 	.word	0x20000240
 8002528:	20000188 	.word	0x20000188
 800252c:	200001a0 	.word	0x200001a0
 8002530:	20000194 	.word	0x20000194
 8002534:	20000218 	.word	0x20000218
 8002538:	20000290 	.word	0x20000290
 800253c:	20000294 	.word	0x20000294
 8002540:	20000298 	.word	0x20000298
 8002544:	2000029c 	.word	0x2000029c
 8002548:	200002a0 	.word	0x200002a0
 800254c:	200002a4 	.word	0x200002a4
 8002550:	200002a8 	.word	0x200002a8
 8002554:	200002ac 	.word	0x200002ac
 8002558:	200002b0 	.word	0x200002b0
 800255c:	200002b4 	.word	0x200002b4
 8002560:	200002b8 	.word	0x200002b8
 8002564:	200002bc 	.word	0x200002bc
{

	vax = (ax[i]-amx)*(ax[i]-amx)/10;
 8002568:	4ab1      	ldr	r2, [pc, #708]	; (8002830 <main+0x558>)
 800256a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	ed93 7a00 	vldr	s14, [r3]
 8002576:	4baf      	ldr	r3, [pc, #700]	; (8002834 <main+0x55c>)
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002580:	4aab      	ldr	r2, [pc, #684]	; (8002830 <main+0x558>)
 8002582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	edd3 6a00 	vldr	s13, [r3]
 800258e:	4ba9      	ldr	r3, [pc, #676]	; (8002834 <main+0x55c>)
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002598:	ee27 7a27 	vmul.f32	s14, s14, s15
 800259c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80025a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025a4:	4ba4      	ldr	r3, [pc, #656]	; (8002838 <main+0x560>)
 80025a6:	edc3 7a00 	vstr	s15, [r3]
	vgx = (gx[i]-gmx)*(gx[i]-gmx)/10;
 80025aa:	4aa4      	ldr	r2, [pc, #656]	; (800283c <main+0x564>)
 80025ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	ed93 7a00 	vldr	s14, [r3]
 80025b8:	4ba1      	ldr	r3, [pc, #644]	; (8002840 <main+0x568>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025c2:	4a9e      	ldr	r2, [pc, #632]	; (800283c <main+0x564>)
 80025c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	edd3 6a00 	vldr	s13, [r3]
 80025d0:	4b9b      	ldr	r3, [pc, #620]	; (8002840 <main+0x568>)
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025de:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80025e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e6:	4b97      	ldr	r3, [pc, #604]	; (8002844 <main+0x56c>)
 80025e8:	edc3 7a00 	vstr	s15, [r3]

	vay = (ay[i]-amy)*(ay[i]-amy)/10;
 80025ec:	4a96      	ldr	r2, [pc, #600]	; (8002848 <main+0x570>)
 80025ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	ed93 7a00 	vldr	s14, [r3]
 80025fa:	4b94      	ldr	r3, [pc, #592]	; (800284c <main+0x574>)
 80025fc:	edd3 7a00 	vldr	s15, [r3]
 8002600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002604:	4a90      	ldr	r2, [pc, #576]	; (8002848 <main+0x570>)
 8002606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	edd3 6a00 	vldr	s13, [r3]
 8002612:	4b8e      	ldr	r3, [pc, #568]	; (800284c <main+0x574>)
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800261c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002620:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002624:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002628:	4b89      	ldr	r3, [pc, #548]	; (8002850 <main+0x578>)
 800262a:	edc3 7a00 	vstr	s15, [r3]
	vgy = (gy[i]-gmy)*(gy[i]-gmy)/10;
 800262e:	4a89      	ldr	r2, [pc, #548]	; (8002854 <main+0x57c>)
 8002630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	ed93 7a00 	vldr	s14, [r3]
 800263c:	4b86      	ldr	r3, [pc, #536]	; (8002858 <main+0x580>)
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002646:	4a83      	ldr	r2, [pc, #524]	; (8002854 <main+0x57c>)
 8002648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	edd3 6a00 	vldr	s13, [r3]
 8002654:	4b80      	ldr	r3, [pc, #512]	; (8002858 <main+0x580>)
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800265e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002662:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800266a:	4b7c      	ldr	r3, [pc, #496]	; (800285c <main+0x584>)
 800266c:	edc3 7a00 	vstr	s15, [r3]

	vaz = (az[i]-amz)*(az[i]-amz)/10;
 8002670:	4a7b      	ldr	r2, [pc, #492]	; (8002860 <main+0x588>)
 8002672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	ed93 7a00 	vldr	s14, [r3]
 800267e:	4b79      	ldr	r3, [pc, #484]	; (8002864 <main+0x58c>)
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002688:	4a75      	ldr	r2, [pc, #468]	; (8002860 <main+0x588>)
 800268a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	edd3 6a00 	vldr	s13, [r3]
 8002696:	4b73      	ldr	r3, [pc, #460]	; (8002864 <main+0x58c>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80026a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80026a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ac:	4b6e      	ldr	r3, [pc, #440]	; (8002868 <main+0x590>)
 80026ae:	edc3 7a00 	vstr	s15, [r3]
	vgz = (gz[i]-gmz)*(gz[i]-gmz)/10;
 80026b2:	4a6e      	ldr	r2, [pc, #440]	; (800286c <main+0x594>)
 80026b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	ed93 7a00 	vldr	s14, [r3]
 80026c0:	4b6b      	ldr	r3, [pc, #428]	; (8002870 <main+0x598>)
 80026c2:	edd3 7a00 	vldr	s15, [r3]
 80026c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026ca:	4a68      	ldr	r2, [pc, #416]	; (800286c <main+0x594>)
 80026cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	edd3 6a00 	vldr	s13, [r3]
 80026d8:	4b65      	ldr	r3, [pc, #404]	; (8002870 <main+0x598>)
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80026e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80026ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ee:	4b61      	ldr	r3, [pc, #388]	; (8002874 <main+0x59c>)
 80026f0:	edc3 7a00 	vstr	s15, [r3]
for (i=0;i<10;i++)
 80026f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026f8:	3301      	adds	r3, #1
 80026fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80026fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002702:	2b09      	cmp	r3, #9
 8002704:	f77f af30 	ble.w	8002568 <main+0x290>
//{
	arm_matrix_instance_f32 Ap, Ea,Eg,Xaa,Paa,Xap,Pap;


	float a_p[3]; //aceleracion externa pasada
	float cov_a[] = {0,0,0,0,0,0,0,0,0};//covarianza del acelerometro
 8002708:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800270c:	2224      	movs	r2, #36	; 0x24
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f004 fa37 	bl	8006b84 <memset>
	float cov_g[]= {0,0,0,0,0,0,0,0,0}  ;//covarianza giroscopo
 8002716:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800271a:	2224      	movs	r2, #36	; 0x24
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f004 fa30 	bl	8006b84 <memset>
	float xaa[3];
	float xap[3];
	float paa[9];
	float pap[9]; //chequear valores iniciales //covariazas que arranquen en 0

	a_p[0]=0;
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	a_p[1]=0;
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	a_p[2]=0;
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	xaa[0] = 0;
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	65bb      	str	r3, [r7, #88]	; 0x58
	xaa[1] = 0;
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	65fb      	str	r3, [r7, #92]	; 0x5c
	xaa[2] = 1;
 8002748:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800274c:	663b      	str	r3, [r7, #96]	; 0x60
	for (i=0;i<9;i++)
 800274e:	2300      	movs	r3, #0
 8002750:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002754:	e063      	b.n	800281e <main+0x546>
	{
		if (i==0)
 8002756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d114      	bne.n	8002788 <main+0x4b0>
		{
			cov_a[i] = vax;
 800275e:	4b36      	ldr	r3, [pc, #216]	; (8002838 <main+0x560>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800276c:	443b      	add	r3, r7
 800276e:	3b70      	subs	r3, #112	; 0x70
 8002770:	601a      	str	r2, [r3, #0]


			cov_g[i] = vgx;
 8002772:	4b34      	ldr	r3, [pc, #208]	; (8002844 <main+0x56c>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002780:	443b      	add	r3, r7
 8002782:	3b94      	subs	r3, #148	; 0x94
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e045      	b.n	8002814 <main+0x53c>


		}else if (i==4)
 8002788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800278c:	2b04      	cmp	r3, #4
 800278e:	d114      	bne.n	80027ba <main+0x4e2>
		{
			cov_a[i] = vay;
 8002790:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <main+0x578>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800279e:	443b      	add	r3, r7
 80027a0:	3b70      	subs	r3, #112	; 0x70
 80027a2:	601a      	str	r2, [r3, #0]
			cov_g[i] = vgy;
 80027a4:	4b2d      	ldr	r3, [pc, #180]	; (800285c <main+0x584>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80027b2:	443b      	add	r3, r7
 80027b4:	3b94      	subs	r3, #148	; 0x94
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e02c      	b.n	8002814 <main+0x53c>


		}else if(i==8)
 80027ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d114      	bne.n	80027ec <main+0x514>
		{
			cov_a[i] = vaz;
 80027c2:	4b29      	ldr	r3, [pc, #164]	; (8002868 <main+0x590>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80027d0:	443b      	add	r3, r7
 80027d2:	3b70      	subs	r3, #112	; 0x70
 80027d4:	601a      	str	r2, [r3, #0]
			cov_g[i] = vgz;
 80027d6:	4b27      	ldr	r3, [pc, #156]	; (8002874 <main+0x59c>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80027e4:	443b      	add	r3, r7
 80027e6:	3b94      	subs	r3, #148	; 0x94
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e013      	b.n	8002814 <main+0x53c>

		}else
		{
			cov_a[i] = 0;
 80027ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80027f6:	443b      	add	r3, r7
 80027f8:	3b70      	subs	r3, #112	; 0x70
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
			cov_g[i] = 0;
 8002800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800280a:	443b      	add	r3, r7
 800280c:	3b94      	subs	r3, #148	; 0x94
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
	for (i=0;i<9;i++)
 8002814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002818:	3301      	adds	r3, #1
 800281a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800281e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002822:	2b08      	cmp	r3, #8
 8002824:	dd97      	ble.n	8002756 <main+0x47e>
	cov_g[4] = 0.1;
	cov_g[8] = 0.1;*/



	for ( i=0; i<9;i++)
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800282c:	e033      	b.n	8002896 <main+0x5be>
 800282e:	bf00      	nop
 8002830:	200001a0 	.word	0x200001a0
 8002834:	20000290 	.word	0x20000290
 8002838:	200002a8 	.word	0x200002a8
 800283c:	20000218 	.word	0x20000218
 8002840:	20000294 	.word	0x20000294
 8002844:	200002ac 	.word	0x200002ac
 8002848:	200001c8 	.word	0x200001c8
 800284c:	20000298 	.word	0x20000298
 8002850:	200002b0 	.word	0x200002b0
 8002854:	20000240 	.word	0x20000240
 8002858:	2000029c 	.word	0x2000029c
 800285c:	200002b4 	.word	0x200002b4
 8002860:	200001f0 	.word	0x200001f0
 8002864:	200002a0 	.word	0x200002a0
 8002868:	200002b8 	.word	0x200002b8
 800286c:	20000268 	.word	0x20000268
 8002870:	200002a4 	.word	0x200002a4
 8002874:	200002bc 	.word	0x200002bc
	{
		paa[i] = 0;
 8002878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002882:	443b      	add	r3, r7
 8002884:	3be8      	subs	r3, #232	; 0xe8
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
	for ( i=0; i<9;i++)
 800288c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002890:	3301      	adds	r3, #1
 8002892:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002896:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800289a:	2b08      	cmp	r3, #8
 800289c:	ddec      	ble.n	8002878 <main+0x5a0>
	}

	arm_mat_init_f32(&Ea, 3, 3, cov_a);
 800289e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028a2:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80028a6:	2203      	movs	r2, #3
 80028a8:	2103      	movs	r1, #3
 80028aa:	f000 fbc4 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Eg, 3, 3, cov_g);
 80028ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028b2:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 80028b6:	2203      	movs	r2, #3
 80028b8:	2103      	movs	r1, #3
 80028ba:	f000 fbbc 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Xaa, 3, 1, xaa);
 80028be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028c2:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 80028c6:	2201      	movs	r2, #1
 80028c8:	2103      	movs	r1, #3
 80028ca:	f000 fbb4 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Xap, 3, 1, xap);
 80028ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028d2:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80028d6:	2201      	movs	r2, #1
 80028d8:	2103      	movs	r1, #3
 80028da:	f000 fbac 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Paa, 3, 3, paa);
 80028de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028e2:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80028e6:	2203      	movs	r2, #3
 80028e8:	2103      	movs	r1, #3
 80028ea:	f000 fba4 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Pap, 3, 3, pap);
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80028f4:	2203      	movs	r2, #3
 80028f6:	2103      	movs	r1, #3
 80028f8:	f000 fb9d 	bl	8003036 <arm_mat_init_f32>
	arm_mat_init_f32(&Ap, 3, 1, a_p);
 80028fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002900:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8002904:	2201      	movs	r2, #1
 8002906:	2103      	movs	r1, #3
 8002908:	f000 fb95 	bl	8003036 <arm_mat_init_f32>

	uint16_t primero=1;
 800290c:	2301      	movs	r3, #1
 800290e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	while(1)
	{
		//recibo datos de una cola

		getData();
 8002912:	f7ff fc3f 	bl	8002194 <getData>

		yg[0] = gir_x;
 8002916:	4b19      	ldr	r3, [pc, #100]	; (800297c <main+0x6a4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	673b      	str	r3, [r7, #112]	; 0x70
		yg[1] = gir_y;
 800291c:	4b18      	ldr	r3, [pc, #96]	; (8002980 <main+0x6a8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	677b      	str	r3, [r7, #116]	; 0x74
		yg[2] = gir_z;
 8002922:	4b18      	ldr	r3, [pc, #96]	; (8002984 <main+0x6ac>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	67bb      	str	r3, [r7, #120]	; 0x78

		ya[0] = acc_x;
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <main+0x6b0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	667b      	str	r3, [r7, #100]	; 0x64
		ya[1] = acc_y;
 800292e:	4b17      	ldr	r3, [pc, #92]	; (800298c <main+0x6b4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	66bb      	str	r3, [r7, #104]	; 0x68
		ya[2] = acc_z;
 8002934:	4b16      	ldr	r3, [pc, #88]	; (8002990 <main+0x6b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	66fb      	str	r3, [r7, #108]	; 0x6c



		fil_kal(yg, ya, &Ap, &Xaa, &Xap, &Paa, &Pap, primero, cov_a, cov_g);
 800293a:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 800293e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8002942:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002946:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800294a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800294e:	9305      	str	r3, [sp, #20]
 8002950:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002954:	9304      	str	r3, [sp, #16]
 8002956:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800295a:	9303      	str	r3, [sp, #12]
 800295c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002960:	9302      	str	r3, [sp, #8]
 8002962:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	4623      	mov	r3, r4
 8002970:	f7ff f900 	bl	8001b74 <fil_kal>

		primero = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
		getData();
 800297a:	e7ca      	b.n	8002912 <main+0x63a>
 800297c:	20000194 	.word	0x20000194
 8002980:	20000198 	.word	0x20000198
 8002984:	2000019c 	.word	0x2000019c
 8002988:	20000188 	.word	0x20000188
 800298c:	2000018c 	.word	0x2000018c
 8002990:	20000190 	.word	0x20000190

08002994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b094      	sub	sp, #80	; 0x50
 8002998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800299a:	f107 0320 	add.w	r3, r7, #32
 800299e:	2230      	movs	r2, #48	; 0x30
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f004 f8ee 	bl	8006b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029a8:	f107 030c 	add.w	r3, r7, #12
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <SystemClock_Config+0xd0>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <SystemClock_Config+0xd0>)
 80029c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c6:	6413      	str	r3, [r2, #64]	; 0x40
 80029c8:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <SystemClock_Config+0xd0>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80029d4:	2300      	movs	r3, #0
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <SystemClock_Config+0xd4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029e0:	4a21      	ldr	r2, [pc, #132]	; (8002a68 <SystemClock_Config+0xd4>)
 80029e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <SystemClock_Config+0xd4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029f4:	2302      	movs	r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029f8:	2301      	movs	r3, #1
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029fc:	2310      	movs	r3, #16
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a00:	2302      	movs	r3, #2
 8002a02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a04:	2300      	movs	r3, #0
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002a08:	2310      	movs	r3, #16
 8002a0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a0c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002a10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002a12:	2304      	movs	r3, #4
 8002a14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a16:	2307      	movs	r3, #7
 8002a18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a1a:	f107 0320 	add.w	r3, r7, #32
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f002 f9f0 	bl	8004e04 <HAL_RCC_OscConfig>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002a2a:	f000 f8e5 	bl	8002bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a2e:	230f      	movs	r3, #15
 8002a30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a32:	2302      	movs	r3, #2
 8002a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a44:	f107 030c 	add.w	r3, r7, #12
 8002a48:	2102      	movs	r1, #2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f002 fc52 	bl	80052f4 <HAL_RCC_ClockConfig>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002a56:	f000 f8cf 	bl	8002bf8 <Error_Handler>
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	3750      	adds	r7, #80	; 0x50
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40007000 	.word	0x40007000

08002a6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <MX_I2C1_Init+0x50>)
 8002a72:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <MX_I2C1_Init+0x54>)
 8002a74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <MX_I2C1_Init+0x50>)
 8002a78:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <MX_I2C1_Init+0x58>)
 8002a7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <MX_I2C1_Init+0x50>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <MX_I2C1_Init+0x50>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <MX_I2C1_Init+0x50>)
 8002a8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <MX_I2C1_Init+0x50>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <MX_I2C1_Init+0x50>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a9c:	4b07      	ldr	r3, [pc, #28]	; (8002abc <MX_I2C1_Init+0x50>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <MX_I2C1_Init+0x50>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002aa8:	4804      	ldr	r0, [pc, #16]	; (8002abc <MX_I2C1_Init+0x50>)
 8002aaa:	f001 fa15 	bl	8003ed8 <HAL_I2C_Init>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ab4:	f000 f8a0 	bl	8002bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	200000dc 	.word	0x200000dc
 8002ac0:	40005400 	.word	0x40005400
 8002ac4:	000186a0 	.word	0x000186a0

08002ac8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002ace:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <MX_USART2_UART_Init+0x50>)
 8002ad0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ad8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ada:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002aee:	220c      	movs	r2, #12
 8002af0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002afe:	4805      	ldr	r0, [pc, #20]	; (8002b14 <MX_USART2_UART_Init+0x4c>)
 8002b00:	f002 fe18 	bl	8005734 <HAL_UART_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b0a:	f000 f875 	bl	8002bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000130 	.word	0x20000130
 8002b18:	40004400 	.word	0x40004400

08002b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	; 0x28
 8002b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b22:	f107 0314 	add.w	r3, r7, #20
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
 8002b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <MX_GPIO_Init+0xd0>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a2c      	ldr	r2, [pc, #176]	; (8002bec <MX_GPIO_Init+0xd0>)
 8002b3c:	f043 0304 	orr.w	r3, r3, #4
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <MX_GPIO_Init+0xd0>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b26      	ldr	r3, [pc, #152]	; (8002bec <MX_GPIO_Init+0xd0>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a25      	ldr	r2, [pc, #148]	; (8002bec <MX_GPIO_Init+0xd0>)
 8002b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <MX_GPIO_Init+0xd0>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <MX_GPIO_Init+0xd0>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a1e      	ldr	r2, [pc, #120]	; (8002bec <MX_GPIO_Init+0xd0>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <MX_GPIO_Init+0xd0>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	4b18      	ldr	r3, [pc, #96]	; (8002bec <MX_GPIO_Init+0xd0>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4a17      	ldr	r2, [pc, #92]	; (8002bec <MX_GPIO_Init+0xd0>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <MX_GPIO_Init+0xd0>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2120      	movs	r1, #32
 8002ba6:	4812      	ldr	r0, [pc, #72]	; (8002bf0 <MX_GPIO_Init+0xd4>)
 8002ba8:	f001 f97c 	bl	8003ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bb2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	480c      	ldr	r0, [pc, #48]	; (8002bf4 <MX_GPIO_Init+0xd8>)
 8002bc4:	f000 ffea 	bl	8003b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4804      	ldr	r0, [pc, #16]	; (8002bf0 <MX_GPIO_Init+0xd4>)
 8002be0:	f000 ffdc 	bl	8003b9c <HAL_GPIO_Init>

}
 8002be4:	bf00      	nop
 8002be6:	3728      	adds	r7, #40	; 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	40020800 	.word	0x40020800

08002bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfc:	b672      	cpsid	i
}
 8002bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c00:	e7fe      	b.n	8002c00 <Error_Handler+0x8>
	...

08002c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_MspInit+0x4c>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a0f      	ldr	r2, [pc, #60]	; (8002c50 <HAL_MspInit+0x4c>)
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_MspInit+0x4c>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_MspInit+0x4c>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a08      	ldr	r2, [pc, #32]	; (8002c50 <HAL_MspInit+0x4c>)
 8002c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_MspInit+0x4c>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c42:	2007      	movs	r0, #7
 8002c44:	f000 ff76 	bl	8003b34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40023800 	.word	0x40023800

08002c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <HAL_I2C_MspInit+0x84>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d12c      	bne.n	8002cd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <HAL_I2C_MspInit+0x88>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <HAL_I2C_MspInit+0x88>)
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <HAL_I2C_MspInit+0x88>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c98:	2312      	movs	r3, #18
 8002c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	4619      	mov	r1, r3
 8002cae:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <HAL_I2C_MspInit+0x8c>)
 8002cb0:	f000 ff74 	bl	8003b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_I2C_MspInit+0x88>)
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <HAL_I2C_MspInit+0x88>)
 8002cbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_I2C_MspInit+0x88>)
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cd0:	bf00      	nop
 8002cd2:	3728      	adds	r7, #40	; 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40005400 	.word	0x40005400
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40020400 	.word	0x40020400

08002ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_UART_MspInit+0x84>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d12b      	bne.n	8002d5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_UART_MspInit+0x88>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <HAL_UART_MspInit+0x88>)
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_UART_MspInit+0x88>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_UART_MspInit+0x88>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a10      	ldr	r2, [pc, #64]	; (8002d6c <HAL_UART_MspInit+0x88>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_UART_MspInit+0x88>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d3e:	230c      	movs	r3, #12
 8002d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d42:	2302      	movs	r3, #2
 8002d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d4e:	2307      	movs	r3, #7
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d52:	f107 0314 	add.w	r3, r7, #20
 8002d56:	4619      	mov	r1, r3
 8002d58:	4805      	ldr	r0, [pc, #20]	; (8002d70 <HAL_UART_MspInit+0x8c>)
 8002d5a:	f000 ff1f 	bl	8003b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d5e:	bf00      	nop
 8002d60:	3728      	adds	r7, #40	; 0x28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40004400 	.word	0x40004400
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40020000 	.word	0x40020000

08002d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <NMI_Handler+0x4>

08002d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d7e:	e7fe      	b.n	8002d7e <HardFault_Handler+0x4>

08002d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <MemManage_Handler+0x4>

08002d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d8a:	e7fe      	b.n	8002d8a <BusFault_Handler+0x4>

08002d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d90:	e7fe      	b.n	8002d90 <UsageFault_Handler+0x4>

08002d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc0:	f000 fdc2 	bl	8003948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <SystemInit+0x20>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <SystemInit+0x20>)
 8002dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <start_timer_3>:
	TIM3->CR1 |= TIM_CR1_CEN;
	TIM3->CR1 &= ~TIM_CR1_CEN;
}

void start_timer_3(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <start_timer_3+0x20>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CR1 |= TIM_CR1_CEN;
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <start_timer_3+0x20>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <start_timer_3+0x20>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6013      	str	r3, [r2, #0]
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40000400 	.word	0x40000400

08002e10 <valor_timer_3>:

uint32_t valor_timer_3(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
	uint32_t ret = TIM3->CNT;//devuelve el conteo
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <valor_timer_3+0x1c>)
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	607b      	str	r3, [r7, #4]

	return ret;
 8002e1c:	687b      	ldr	r3, [r7, #4]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40000400 	.word	0x40000400

08002e30 <stop_timer_3>:

void stop_timer_3(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <stop_timer_3+0x1c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <stop_timer_3+0x1c>)
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40000400 	.word	0x40000400

08002e50 <start_timer_4>:
	TIM4->CR1 |= TIM_CR1_CEN;
	TIM4->CR1 &= ~TIM_CR1_CEN;
}

void start_timer_4(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
	TIM4->CNT = 0;
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <start_timer_4+0x20>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CR1 |= TIM_CR1_CEN;
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <start_timer_4+0x20>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <start_timer_4+0x20>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6013      	str	r3, [r2, #0]
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	40000800 	.word	0x40000800

08002e74 <valor_timer_4>:

uint32_t valor_timer_4(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
	uint32_t ret = TIM4->CNT;//devuelve el conteo
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <valor_timer_4+0x1c>)
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	607b      	str	r3, [r7, #4]

	return ret;
 8002e80:	687b      	ldr	r3, [r7, #4]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40000800 	.word	0x40000800

08002e94 <stop_timer_4>:

void stop_timer_4(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~TIM_CR1_CEN;
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <stop_timer_4+0x1c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <stop_timer_4+0x1c>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40000800 	.word	0x40000800

08002eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eb8:	480d      	ldr	r0, [pc, #52]	; (8002ef0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002eba:	490e      	ldr	r1, [pc, #56]	; (8002ef4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ebc:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec0:	e002      	b.n	8002ec8 <LoopCopyDataInit>

08002ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec6:	3304      	adds	r3, #4

08002ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ecc:	d3f9      	bcc.n	8002ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ece:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ed0:	4c0b      	ldr	r4, [pc, #44]	; (8002f00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed4:	e001      	b.n	8002eda <LoopFillZerobss>

08002ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed8:	3204      	adds	r2, #4

08002eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002edc:	d3fb      	bcc.n	8002ed6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ede:	f7ff ff73 	bl	8002dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ee2:	f003 fe2b 	bl	8006b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ee6:	f7ff f9f7 	bl	80022d8 <main>
  bx  lr    
 8002eea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002eec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef4:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8002ef8:	08008760 	.word	0x08008760
  ldr r2, =_sbss
 8002efc:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002f00:	200002e4 	.word	0x200002e4

08002f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f04:	e7fe      	b.n	8002f04 <ADC_IRQHandler>

08002f06 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b091      	sub	sp, #68	; 0x44
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	885b      	ldrh	r3, [r3, #2]
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined (ARM_MATH_DSP)

    /* Loop unrolling */
    blkCnt = numSamples >> 2U;
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	089b      	lsrs	r3, r3, #2
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8002f3a:	e052      	b.n	8002fe2 <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8002f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8002f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8002f4e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002f52:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5a:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8002f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8002f6a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f76:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 8002f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8002f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f88:	3304      	adds	r3, #4
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8002f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8002f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8002f9a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002f9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa6:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8002faa:	ed97 7a07 	vldr	s14, [r7, #28]
 8002fae:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb6:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 8002fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fcc:	3310      	adds	r3, #16
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	3310      	adds	r3, #16
 8002fd4:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd8:	3310      	adds	r3, #16
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1a9      	bne.n	8002f3c <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8002ff0:	e013      	b.n	800301a <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 8002ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff4:	1d1a      	adds	r2, r3, #4
 8002ff6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ff8:	ed93 7a00 	vldr	s14, [r3]
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	1d1a      	adds	r2, r3, #4
 8003000:	63ba      	str	r2, [r7, #56]	; 0x38
 8003002:	edd3 7a00 	vldr	s15, [r3]
 8003006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003008:	1d1a      	adds	r2, r3, #4
 800300a:	637a      	str	r2, [r7, #52]	; 0x34
 800300c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003010:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	3b01      	subs	r3, #1
 8003018:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e8      	bne.n	8002ff2 <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003020:	2300      	movs	r3, #0
 8003022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
 8003026:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 800302a:	4618      	mov	r0, r3
 800302c:	3744      	adds	r7, #68	; 0x44
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8003036:	b480      	push	{r7}
 8003038:	b085      	sub	sp, #20
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	817b      	strh	r3, [r7, #10]
 8003044:	4613      	mov	r3, r2
 8003046:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	897a      	ldrh	r2, [r7, #10]
 800304c:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	893a      	ldrh	r2, [r7, #8]
 8003052:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	605a      	str	r2, [r3, #4]
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8003066:	b480      	push	{r7}
 8003068:	b09b      	sub	sp, #108	; 0x6c
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	885b      	ldrh	r3, [r3, #2]
 8003086:	61bb      	str	r3, [r7, #24]
#if defined (ARM_MATH_DSP)
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 800308e:	2300      	movs	r3, #0
 8003090:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800309a:	e029      	b.n	80030f0 <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80030a4:	e008      	b.n	80030b8 <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 80030a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030a8:	1d1a      	adds	r2, r3, #4
 80030aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
        j--;
 80030b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b4:	3b01      	subs	r3, #1
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80030b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f3      	bne.n	80030a6 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 80030be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c0:	1d1a      	adds	r2, r3, #4
 80030c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80030c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030c8:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80030ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030cc:	3b01      	subs	r3, #1
 80030ce:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80030d0:	e008      	b.n	80030e4 <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 80030d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d4:	1d1a      	adds	r2, r3, #4
 80030d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
        j--;
 80030de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e0:	3b01      	subs	r3, #1
 80030e2:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80030e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f3      	bne.n	80030d2 <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
 80030ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ec:	3b01      	subs	r3, #1
 80030ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (rowCnt > 0U)
 80030f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1d2      	bne.n	800309c <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28

    while (loopCnt > 0U)
 80030fe:	e1aa      	b.n	8003456 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	fb02 f303 	mul.w	r3, r2, r3
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800310c:	4413      	add	r3, r2
 800310e:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	fb02 f303 	mul.w	r3, r2, r3
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	6a3a      	ldr	r2, [r7, #32]
 800311c:	4413      	add	r3, r2
 800311e:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 8003120:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	643b      	str	r3, [r7, #64]	; 0x40
 8003130:	e036      	b.n	80031a0 <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 8003132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	dd10      	ble.n	8003164 <arm_mat_inverse_f32+0xfe>
 8003142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800314c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003154:	d503      	bpl.n	800315e <arm_mat_inverse_f32+0xf8>
 8003156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003158:	edd3 7a00 	vldr	s15, [r3]
 800315c:	e016      	b.n	800318c <arm_mat_inverse_f32+0x126>
 800315e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003162:	e013      	b.n	800318c <arm_mat_inverse_f32+0x126>
 8003164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003166:	edd3 7a00 	vldr	s15, [r3]
 800316a:	eef1 7a67 	vneg.f32	s15, s15
 800316e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317a:	d505      	bpl.n	8003188 <arm_mat_inverse_f32+0x122>
 800317c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800317e:	edd3 7a00 	vldr	s15, [r3]
 8003182:	eef1 7a67 	vneg.f32	s15, s15
 8003186:	e001      	b.n	800318c <arm_mat_inverse_f32+0x126>
 8003188:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800318c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003196:	4413      	add	r3, r2
 8003198:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
 800319a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319c:	3301      	adds	r3, #1
 800319e:	643b      	str	r3, [r7, #64]	; 0x40
 80031a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d3c4      	bcc.n	8003132 <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if (maxC == 0.0f)
 80031a8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80031ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b4:	d102      	bne.n	80031bc <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
 80031b6:	f06f 0304 	mvn.w	r3, #4
 80031ba:	e186      	b.n	80034ca <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
 80031bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031be:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1U;
 80031c0:	2301      	movs	r3, #1
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Check if the pivot element is the most significant of the column */
      if ( (in > 0.0f ? in : -in) != maxC)
 80031c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80031c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	dd02      	ble.n	80031d8 <arm_mat_inverse_f32+0x172>
 80031d2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80031d6:	e003      	b.n	80031e0 <arm_mat_inverse_f32+0x17a>
 80031d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80031dc:	eef1 7a67 	vneg.f32	s15, s15
 80031e0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80031e4:	eef4 7a47 	vcmp.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d069      	beq.n	80032c2 <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1U);
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	643b      	str	r3, [r7, #64]	; 0x40

        while (i > 0U)
 80031f8:	e060      	b.n	80032bc <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003206:	4413      	add	r3, r2
 8003208:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003216:	4413      	add	r3, r2
 8003218:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to
           * replace in the rows below */
          if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 800321a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800321c:	edd3 7a00 	vldr	s15, [r3]
 8003220:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003228:	dd03      	ble.n	8003232 <arm_mat_inverse_f32+0x1cc>
 800322a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800322c:	edd3 7a00 	vldr	s15, [r3]
 8003230:	e004      	b.n	800323c <arm_mat_inverse_f32+0x1d6>
 8003232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003234:	edd3 7a00 	vldr	s15, [r3]
 8003238:	eef1 7a67 	vneg.f32	s15, s15
 800323c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003240:	eef4 7a47 	vcmp.f32	s15, s14
 8003244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003248:	d132      	bne.n	80032b0 <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 8003252:	e010      	b.n	8003276 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 8003254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
 800325a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800325c:	1d1a      	adds	r2, r3, #4
 800325e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8003266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003268:	1d1a      	adds	r2, r3, #4
 800326a:	663a      	str	r2, [r7, #96]	; 0x60
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8003270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003272:	3b01      	subs	r3, #1
 8003274:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8003276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1eb      	bne.n	8003254 <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 8003280:	e010      	b.n	80032a4 <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 8003282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
 8003288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328a:	1d1a      	adds	r2, r3, #4
 800328c:	657a      	str	r2, [r7, #84]	; 0x54
 800328e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 8003294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003296:	1d1a      	adds	r2, r3, #4
 8003298:	65ba      	str	r2, [r7, #88]	; 0x58
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 800329e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a0:	3b01      	subs	r3, #1
 80032a2:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 80032a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1eb      	bne.n	8003282 <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80032aa:	2301      	movs	r3, #1
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
 80032ae:	e008      	b.n	80032c2 <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	3301      	adds	r3, #1
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
 80032b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b8:	3b01      	subs	r3, #1
 80032ba:	643b      	str	r3, [r7, #64]	; 0x40
        while (i > 0U)
 80032bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d19b      	bne.n	80031fa <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 80032c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d009      	beq.n	80032dc <arm_mat_inverse_f32+0x276>
 80032c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80032cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d4:	d102      	bne.n	80032dc <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
 80032d6:	f06f 0304 	mvn.w	r3, #4
 80032da:	e0f6      	b.n	80034ca <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	fb02 f303 	mul.w	r3, r2, r3
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80032e8:	4413      	add	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	fb02 f303 	mul.w	r3, r2, r3
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	6a3a      	ldr	r2, [r7, #32]
 80032f8:	4413      	add	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8003312:	e010      	b.n	8003336 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 8003314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
 800331a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800331c:	1d1a      	adds	r2, r3, #4
 800331e:	663a      	str	r2, [r7, #96]	; 0x60
 8003320:	edd7 6a02 	vldr	s13, [r7, #8]
 8003324:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800332c:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8003330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003332:	3b01      	subs	r3, #1
 8003334:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8003336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1eb      	bne.n	8003314 <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8003340:	e010      	b.n	8003364 <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8003342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
 8003348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800334a:	1d1a      	adds	r2, r3, #4
 800334c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800334e:	edd7 6a02 	vldr	s13, [r7, #8]
 8003352:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800335a:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 800335e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003360:	3b01      	subs	r3, #1
 8003362:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8003364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1eb      	bne.n	8003342 <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 800336a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800336c:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (k > 0U)
 800337a:	e060      	b.n	800343e <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if (i == l)
 800337c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	429a      	cmp	r2, r3
 8003382:	d10c      	bne.n	800339e <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800338e:	4413      	add	r3, r2
 8003390:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003398:	4413      	add	r3, r2
 800339a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800339c:	e044      	b.n	8003428 <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 800339e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 80033b4:	e017      	b.n	80033e6 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 80033b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
 80033bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033be:	1d1a      	adds	r2, r3, #4
 80033c0:	653a      	str	r2, [r7, #80]	; 0x50
 80033c2:	ed93 7a00 	vldr	s14, [r3]
 80033c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80033ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033d0:	1d1a      	adds	r2, r3, #4
 80033d2:	663a      	str	r2, [r7, #96]	; 0x60
 80033d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80033d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033dc:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 80033e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e2:	3b01      	subs	r3, #1
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 80033e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e4      	bne.n	80033b6 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 80033f0:	e017      	b.n	8003422 <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 80033f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 80033f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fa:	1d1a      	adds	r2, r3, #4
 80033fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80033fe:	ed93 7a00 	vldr	s14, [r3]
 8003402:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800340c:	1d1a      	adds	r2, r3, #4
 800340e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003410:	ed97 7a02 	vldr	s14, [r7, #8]
 8003414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003418:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 800341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341e:	3b01      	subs	r3, #1
 8003420:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8003422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e4      	bne.n	80033f2 <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800342e:	4413      	add	r3, r2
 8003430:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	3b01      	subs	r3, #1
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
 8003438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343a:	3301      	adds	r3, #1
 800343c:	643b      	str	r3, [r7, #64]	; 0x40
      while (k > 0U)
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d19b      	bne.n	800337c <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
 8003444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003446:	3304      	adds	r3, #4
 8003448:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	3b01      	subs	r3, #1
 800344e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	3301      	adds	r3, #1
 8003454:	62bb      	str	r3, [r7, #40]	; 0x28
    while (loopCnt > 0U)
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	2b00      	cmp	r3, #0
 800345a:	f47f ae51 	bne.w	8003100 <arm_mat_inverse_f32+0x9a>


#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800345e:	2300      	movs	r3, #0
 8003460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((flag != 1U) && (in == 0.0f))
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	2b01      	cmp	r3, #1
 8003468:	d02d      	beq.n	80034c6 <arm_mat_inverse_f32+0x460>
 800346a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800346e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003476:	d126      	bne.n	80034c6 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 800347e:	2300      	movs	r3, #0
 8003480:	643b      	str	r3, [r7, #64]	; 0x40
 8003482:	e00d      	b.n	80034a0 <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
 8003484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800348a:	4413      	add	r3, r2
 800348c:	edd3 7a00 	vldr	s15, [r3]
 8003490:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003498:	d10a      	bne.n	80034b0 <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
 800349a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349c:	3301      	adds	r3, #1
 800349e:	643b      	str	r3, [r7, #64]	; 0x40
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	fb02 f303 	mul.w	r3, r2, r3
 80034a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d3ea      	bcc.n	8003484 <arm_mat_inverse_f32+0x41e>
 80034ae:	e000      	b.n	80034b2 <arm_mat_inverse_f32+0x44c>
            break;
 80034b0:	bf00      	nop
      }

      if (i == numRows * numCols)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034bc:	429a      	cmp	r2, r3
 80034be:	d102      	bne.n	80034c6 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
 80034c0:	23fb      	movs	r3, #251	; 0xfb
 80034c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
 80034c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	376c      	adds	r7, #108	; 0x6c
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b095      	sub	sp, #84	; 0x54
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	885b      	ldrh	r3, [r3, #2]
 8003504:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	885b      	ldrh	r3, [r3, #2]
 800350a:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
 800350c:	2300      	movs	r3, #0
 800350e:	873b      	strh	r3, [r7, #56]	; 0x38
 8003510:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003512:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 8003514:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800351a:	4413      	add	r3, r2
 800351c:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 800351e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003520:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 8003532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003534:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
 8003536:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
 800353c:	e061      	b.n	8003602 <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 800353e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8003544:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800354a:	4413      	add	r3, r2
 800354c:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 800354e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8003554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 800355a:	ed97 7a07 	vldr	s14, [r7, #28]
 800355e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003566:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800356a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8003572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8003578:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800357e:	4413      	add	r3, r2
 8003580:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8003582:	ed97 7a06 	vldr	s14, [r7, #24]
 8003586:	edd7 7a05 	vldr	s15, [r7, #20]
 800358a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003596:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 800359a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 80035a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035a6:	4413      	add	r3, r2
 80035a8:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 80035aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 80035b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 80035b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80035ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80035be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 80035ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 80035d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035da:	4413      	add	r3, r2
 80035dc:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 80035de:	ed97 7a06 	vldr	s14, [r7, #24]
 80035e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
 80035f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f8:	3310      	adds	r3, #16
 80035fa:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 80035fc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80035fe:	3b01      	subs	r3, #1
 8003600:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8003602:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d19a      	bne.n	800353e <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
 8003608:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
 8003610:	e017      	b.n	8003642 <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 8003612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003614:	1d1a      	adds	r2, r3, #4
 8003616:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003618:	ed93 7a00 	vldr	s14, [r3]
 800361c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800361e:	edd3 7a00 	vldr	s15, [r3]
 8003622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003626:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800362a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 8003632:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003638:	4413      	add	r3, r2
 800363a:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 800363c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800363e:	3b01      	subs	r3, #1
 8003640:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8003642:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e4      	bne.n	8003612 <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 8003648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800364a:	1d1a      	adds	r2, r3, #4
 800364c:	643a      	str	r2, [r7, #64]	; 0x40
 800364e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003650:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 8003652:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003654:	3301      	adds	r3, #1
 8003656:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8003664:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003666:	3b01      	subs	r3, #1
 8003668:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
 800366a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800366c:	2b00      	cmp	r3, #0
 800366e:	f47f af5d 	bne.w	800352c <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 8003672:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003674:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003676:	4413      	add	r3, r2
 8003678:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 800367a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003680:	4413      	add	r3, r2
 8003682:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8003684:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003686:	3b01      	subs	r3, #1
 8003688:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
 800368a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800368c:	2b00      	cmp	r3, #0
 800368e:	f47f af41 	bne.w	8003514 <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8003692:	2300      	movs	r3, #0
 8003694:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 8003698:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 800369c:	4618      	mov	r0, r3
 800369e:	3754      	adds	r7, #84	; 0x54
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <arm_mat_scale_f32>:

arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
  float32_t scale,
  arm_matrix_instance_f32 * pDst)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b093      	sub	sp, #76	; 0x4c
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80036b4:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	643b      	str	r3, [r7, #64]	; 0x40
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	885b      	ldrh	r3, [r3, #2]
 80036cc:	fb02 f303 	mul.w	r3, r2, r3
 80036d0:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2;
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 80036d8:	e043      	b.n	8003762 <arm_mat_scale_f32+0xba>
    {
      /* C(m,n) = A(m,n) * scale */
      /* Scaling and results are stored in the destination buffer. */
      in1 = pIn[0];
 80036da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
      in2 = pIn[1];
 80036e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      in3 = pIn[2];
 80036e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
      in4 = pIn[3];
 80036ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24

      out1 = in1 * scale;
 80036f2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80036f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80036fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fe:	edc7 7a08 	vstr	s15, [r7, #32]
      out2 = in2 * scale;
 8003702:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003706:	edd7 7a02 	vldr	s15, [r7, #8]
 800370a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370e:	edc7 7a07 	vstr	s15, [r7, #28]
      out3 = in3 * scale;
 8003712:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003716:	edd7 7a02 	vldr	s15, [r7, #8]
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	edc7 7a06 	vstr	s15, [r7, #24]
      out4 = in4 * scale;
 8003722:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003726:	edd7 7a02 	vldr	s15, [r7, #8]
 800372a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372e:	edc7 7a05 	vstr	s15, [r7, #20]


      pOut[0] = out1;
 8003732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003734:	6a3a      	ldr	r2, [r7, #32]
 8003736:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8003738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800373a:	3304      	adds	r3, #4
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	601a      	str	r2, [r3, #0]
      pOut[2] = out3;
 8003740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003742:	3308      	adds	r3, #8
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	601a      	str	r2, [r3, #0]
      pOut[3] = out4;
 8003748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800374a:	330c      	adds	r3, #12
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	601a      	str	r2, [r3, #0]

      /* update pointers to process next sampels */
      pIn += 4U;
 8003750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003752:	3310      	adds	r3, #16
 8003754:	647b      	str	r3, [r7, #68]	; 0x44
      pOut += 4U;
 8003756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003758:	3310      	adds	r3, #16
 800375a:	643b      	str	r3, [r7, #64]	; 0x40

      /* Decrement the numSamples loop counter */
      blkCnt--;
 800375c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800375e:	3b01      	subs	r3, #1
 8003760:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0U)
 8003762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1b8      	bne.n	80036da <arm_mat_scale_f32+0x32>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 8003768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8003770:	e010      	b.n	8003794 <arm_mat_scale_f32+0xec>
    {
      /* C(m,n) = A(m,n) * scale */
      /* The results are stored in the destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8003772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003774:	1d1a      	adds	r2, r3, #4
 8003776:	647a      	str	r2, [r7, #68]	; 0x44
 8003778:	ed93 7a00 	vldr	s14, [r3]
 800377c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377e:	1d1a      	adds	r2, r3, #4
 8003780:	643a      	str	r2, [r7, #64]	; 0x40
 8003782:	edd7 7a02 	vldr	s15, [r7, #8]
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 800378e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003790:	3b01      	subs	r3, #1
 8003792:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0U)
 8003794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1eb      	bne.n	8003772 <arm_mat_scale_f32+0xca>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800379a:	2300      	movs	r3, #0
 800379c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* Return to application */
  return (status);
 80037a0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	374c      	adds	r7, #76	; 0x4c
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b08b      	sub	sp, #44	; 0x2c
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	617b      	str	r3, [r7, #20]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	827b      	strh	r3, [r7, #18]
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	885b      	ldrh	r3, [r3, #2]
 80037d0:	823b      	strh	r3, [r7, #16]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
 80037d2:	2300      	movs	r3, #0
 80037d4:	83bb      	strh	r3, [r7, #28]
 80037d6:	8a7b      	ldrh	r3, [r7, #18]
 80037d8:	837b      	strh	r3, [r7, #26]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* Loop Unrolling */
      blkCnt = nColumns >> 2;
 80037da:	8a3b      	ldrh	r3, [r7, #16]
 80037dc:	089b      	lsrs	r3, r3, #2
 80037de:	83fb      	strh	r3, [r7, #30]

      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
 80037e0:	8bbb      	ldrh	r3, [r7, #28]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4413      	add	r3, r2
 80037e8:	623b      	str	r3, [r7, #32]

      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
       ** a second loop below computes the remaining 1 to 3 samples. */
      while (blkCnt > 0U)        /* column loop */
 80037ea:	e02e      	b.n	800384a <arm_mat_trans_f32+0x9a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	1d1a      	adds	r2, r3, #4
 80037f0:	627a      	str	r2, [r7, #36]	; 0x24
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 80037f8:	8a7b      	ldrh	r3, [r7, #18]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	6a3a      	ldr	r2, [r7, #32]
 80037fe:	4413      	add	r3, r2
 8003800:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	1d1a      	adds	r2, r3, #4
 8003806:	627a      	str	r2, [r7, #36]	; 0x24
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 800380e:	8a7b      	ldrh	r3, [r7, #18]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	6a3a      	ldr	r2, [r7, #32]
 8003814:	4413      	add	r3, r2
 8003816:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	1d1a      	adds	r2, r3, #4
 800381c:	627a      	str	r2, [r7, #36]	; 0x24
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8003824:	8a7b      	ldrh	r3, [r7, #18]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	6a3a      	ldr	r2, [r7, #32]
 800382a:	4413      	add	r3, r2
 800382c:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	1d1a      	adds	r2, r3, #4
 8003832:	627a      	str	r2, [r7, #36]	; 0x24
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 800383a:	8a7b      	ldrh	r3, [r7, #18]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	6a3a      	ldr	r2, [r7, #32]
 8003840:	4413      	add	r3, r2
 8003842:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8003844:	8bfb      	ldrh	r3, [r7, #30]
 8003846:	3b01      	subs	r3, #1
 8003848:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)        /* column loop */
 800384a:	8bfb      	ldrh	r3, [r7, #30]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1cd      	bne.n	80037ec <arm_mat_trans_f32+0x3c>
      }

      /* Perform matrix transpose for last 3 samples here. */
      blkCnt = nColumns % 0x4U;
 8003850:	8a3b      	ldrh	r3, [r7, #16]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	83fb      	strh	r3, [r7, #30]

      while (blkCnt > 0U)
 8003858:	e00d      	b.n	8003876 <arm_mat_trans_f32+0xc6>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	1d1a      	adds	r2, r3, #4
 800385e:	627a      	str	r2, [r7, #36]	; 0x24
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8003866:	8a7b      	ldrh	r3, [r7, #18]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	6a3a      	ldr	r2, [r7, #32]
 800386c:	4413      	add	r3, r2
 800386e:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8003870:	8bfb      	ldrh	r3, [r7, #30]
 8003872:	3b01      	subs	r3, #1
 8003874:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)
 8003876:	8bfb      	ldrh	r3, [r7, #30]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ee      	bne.n	800385a <arm_mat_trans_f32+0xaa>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
 800387c:	8bbb      	ldrh	r3, [r7, #28]
 800387e:	3301      	adds	r3, #1
 8003880:	83bb      	strh	r3, [r7, #28]

      /* Decrement the row loop counter */
      row--;
 8003882:	8b7b      	ldrh	r3, [r7, #26]
 8003884:	3b01      	subs	r3, #1
 8003886:	837b      	strh	r3, [r7, #26]

    } while (row > 0U);          /* row loop end  */
 8003888:	8b7b      	ldrh	r3, [r7, #26]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1a5      	bne.n	80037da <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 8003892:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003896:	4618      	mov	r0, r3
 8003898:	372c      	adds	r7, #44	; 0x2c
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038a8:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_Init+0x40>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0d      	ldr	r2, [pc, #52]	; (80038e4 <HAL_Init+0x40>)
 80038ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_Init+0x40>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <HAL_Init+0x40>)
 80038ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_Init+0x40>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <HAL_Init+0x40>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038cc:	2003      	movs	r0, #3
 80038ce:	f000 f931 	bl	8003b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038d2:	2000      	movs	r0, #0
 80038d4:	f000 f808 	bl	80038e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038d8:	f7ff f994 	bl	8002c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023c00 	.word	0x40023c00

080038e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <HAL_InitTick+0x54>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_InitTick+0x58>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	4619      	mov	r1, r3
 80038fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f93b 	bl	8003b82 <HAL_SYSTICK_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e00e      	b.n	8003934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b0f      	cmp	r3, #15
 800391a:	d80a      	bhi.n	8003932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800391c:	2200      	movs	r2, #0
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f000 f911 	bl	8003b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003928:	4a06      	ldr	r2, [pc, #24]	; (8003944 <HAL_InitTick+0x5c>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	2000003c 	.word	0x2000003c
 8003940:	20000044 	.word	0x20000044
 8003944:	20000040 	.word	0x20000040

08003948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_IncTick+0x20>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_IncTick+0x24>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4413      	add	r3, r2
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <HAL_IncTick+0x24>)
 800395a:	6013      	str	r3, [r2, #0]
}
 800395c:	bf00      	nop
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000044 	.word	0x20000044
 800396c:	200002dc 	.word	0x200002dc

08003970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return uwTick;
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <HAL_GetTick+0x14>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	200002dc 	.word	0x200002dc

08003988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003990:	f7ff ffee 	bl	8003970 <HAL_GetTick>
 8003994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d005      	beq.n	80039ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <HAL_Delay+0x44>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039ae:	bf00      	nop
 80039b0:	f7ff ffde 	bl	8003970 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d8f7      	bhi.n	80039b0 <HAL_Delay+0x28>
  {
  }
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000044 	.word	0x20000044

080039d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a02:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	60d3      	str	r3, [r2, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <__NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0307 	and.w	r3, r3, #7
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	6039      	str	r1, [r7, #0]
 8003a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	db0a      	blt.n	8003a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	490c      	ldr	r1, [pc, #48]	; (8003a80 <__NVIC_SetPriority+0x4c>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	0112      	lsls	r2, r2, #4
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	440b      	add	r3, r1
 8003a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a5c:	e00a      	b.n	8003a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4908      	ldr	r1, [pc, #32]	; (8003a84 <__NVIC_SetPriority+0x50>)
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	3b04      	subs	r3, #4
 8003a6c:	0112      	lsls	r2, r2, #4
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	440b      	add	r3, r1
 8003a72:	761a      	strb	r2, [r3, #24]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	e000e100 	.word	0xe000e100
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	; 0x24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f1c3 0307 	rsb	r3, r3, #7
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	bf28      	it	cs
 8003aa6:	2304      	movcs	r3, #4
 8003aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3304      	adds	r3, #4
 8003aae:	2b06      	cmp	r3, #6
 8003ab0:	d902      	bls.n	8003ab8 <NVIC_EncodePriority+0x30>
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3b03      	subs	r3, #3
 8003ab6:	e000      	b.n	8003aba <NVIC_EncodePriority+0x32>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	401a      	ands	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	43d9      	mvns	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae0:	4313      	orrs	r3, r2
         );
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3724      	adds	r7, #36	; 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b00:	d301      	bcc.n	8003b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b02:	2301      	movs	r3, #1
 8003b04:	e00f      	b.n	8003b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <SysTick_Config+0x40>)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b0e:	210f      	movs	r1, #15
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	f7ff ff8e 	bl	8003a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <SysTick_Config+0x40>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b1e:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <SysTick_Config+0x40>)
 8003b20:	2207      	movs	r2, #7
 8003b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	e000e010 	.word	0xe000e010

08003b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ff47 	bl	80039d0 <__NVIC_SetPriorityGrouping>
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b5c:	f7ff ff5c 	bl	8003a18 <__NVIC_GetPriorityGrouping>
 8003b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	6978      	ldr	r0, [r7, #20]
 8003b68:	f7ff ff8e 	bl	8003a88 <NVIC_EncodePriority>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff5d 	bl	8003a34 <__NVIC_SetPriority>
}
 8003b7a:	bf00      	nop
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ffb0 	bl	8003af0 <SysTick_Config>
 8003b90:	4603      	mov	r3, r0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b089      	sub	sp, #36	; 0x24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	e159      	b.n	8003e6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bb8:	2201      	movs	r2, #1
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	f040 8148 	bne.w	8003e66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d005      	beq.n	8003bee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d130      	bne.n	8003c50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4013      	ands	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c24:	2201      	movs	r2, #1
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f003 0201 	and.w	r2, r3, #1
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d017      	beq.n	8003c8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	2203      	movs	r2, #3
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4013      	ands	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d123      	bne.n	8003ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	08da      	lsrs	r2, r3, #3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3208      	adds	r2, #8
 8003ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	220f      	movs	r2, #15
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	08da      	lsrs	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3208      	adds	r2, #8
 8003cda:	69b9      	ldr	r1, [r7, #24]
 8003cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	2203      	movs	r2, #3
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 0203 	and.w	r2, r3, #3
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80a2 	beq.w	8003e66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	4b57      	ldr	r3, [pc, #348]	; (8003e84 <HAL_GPIO_Init+0x2e8>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	4a56      	ldr	r2, [pc, #344]	; (8003e84 <HAL_GPIO_Init+0x2e8>)
 8003d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d30:	6453      	str	r3, [r2, #68]	; 0x44
 8003d32:	4b54      	ldr	r3, [pc, #336]	; (8003e84 <HAL_GPIO_Init+0x2e8>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d3e:	4a52      	ldr	r2, [pc, #328]	; (8003e88 <HAL_GPIO_Init+0x2ec>)
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	089b      	lsrs	r3, r3, #2
 8003d44:	3302      	adds	r3, #2
 8003d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	220f      	movs	r2, #15
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a49      	ldr	r2, [pc, #292]	; (8003e8c <HAL_GPIO_Init+0x2f0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d019      	beq.n	8003d9e <HAL_GPIO_Init+0x202>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a48      	ldr	r2, [pc, #288]	; (8003e90 <HAL_GPIO_Init+0x2f4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_GPIO_Init+0x1fe>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a47      	ldr	r2, [pc, #284]	; (8003e94 <HAL_GPIO_Init+0x2f8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00d      	beq.n	8003d96 <HAL_GPIO_Init+0x1fa>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a46      	ldr	r2, [pc, #280]	; (8003e98 <HAL_GPIO_Init+0x2fc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d007      	beq.n	8003d92 <HAL_GPIO_Init+0x1f6>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a45      	ldr	r2, [pc, #276]	; (8003e9c <HAL_GPIO_Init+0x300>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d101      	bne.n	8003d8e <HAL_GPIO_Init+0x1f2>
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	e008      	b.n	8003da0 <HAL_GPIO_Init+0x204>
 8003d8e:	2307      	movs	r3, #7
 8003d90:	e006      	b.n	8003da0 <HAL_GPIO_Init+0x204>
 8003d92:	2303      	movs	r3, #3
 8003d94:	e004      	b.n	8003da0 <HAL_GPIO_Init+0x204>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e002      	b.n	8003da0 <HAL_GPIO_Init+0x204>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_GPIO_Init+0x204>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	f002 0203 	and.w	r2, r2, #3
 8003da6:	0092      	lsls	r2, r2, #2
 8003da8:	4093      	lsls	r3, r2
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003db0:	4935      	ldr	r1, [pc, #212]	; (8003e88 <HAL_GPIO_Init+0x2ec>)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	3302      	adds	r3, #2
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dbe:	4b38      	ldr	r3, [pc, #224]	; (8003ea0 <HAL_GPIO_Init+0x304>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003de2:	4a2f      	ldr	r2, [pc, #188]	; (8003ea0 <HAL_GPIO_Init+0x304>)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003de8:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <HAL_GPIO_Init+0x304>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e0c:	4a24      	ldr	r2, [pc, #144]	; (8003ea0 <HAL_GPIO_Init+0x304>)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e12:	4b23      	ldr	r3, [pc, #140]	; (8003ea0 <HAL_GPIO_Init+0x304>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e36:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <HAL_GPIO_Init+0x304>)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e3c:	4b18      	ldr	r3, [pc, #96]	; (8003ea0 <HAL_GPIO_Init+0x304>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	43db      	mvns	r3, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e60:	4a0f      	ldr	r2, [pc, #60]	; (8003ea0 <HAL_GPIO_Init+0x304>)
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2b0f      	cmp	r3, #15
 8003e70:	f67f aea2 	bls.w	8003bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	3724      	adds	r7, #36	; 0x24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40013800 	.word	0x40013800
 8003e8c:	40020000 	.word	0x40020000
 8003e90:	40020400 	.word	0x40020400
 8003e94:	40020800 	.word	0x40020800
 8003e98:	40020c00 	.word	0x40020c00
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40013c00 	.word	0x40013c00

08003ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	807b      	strh	r3, [r7, #2]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb4:	787b      	ldrb	r3, [r7, #1]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eba:	887a      	ldrh	r2, [r7, #2]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ec0:	e003      	b.n	8003eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ec2:	887b      	ldrh	r3, [r7, #2]
 8003ec4:	041a      	lsls	r2, r3, #16
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	619a      	str	r2, [r3, #24]
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e12b      	b.n	8004142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fe fea8 	bl	8002c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2224      	movs	r2, #36	; 0x24
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f3c:	f001 fbd2 	bl	80056e4 <HAL_RCC_GetPCLK1Freq>
 8003f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4a81      	ldr	r2, [pc, #516]	; (800414c <HAL_I2C_Init+0x274>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d807      	bhi.n	8003f5c <HAL_I2C_Init+0x84>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4a80      	ldr	r2, [pc, #512]	; (8004150 <HAL_I2C_Init+0x278>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	bf94      	ite	ls
 8003f54:	2301      	movls	r3, #1
 8003f56:	2300      	movhi	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e006      	b.n	8003f6a <HAL_I2C_Init+0x92>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a7d      	ldr	r2, [pc, #500]	; (8004154 <HAL_I2C_Init+0x27c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	bf94      	ite	ls
 8003f64:	2301      	movls	r3, #1
 8003f66:	2300      	movhi	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e0e7      	b.n	8004142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a78      	ldr	r2, [pc, #480]	; (8004158 <HAL_I2C_Init+0x280>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	0c9b      	lsrs	r3, r3, #18
 8003f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4a6a      	ldr	r2, [pc, #424]	; (800414c <HAL_I2C_Init+0x274>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d802      	bhi.n	8003fac <HAL_I2C_Init+0xd4>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	e009      	b.n	8003fc0 <HAL_I2C_Init+0xe8>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	4a69      	ldr	r2, [pc, #420]	; (800415c <HAL_I2C_Init+0x284>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	099b      	lsrs	r3, r3, #6
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	495c      	ldr	r1, [pc, #368]	; (800414c <HAL_I2C_Init+0x274>)
 8003fdc:	428b      	cmp	r3, r1
 8003fde:	d819      	bhi.n	8004014 <HAL_I2C_Init+0x13c>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	1e59      	subs	r1, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ff4:	400b      	ands	r3, r1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_I2C_Init+0x138>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1e59      	subs	r1, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	fbb1 f3f3 	udiv	r3, r1, r3
 8004008:	3301      	adds	r3, #1
 800400a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400e:	e051      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 8004010:	2304      	movs	r3, #4
 8004012:	e04f      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d111      	bne.n	8004040 <HAL_I2C_Init+0x168>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1e58      	subs	r0, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6859      	ldr	r1, [r3, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	440b      	add	r3, r1
 800402a:	fbb0 f3f3 	udiv	r3, r0, r3
 800402e:	3301      	adds	r3, #1
 8004030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e012      	b.n	8004066 <HAL_I2C_Init+0x18e>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1e58      	subs	r0, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	0099      	lsls	r1, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	fbb0 f3f3 	udiv	r3, r0, r3
 8004056:	3301      	adds	r3, #1
 8004058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Init+0x196>
 800406a:	2301      	movs	r3, #1
 800406c:	e022      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10e      	bne.n	8004094 <HAL_I2C_Init+0x1bc>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1e58      	subs	r0, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6859      	ldr	r1, [r3, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	440b      	add	r3, r1
 8004084:	fbb0 f3f3 	udiv	r3, r0, r3
 8004088:	3301      	adds	r3, #1
 800408a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004092:	e00f      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1e58      	subs	r0, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	0099      	lsls	r1, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040aa:	3301      	adds	r3, #1
 80040ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	6809      	ldr	r1, [r1, #0]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6911      	ldr	r1, [r2, #16]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68d2      	ldr	r2, [r2, #12]
 80040ee:	4311      	orrs	r1, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	000186a0 	.word	0x000186a0
 8004150:	001e847f 	.word	0x001e847f
 8004154:	003d08ff 	.word	0x003d08ff
 8004158:	431bde83 	.word	0x431bde83
 800415c:	10624dd3 	.word	0x10624dd3

08004160 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af02      	add	r7, sp, #8
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	461a      	mov	r2, r3
 800416c:	460b      	mov	r3, r1
 800416e:	817b      	strh	r3, [r7, #10]
 8004170:	4613      	mov	r3, r2
 8004172:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004174:	f7ff fbfc 	bl	8003970 <HAL_GetTick>
 8004178:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b20      	cmp	r3, #32
 8004184:	f040 80e0 	bne.w	8004348 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	2319      	movs	r3, #25
 800418e:	2201      	movs	r2, #1
 8004190:	4970      	ldr	r1, [pc, #448]	; (8004354 <HAL_I2C_Master_Transmit+0x1f4>)
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fc58 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800419e:	2302      	movs	r3, #2
 80041a0:	e0d3      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_I2C_Master_Transmit+0x50>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e0cc      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d007      	beq.n	80041d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2221      	movs	r2, #33	; 0x21
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2210      	movs	r2, #16
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	893a      	ldrh	r2, [r7, #8]
 8004206:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a50      	ldr	r2, [pc, #320]	; (8004358 <HAL_I2C_Master_Transmit+0x1f8>)
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004218:	8979      	ldrh	r1, [r7, #10]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	6a3a      	ldr	r2, [r7, #32]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fac2 	bl	80047a8 <I2C_MasterRequestWrite>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e08d      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004244:	e066      	b.n	8004314 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	6a39      	ldr	r1, [r7, #32]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fcd2 	bl	8004bf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00d      	beq.n	8004272 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	2b04      	cmp	r3, #4
 800425c:	d107      	bne.n	800426e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e06b      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d11b      	bne.n	80042e8 <HAL_I2C_Master_Transmit+0x188>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d017      	beq.n	80042e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	781a      	ldrb	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	6a39      	ldr	r1, [r7, #32]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fcc2 	bl	8004c76 <I2C_WaitOnBTFFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00d      	beq.n	8004314 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d107      	bne.n	8004310 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e01a      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	2b00      	cmp	r3, #0
 800431a:	d194      	bne.n	8004246 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	e000      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004348:	2302      	movs	r3, #2
  }
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	00100002 	.word	0x00100002
 8004358:	ffff0000 	.word	0xffff0000

0800435c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08c      	sub	sp, #48	; 0x30
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	461a      	mov	r2, r3
 8004368:	460b      	mov	r3, r1
 800436a:	817b      	strh	r3, [r7, #10]
 800436c:	4613      	mov	r3, r2
 800436e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004370:	f7ff fafe 	bl	8003970 <HAL_GetTick>
 8004374:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b20      	cmp	r3, #32
 8004380:	f040 820b 	bne.w	800479a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	2319      	movs	r3, #25
 800438a:	2201      	movs	r2, #1
 800438c:	497c      	ldr	r1, [pc, #496]	; (8004580 <HAL_I2C_Master_Receive+0x224>)
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fb5a 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800439a:	2302      	movs	r3, #2
 800439c:	e1fe      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_I2C_Master_Receive+0x50>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e1f7      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d007      	beq.n	80043d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2222      	movs	r2, #34	; 0x22
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2210      	movs	r2, #16
 80043ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	893a      	ldrh	r2, [r7, #8]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4a5c      	ldr	r2, [pc, #368]	; (8004584 <HAL_I2C_Master_Receive+0x228>)
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004414:	8979      	ldrh	r1, [r7, #10]
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 fa46 	bl	80048ac <I2C_MasterRequestRead>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e1b8      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	2b00      	cmp	r3, #0
 8004430:	d113      	bne.n	800445a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004432:	2300      	movs	r3, #0
 8004434:	623b      	str	r3, [r7, #32]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	623b      	str	r3, [r7, #32]
 8004446:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	e18c      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445e:	2b01      	cmp	r3, #1
 8004460:	d11b      	bne.n	800449a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004470:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	e16c      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d11b      	bne.n	80044da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c2:	2300      	movs	r3, #0
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	e14c      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004500:	e138      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004506:	2b03      	cmp	r3, #3
 8004508:	f200 80f1 	bhi.w	80046ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	2b01      	cmp	r3, #1
 8004512:	d123      	bne.n	800455c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fbed 	bl	8004cf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e139      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	855a      	strh	r2, [r3, #42]	; 0x2a
 800455a:	e10b      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004560:	2b02      	cmp	r3, #2
 8004562:	d14e      	bne.n	8004602 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	2200      	movs	r2, #0
 800456c:	4906      	ldr	r1, [pc, #24]	; (8004588 <HAL_I2C_Master_Receive+0x22c>)
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 fa6a 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e10e      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
 800457e:	bf00      	nop
 8004580:	00100002 	.word	0x00100002
 8004584:	ffff0000 	.word	0xffff0000
 8004588:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004600:	e0b8      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	2200      	movs	r2, #0
 800460a:	4966      	ldr	r1, [pc, #408]	; (80047a4 <HAL_I2C_Master_Receive+0x448>)
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fa1b 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0bf      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	2200      	movs	r2, #0
 8004666:	494f      	ldr	r1, [pc, #316]	; (80047a4 <HAL_I2C_Master_Receive+0x448>)
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f9ed 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e091      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046ec:	e042      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 fb00 	bl	8004cf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e04c      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b04      	cmp	r3, #4
 8004740:	d118      	bne.n	8004774 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475e:	3b01      	subs	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004778:	2b00      	cmp	r3, #0
 800477a:	f47f aec2 	bne.w	8004502 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e000      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800479a:	2302      	movs	r3, #2
  }
}
 800479c:	4618      	mov	r0, r3
 800479e:	3728      	adds	r7, #40	; 0x28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	00010004 	.word	0x00010004

080047a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	460b      	mov	r3, r1
 80047b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d006      	beq.n	80047d2 <I2C_MasterRequestWrite+0x2a>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d003      	beq.n	80047d2 <I2C_MasterRequestWrite+0x2a>
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047d0:	d108      	bne.n	80047e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	e00b      	b.n	80047fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	2b12      	cmp	r3, #18
 80047ea:	d107      	bne.n	80047fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f91d 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00d      	beq.n	8004830 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004822:	d103      	bne.n	800482c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800482a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e035      	b.n	800489c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004838:	d108      	bne.n	800484c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800483a:	897b      	ldrh	r3, [r7, #10]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004848:	611a      	str	r2, [r3, #16]
 800484a:	e01b      	b.n	8004884 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800484c:	897b      	ldrh	r3, [r7, #10]
 800484e:	11db      	asrs	r3, r3, #7
 8004850:	b2db      	uxtb	r3, r3
 8004852:	f003 0306 	and.w	r3, r3, #6
 8004856:	b2db      	uxtb	r3, r3
 8004858:	f063 030f 	orn	r3, r3, #15
 800485c:	b2da      	uxtb	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	490e      	ldr	r1, [pc, #56]	; (80048a4 <I2C_MasterRequestWrite+0xfc>)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f943 	bl	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e010      	b.n	800489c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800487a:	897b      	ldrh	r3, [r7, #10]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	4907      	ldr	r1, [pc, #28]	; (80048a8 <I2C_MasterRequestWrite+0x100>)
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f933 	bl	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	00010008 	.word	0x00010008
 80048a8:	00010002 	.word	0x00010002

080048ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	460b      	mov	r3, r1
 80048ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d006      	beq.n	80048e6 <I2C_MasterRequestRead+0x3a>
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d003      	beq.n	80048e6 <I2C_MasterRequestRead+0x3a>
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048e4:	d108      	bne.n	80048f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e00b      	b.n	8004910 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	2b11      	cmp	r3, #17
 80048fe:	d107      	bne.n	8004910 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800490e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f893 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00d      	beq.n	8004944 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004936:	d103      	bne.n	8004940 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800493e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e079      	b.n	8004a38 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800494c:	d108      	bne.n	8004960 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800494e:	897b      	ldrh	r3, [r7, #10]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	b2da      	uxtb	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	611a      	str	r2, [r3, #16]
 800495e:	e05f      	b.n	8004a20 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004960:	897b      	ldrh	r3, [r7, #10]
 8004962:	11db      	asrs	r3, r3, #7
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 0306 	and.w	r3, r3, #6
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f063 030f 	orn	r3, r3, #15
 8004970:	b2da      	uxtb	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4930      	ldr	r1, [pc, #192]	; (8004a40 <I2C_MasterRequestRead+0x194>)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f8b9 	bl	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e054      	b.n	8004a38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800498e:	897b      	ldrh	r3, [r7, #10]
 8004990:	b2da      	uxtb	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	4929      	ldr	r1, [pc, #164]	; (8004a44 <I2C_MasterRequestRead+0x198>)
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f8a9 	bl	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e044      	b.n	8004a38 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f831 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00d      	beq.n	8004a08 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fa:	d103      	bne.n	8004a04 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e017      	b.n	8004a38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a08:	897b      	ldrh	r3, [r7, #10]
 8004a0a:	11db      	asrs	r3, r3, #7
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f003 0306 	and.w	r3, r3, #6
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f063 030e 	orn	r3, r3, #14
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4907      	ldr	r1, [pc, #28]	; (8004a44 <I2C_MasterRequestRead+0x198>)
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f865 	bl	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	00010008 	.word	0x00010008
 8004a44:	00010002 	.word	0x00010002

08004a48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a58:	e025      	b.n	8004aa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d021      	beq.n	8004aa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a62:	f7fe ff85 	bl	8003970 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d116      	bne.n	8004aa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f043 0220 	orr.w	r2, r3, #32
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e023      	b.n	8004aee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d10d      	bne.n	8004acc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	43da      	mvns	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4013      	ands	r3, r2
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2301      	moveq	r3, #1
 8004ac4:	2300      	movne	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	e00c      	b.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	43da      	mvns	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bf0c      	ite	eq
 8004ade:	2301      	moveq	r3, #1
 8004ae0:	2300      	movne	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d0b6      	beq.n	8004a5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
 8004b02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b04:	e051      	b.n	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b14:	d123      	bne.n	8004b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f043 0204 	orr.w	r2, r3, #4
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e046      	b.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d021      	beq.n	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b66:	f7fe ff03 	bl	8003970 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d302      	bcc.n	8004b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d116      	bne.n	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f043 0220 	orr.w	r2, r3, #32
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e020      	b.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	0c1b      	lsrs	r3, r3, #16
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10c      	bne.n	8004bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	43da      	mvns	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bf14      	ite	ne
 8004bc6:	2301      	movne	r3, #1
 8004bc8:	2300      	moveq	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	e00b      	b.n	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	43da      	mvns	r2, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bf14      	ite	ne
 8004be0:	2301      	movne	r3, #1
 8004be2:	2300      	moveq	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d18d      	bne.n	8004b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c00:	e02d      	b.n	8004c5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 f8ce 	bl	8004da4 <I2C_IsAcknowledgeFailed>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e02d      	b.n	8004c6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d021      	beq.n	8004c5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1a:	f7fe fea9 	bl	8003970 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d302      	bcc.n	8004c30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d116      	bne.n	8004c5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f043 0220 	orr.w	r2, r3, #32
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e007      	b.n	8004c6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c68:	2b80      	cmp	r3, #128	; 0x80
 8004c6a:	d1ca      	bne.n	8004c02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c82:	e02d      	b.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f88d 	bl	8004da4 <I2C_IsAcknowledgeFailed>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e02d      	b.n	8004cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9a:	d021      	beq.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9c:	f7fe fe68 	bl	8003970 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d302      	bcc.n	8004cb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d116      	bne.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	f043 0220 	orr.w	r2, r3, #32
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e007      	b.n	8004cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d1ca      	bne.n	8004c84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d04:	e042      	b.n	8004d8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	d119      	bne.n	8004d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0210 	mvn.w	r2, #16
 8004d1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e029      	b.n	8004d9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d48:	f7fe fe12 	bl	8003970 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d302      	bcc.n	8004d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d116      	bne.n	8004d8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	f043 0220 	orr.w	r2, r3, #32
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e007      	b.n	8004d9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	d1b5      	bne.n	8004d06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dba:	d11b      	bne.n	8004df4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	f043 0204 	orr.w	r2, r3, #4
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e267      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d075      	beq.n	8004f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e22:	4b88      	ldr	r3, [pc, #544]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 030c 	and.w	r3, r3, #12
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d00c      	beq.n	8004e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e2e:	4b85      	ldr	r3, [pc, #532]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d112      	bne.n	8004e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3a:	4b82      	ldr	r3, [pc, #520]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e46:	d10b      	bne.n	8004e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e48:	4b7e      	ldr	r3, [pc, #504]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d05b      	beq.n	8004f0c <HAL_RCC_OscConfig+0x108>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d157      	bne.n	8004f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e242      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e68:	d106      	bne.n	8004e78 <HAL_RCC_OscConfig+0x74>
 8004e6a:	4b76      	ldr	r3, [pc, #472]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a75      	ldr	r2, [pc, #468]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e01d      	b.n	8004eb4 <HAL_RCC_OscConfig+0xb0>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e80:	d10c      	bne.n	8004e9c <HAL_RCC_OscConfig+0x98>
 8004e82:	4b70      	ldr	r3, [pc, #448]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a6f      	ldr	r2, [pc, #444]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	4b6d      	ldr	r3, [pc, #436]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a6c      	ldr	r2, [pc, #432]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	e00b      	b.n	8004eb4 <HAL_RCC_OscConfig+0xb0>
 8004e9c:	4b69      	ldr	r3, [pc, #420]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a68      	ldr	r2, [pc, #416]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	4b66      	ldr	r3, [pc, #408]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a65      	ldr	r2, [pc, #404]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d013      	beq.n	8004ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebc:	f7fe fd58 	bl	8003970 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec4:	f7fe fd54 	bl	8003970 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b64      	cmp	r3, #100	; 0x64
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e207      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed6:	4b5b      	ldr	r3, [pc, #364]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0xc0>
 8004ee2:	e014      	b.n	8004f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7fe fd44 	bl	8003970 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eec:	f7fe fd40 	bl	8003970 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b64      	cmp	r3, #100	; 0x64
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e1f3      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004efe:	4b51      	ldr	r3, [pc, #324]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0xe8>
 8004f0a:	e000      	b.n	8004f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d063      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f1a:	4b4a      	ldr	r3, [pc, #296]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 030c 	and.w	r3, r3, #12
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f26:	4b47      	ldr	r3, [pc, #284]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d11c      	bne.n	8004f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f32:	4b44      	ldr	r3, [pc, #272]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d116      	bne.n	8004f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f3e:	4b41      	ldr	r3, [pc, #260]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <HAL_RCC_OscConfig+0x152>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d001      	beq.n	8004f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e1c7      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f56:	4b3b      	ldr	r3, [pc, #236]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4937      	ldr	r1, [pc, #220]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6a:	e03a      	b.n	8004fe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d020      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f74:	4b34      	ldr	r3, [pc, #208]	; (8005048 <HAL_RCC_OscConfig+0x244>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7a:	f7fe fcf9 	bl	8003970 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f82:	f7fe fcf5 	bl	8003970 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e1a8      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f94:	4b2b      	ldr	r3, [pc, #172]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa0:	4b28      	ldr	r3, [pc, #160]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4925      	ldr	r1, [pc, #148]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	600b      	str	r3, [r1, #0]
 8004fb4:	e015      	b.n	8004fe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fb6:	4b24      	ldr	r3, [pc, #144]	; (8005048 <HAL_RCC_OscConfig+0x244>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fe fcd8 	bl	8003970 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc4:	f7fe fcd4 	bl	8003970 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e187      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd6:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d036      	beq.n	800505c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d016      	beq.n	8005024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff6:	4b15      	ldr	r3, [pc, #84]	; (800504c <HAL_RCC_OscConfig+0x248>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffc:	f7fe fcb8 	bl	8003970 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005004:	f7fe fcb4 	bl	8003970 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e167      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8005018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0f0      	beq.n	8005004 <HAL_RCC_OscConfig+0x200>
 8005022:	e01b      	b.n	800505c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005024:	4b09      	ldr	r3, [pc, #36]	; (800504c <HAL_RCC_OscConfig+0x248>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800502a:	f7fe fca1 	bl	8003970 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005030:	e00e      	b.n	8005050 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005032:	f7fe fc9d 	bl	8003970 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d907      	bls.n	8005050 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e150      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
 8005044:	40023800 	.word	0x40023800
 8005048:	42470000 	.word	0x42470000
 800504c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005050:	4b88      	ldr	r3, [pc, #544]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1ea      	bne.n	8005032 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8097 	beq.w	8005198 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506e:	4b81      	ldr	r3, [pc, #516]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10f      	bne.n	800509a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	4b7d      	ldr	r3, [pc, #500]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	4a7c      	ldr	r2, [pc, #496]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005088:	6413      	str	r3, [r2, #64]	; 0x40
 800508a:	4b7a      	ldr	r3, [pc, #488]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005096:	2301      	movs	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509a:	4b77      	ldr	r3, [pc, #476]	; (8005278 <HAL_RCC_OscConfig+0x474>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d118      	bne.n	80050d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050a6:	4b74      	ldr	r3, [pc, #464]	; (8005278 <HAL_RCC_OscConfig+0x474>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a73      	ldr	r2, [pc, #460]	; (8005278 <HAL_RCC_OscConfig+0x474>)
 80050ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b2:	f7fe fc5d 	bl	8003970 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ba:	f7fe fc59 	bl	8003970 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e10c      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050cc:	4b6a      	ldr	r3, [pc, #424]	; (8005278 <HAL_RCC_OscConfig+0x474>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d106      	bne.n	80050ee <HAL_RCC_OscConfig+0x2ea>
 80050e0:	4b64      	ldr	r3, [pc, #400]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e4:	4a63      	ldr	r2, [pc, #396]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6713      	str	r3, [r2, #112]	; 0x70
 80050ec:	e01c      	b.n	8005128 <HAL_RCC_OscConfig+0x324>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2b05      	cmp	r3, #5
 80050f4:	d10c      	bne.n	8005110 <HAL_RCC_OscConfig+0x30c>
 80050f6:	4b5f      	ldr	r3, [pc, #380]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	4a5e      	ldr	r2, [pc, #376]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 80050fc:	f043 0304 	orr.w	r3, r3, #4
 8005100:	6713      	str	r3, [r2, #112]	; 0x70
 8005102:	4b5c      	ldr	r3, [pc, #368]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	4a5b      	ldr	r2, [pc, #364]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005108:	f043 0301 	orr.w	r3, r3, #1
 800510c:	6713      	str	r3, [r2, #112]	; 0x70
 800510e:	e00b      	b.n	8005128 <HAL_RCC_OscConfig+0x324>
 8005110:	4b58      	ldr	r3, [pc, #352]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005114:	4a57      	ldr	r2, [pc, #348]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	6713      	str	r3, [r2, #112]	; 0x70
 800511c:	4b55      	ldr	r3, [pc, #340]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 800511e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005120:	4a54      	ldr	r2, [pc, #336]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005122:	f023 0304 	bic.w	r3, r3, #4
 8005126:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d015      	beq.n	800515c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005130:	f7fe fc1e 	bl	8003970 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005136:	e00a      	b.n	800514e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005138:	f7fe fc1a 	bl	8003970 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e0cb      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514e:	4b49      	ldr	r3, [pc, #292]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0ee      	beq.n	8005138 <HAL_RCC_OscConfig+0x334>
 800515a:	e014      	b.n	8005186 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515c:	f7fe fc08 	bl	8003970 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005162:	e00a      	b.n	800517a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005164:	f7fe fc04 	bl	8003970 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005172:	4293      	cmp	r3, r2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e0b5      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517a:	4b3e      	ldr	r3, [pc, #248]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1ee      	bne.n	8005164 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005186:	7dfb      	ldrb	r3, [r7, #23]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d105      	bne.n	8005198 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800518c:	4b39      	ldr	r3, [pc, #228]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	4a38      	ldr	r2, [pc, #224]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005196:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80a1 	beq.w	80052e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051a2:	4b34      	ldr	r3, [pc, #208]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d05c      	beq.n	8005268 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d141      	bne.n	800523a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b6:	4b31      	ldr	r3, [pc, #196]	; (800527c <HAL_RCC_OscConfig+0x478>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051bc:	f7fe fbd8 	bl	8003970 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c4:	f7fe fbd4 	bl	8003970 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e087      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d6:	4b27      	ldr	r3, [pc, #156]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f0      	bne.n	80051c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69da      	ldr	r2, [r3, #28]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	019b      	lsls	r3, r3, #6
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	3b01      	subs	r3, #1
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	061b      	lsls	r3, r3, #24
 8005206:	491b      	ldr	r1, [pc, #108]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005208:	4313      	orrs	r3, r2
 800520a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <HAL_RCC_OscConfig+0x478>)
 800520e:	2201      	movs	r2, #1
 8005210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005212:	f7fe fbad 	bl	8003970 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521a:	f7fe fba9 	bl	8003970 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e05c      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522c:	4b11      	ldr	r3, [pc, #68]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x416>
 8005238:	e054      	b.n	80052e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523a:	4b10      	ldr	r3, [pc, #64]	; (800527c <HAL_RCC_OscConfig+0x478>)
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005240:	f7fe fb96 	bl	8003970 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005248:	f7fe fb92 	bl	8003970 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e045      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0x444>
 8005266:	e03d      	b.n	80052e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d107      	bne.n	8005280 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e038      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
 8005274:	40023800 	.word	0x40023800
 8005278:	40007000 	.word	0x40007000
 800527c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <HAL_RCC_OscConfig+0x4ec>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d028      	beq.n	80052e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005298:	429a      	cmp	r2, r3
 800529a:	d121      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d11a      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052b0:	4013      	ands	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d111      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	085b      	lsrs	r3, r3, #1
 80052c8:	3b01      	subs	r3, #1
 80052ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d107      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052dc:	429a      	cmp	r2, r3
 80052de:	d001      	beq.n	80052e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40023800 	.word	0x40023800

080052f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0cc      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005308:	4b68      	ldr	r3, [pc, #416]	; (80054ac <HAL_RCC_ClockConfig+0x1b8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d90c      	bls.n	8005330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005316:	4b65      	ldr	r3, [pc, #404]	; (80054ac <HAL_RCC_ClockConfig+0x1b8>)
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800531e:	4b63      	ldr	r3, [pc, #396]	; (80054ac <HAL_RCC_ClockConfig+0x1b8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d001      	beq.n	8005330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0b8      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d020      	beq.n	800537e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005348:	4b59      	ldr	r3, [pc, #356]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	4a58      	ldr	r2, [pc, #352]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005360:	4b53      	ldr	r3, [pc, #332]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	4a52      	ldr	r2, [pc, #328]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800536a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800536c:	4b50      	ldr	r3, [pc, #320]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	494d      	ldr	r1, [pc, #308]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	4313      	orrs	r3, r2
 800537c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d044      	beq.n	8005414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d107      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005392:	4b47      	ldr	r3, [pc, #284]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d119      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e07f      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d003      	beq.n	80053b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d107      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b2:	4b3f      	ldr	r3, [pc, #252]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e06f      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c2:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e067      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053d2:	4b37      	ldr	r3, [pc, #220]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f023 0203 	bic.w	r2, r3, #3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	4934      	ldr	r1, [pc, #208]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053e4:	f7fe fac4 	bl	8003970 <HAL_GetTick>
 80053e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ea:	e00a      	b.n	8005402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ec:	f7fe fac0 	bl	8003970 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e04f      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005402:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 020c 	and.w	r2, r3, #12
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	429a      	cmp	r2, r3
 8005412:	d1eb      	bne.n	80053ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005414:	4b25      	ldr	r3, [pc, #148]	; (80054ac <HAL_RCC_ClockConfig+0x1b8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d20c      	bcs.n	800543c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005422:	4b22      	ldr	r3, [pc, #136]	; (80054ac <HAL_RCC_ClockConfig+0x1b8>)
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800542a:	4b20      	ldr	r3, [pc, #128]	; (80054ac <HAL_RCC_ClockConfig+0x1b8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d001      	beq.n	800543c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e032      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005448:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	4916      	ldr	r1, [pc, #88]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	4313      	orrs	r3, r2
 8005458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005466:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	490e      	ldr	r1, [pc, #56]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	4313      	orrs	r3, r2
 8005478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800547a:	f000 f821 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 800547e:	4602      	mov	r2, r0
 8005480:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	091b      	lsrs	r3, r3, #4
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	490a      	ldr	r1, [pc, #40]	; (80054b4 <HAL_RCC_ClockConfig+0x1c0>)
 800548c:	5ccb      	ldrb	r3, [r1, r3]
 800548e:	fa22 f303 	lsr.w	r3, r2, r3
 8005492:	4a09      	ldr	r2, [pc, #36]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005496:	4b09      	ldr	r3, [pc, #36]	; (80054bc <HAL_RCC_ClockConfig+0x1c8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe fa24 	bl	80038e8 <HAL_InitTick>

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40023c00 	.word	0x40023c00
 80054b0:	40023800 	.word	0x40023800
 80054b4:	08008318 	.word	0x08008318
 80054b8:	2000003c 	.word	0x2000003c
 80054bc:	20000040 	.word	0x20000040

080054c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054c4:	b094      	sub	sp, #80	; 0x50
 80054c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	647b      	str	r3, [r7, #68]	; 0x44
 80054cc:	2300      	movs	r3, #0
 80054ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d0:	2300      	movs	r3, #0
 80054d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054d8:	4b79      	ldr	r3, [pc, #484]	; (80056c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f003 030c 	and.w	r3, r3, #12
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d00d      	beq.n	8005500 <HAL_RCC_GetSysClockFreq+0x40>
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	f200 80e1 	bhi.w	80056ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_RCC_GetSysClockFreq+0x34>
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d003      	beq.n	80054fa <HAL_RCC_GetSysClockFreq+0x3a>
 80054f2:	e0db      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054f4:	4b73      	ldr	r3, [pc, #460]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80054f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80054f8:	e0db      	b.n	80056b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054fa:	4b73      	ldr	r3, [pc, #460]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80054fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054fe:	e0d8      	b.n	80056b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005500:	4b6f      	ldr	r3, [pc, #444]	; (80056c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005508:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800550a:	4b6d      	ldr	r3, [pc, #436]	; (80056c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d063      	beq.n	80055de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005516:	4b6a      	ldr	r3, [pc, #424]	; (80056c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	099b      	lsrs	r3, r3, #6
 800551c:	2200      	movs	r2, #0
 800551e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005520:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005528:	633b      	str	r3, [r7, #48]	; 0x30
 800552a:	2300      	movs	r3, #0
 800552c:	637b      	str	r3, [r7, #52]	; 0x34
 800552e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005532:	4622      	mov	r2, r4
 8005534:	462b      	mov	r3, r5
 8005536:	f04f 0000 	mov.w	r0, #0
 800553a:	f04f 0100 	mov.w	r1, #0
 800553e:	0159      	lsls	r1, r3, #5
 8005540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005544:	0150      	lsls	r0, r2, #5
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	4621      	mov	r1, r4
 800554c:	1a51      	subs	r1, r2, r1
 800554e:	6139      	str	r1, [r7, #16]
 8005550:	4629      	mov	r1, r5
 8005552:	eb63 0301 	sbc.w	r3, r3, r1
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005564:	4659      	mov	r1, fp
 8005566:	018b      	lsls	r3, r1, #6
 8005568:	4651      	mov	r1, sl
 800556a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800556e:	4651      	mov	r1, sl
 8005570:	018a      	lsls	r2, r1, #6
 8005572:	4651      	mov	r1, sl
 8005574:	ebb2 0801 	subs.w	r8, r2, r1
 8005578:	4659      	mov	r1, fp
 800557a:	eb63 0901 	sbc.w	r9, r3, r1
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800558a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800558e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005592:	4690      	mov	r8, r2
 8005594:	4699      	mov	r9, r3
 8005596:	4623      	mov	r3, r4
 8005598:	eb18 0303 	adds.w	r3, r8, r3
 800559c:	60bb      	str	r3, [r7, #8]
 800559e:	462b      	mov	r3, r5
 80055a0:	eb49 0303 	adc.w	r3, r9, r3
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055b2:	4629      	mov	r1, r5
 80055b4:	024b      	lsls	r3, r1, #9
 80055b6:	4621      	mov	r1, r4
 80055b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055bc:	4621      	mov	r1, r4
 80055be:	024a      	lsls	r2, r1, #9
 80055c0:	4610      	mov	r0, r2
 80055c2:	4619      	mov	r1, r3
 80055c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c6:	2200      	movs	r2, #0
 80055c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055d0:	f7fb fad0 	bl	8000b74 <__aeabi_uldivmod>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4613      	mov	r3, r2
 80055da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055dc:	e058      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055de:	4b38      	ldr	r3, [pc, #224]	; (80056c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	099b      	lsrs	r3, r3, #6
 80055e4:	2200      	movs	r2, #0
 80055e6:	4618      	mov	r0, r3
 80055e8:	4611      	mov	r1, r2
 80055ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055ee:	623b      	str	r3, [r7, #32]
 80055f0:	2300      	movs	r3, #0
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
 80055f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055f8:	4642      	mov	r2, r8
 80055fa:	464b      	mov	r3, r9
 80055fc:	f04f 0000 	mov.w	r0, #0
 8005600:	f04f 0100 	mov.w	r1, #0
 8005604:	0159      	lsls	r1, r3, #5
 8005606:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800560a:	0150      	lsls	r0, r2, #5
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4641      	mov	r1, r8
 8005612:	ebb2 0a01 	subs.w	sl, r2, r1
 8005616:	4649      	mov	r1, r9
 8005618:	eb63 0b01 	sbc.w	fp, r3, r1
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005628:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800562c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005630:	ebb2 040a 	subs.w	r4, r2, sl
 8005634:	eb63 050b 	sbc.w	r5, r3, fp
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	00eb      	lsls	r3, r5, #3
 8005642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005646:	00e2      	lsls	r2, r4, #3
 8005648:	4614      	mov	r4, r2
 800564a:	461d      	mov	r5, r3
 800564c:	4643      	mov	r3, r8
 800564e:	18e3      	adds	r3, r4, r3
 8005650:	603b      	str	r3, [r7, #0]
 8005652:	464b      	mov	r3, r9
 8005654:	eb45 0303 	adc.w	r3, r5, r3
 8005658:	607b      	str	r3, [r7, #4]
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005666:	4629      	mov	r1, r5
 8005668:	028b      	lsls	r3, r1, #10
 800566a:	4621      	mov	r1, r4
 800566c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005670:	4621      	mov	r1, r4
 8005672:	028a      	lsls	r2, r1, #10
 8005674:	4610      	mov	r0, r2
 8005676:	4619      	mov	r1, r3
 8005678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800567a:	2200      	movs	r2, #0
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	61fa      	str	r2, [r7, #28]
 8005680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005684:	f7fb fa76 	bl	8000b74 <__aeabi_uldivmod>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4613      	mov	r3, r2
 800568e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	3301      	adds	r3, #1
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80056a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056aa:	e002      	b.n	80056b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80056ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3750      	adds	r7, #80	; 0x50
 80056b8:	46bd      	mov	sp, r7
 80056ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056be:	bf00      	nop
 80056c0:	40023800 	.word	0x40023800
 80056c4:	00f42400 	.word	0x00f42400
 80056c8:	007a1200 	.word	0x007a1200

080056cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d0:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056d2:	681b      	ldr	r3, [r3, #0]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	2000003c 	.word	0x2000003c

080056e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056e8:	f7ff fff0 	bl	80056cc <HAL_RCC_GetHCLKFreq>
 80056ec:	4602      	mov	r2, r0
 80056ee:	4b05      	ldr	r3, [pc, #20]	; (8005704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	0a9b      	lsrs	r3, r3, #10
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	4903      	ldr	r1, [pc, #12]	; (8005708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056fa:	5ccb      	ldrb	r3, [r1, r3]
 80056fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005700:	4618      	mov	r0, r3
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40023800 	.word	0x40023800
 8005708:	08008328 	.word	0x08008328

0800570c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005710:	f7ff ffdc 	bl	80056cc <HAL_RCC_GetHCLKFreq>
 8005714:	4602      	mov	r2, r0
 8005716:	4b05      	ldr	r3, [pc, #20]	; (800572c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	0b5b      	lsrs	r3, r3, #13
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	4903      	ldr	r1, [pc, #12]	; (8005730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005722:	5ccb      	ldrb	r3, [r1, r3]
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40023800 	.word	0x40023800
 8005730:	08008328 	.word	0x08008328

08005734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e03f      	b.n	80057c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fd fac2 	bl	8002ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2224      	movs	r2, #36	; 0x24
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f829 	bl	80057d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800578c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800579c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d4:	b0c0      	sub	sp, #256	; 0x100
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	68d9      	ldr	r1, [r3, #12]
 80057ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	ea40 0301 	orr.w	r3, r0, r1
 80057f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	431a      	orrs	r2, r3
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	431a      	orrs	r2, r3
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005828:	f021 010c 	bic.w	r1, r1, #12
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005836:	430b      	orrs	r3, r1
 8005838:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584a:	6999      	ldr	r1, [r3, #24]
 800584c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	ea40 0301 	orr.w	r3, r0, r1
 8005856:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	4b8f      	ldr	r3, [pc, #572]	; (8005a9c <UART_SetConfig+0x2cc>)
 8005860:	429a      	cmp	r2, r3
 8005862:	d005      	beq.n	8005870 <UART_SetConfig+0xa0>
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4b8d      	ldr	r3, [pc, #564]	; (8005aa0 <UART_SetConfig+0x2d0>)
 800586c:	429a      	cmp	r2, r3
 800586e:	d104      	bne.n	800587a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005870:	f7ff ff4c 	bl	800570c <HAL_RCC_GetPCLK2Freq>
 8005874:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005878:	e003      	b.n	8005882 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800587a:	f7ff ff33 	bl	80056e4 <HAL_RCC_GetPCLK1Freq>
 800587e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800588c:	f040 810c 	bne.w	8005aa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005894:	2200      	movs	r2, #0
 8005896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800589a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800589e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058a2:	4622      	mov	r2, r4
 80058a4:	462b      	mov	r3, r5
 80058a6:	1891      	adds	r1, r2, r2
 80058a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80058aa:	415b      	adcs	r3, r3
 80058ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058b2:	4621      	mov	r1, r4
 80058b4:	eb12 0801 	adds.w	r8, r2, r1
 80058b8:	4629      	mov	r1, r5
 80058ba:	eb43 0901 	adc.w	r9, r3, r1
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	f04f 0300 	mov.w	r3, #0
 80058c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058d2:	4690      	mov	r8, r2
 80058d4:	4699      	mov	r9, r3
 80058d6:	4623      	mov	r3, r4
 80058d8:	eb18 0303 	adds.w	r3, r8, r3
 80058dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058e0:	462b      	mov	r3, r5
 80058e2:	eb49 0303 	adc.w	r3, r9, r3
 80058e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058fe:	460b      	mov	r3, r1
 8005900:	18db      	adds	r3, r3, r3
 8005902:	653b      	str	r3, [r7, #80]	; 0x50
 8005904:	4613      	mov	r3, r2
 8005906:	eb42 0303 	adc.w	r3, r2, r3
 800590a:	657b      	str	r3, [r7, #84]	; 0x54
 800590c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005910:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005914:	f7fb f92e 	bl	8000b74 <__aeabi_uldivmod>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4b61      	ldr	r3, [pc, #388]	; (8005aa4 <UART_SetConfig+0x2d4>)
 800591e:	fba3 2302 	umull	r2, r3, r3, r2
 8005922:	095b      	lsrs	r3, r3, #5
 8005924:	011c      	lsls	r4, r3, #4
 8005926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800592a:	2200      	movs	r2, #0
 800592c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005930:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005934:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005938:	4642      	mov	r2, r8
 800593a:	464b      	mov	r3, r9
 800593c:	1891      	adds	r1, r2, r2
 800593e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005940:	415b      	adcs	r3, r3
 8005942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005944:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005948:	4641      	mov	r1, r8
 800594a:	eb12 0a01 	adds.w	sl, r2, r1
 800594e:	4649      	mov	r1, r9
 8005950:	eb43 0b01 	adc.w	fp, r3, r1
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005960:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005968:	4692      	mov	sl, r2
 800596a:	469b      	mov	fp, r3
 800596c:	4643      	mov	r3, r8
 800596e:	eb1a 0303 	adds.w	r3, sl, r3
 8005972:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005976:	464b      	mov	r3, r9
 8005978:	eb4b 0303 	adc.w	r3, fp, r3
 800597c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800598c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005990:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005994:	460b      	mov	r3, r1
 8005996:	18db      	adds	r3, r3, r3
 8005998:	643b      	str	r3, [r7, #64]	; 0x40
 800599a:	4613      	mov	r3, r2
 800599c:	eb42 0303 	adc.w	r3, r2, r3
 80059a0:	647b      	str	r3, [r7, #68]	; 0x44
 80059a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059aa:	f7fb f8e3 	bl	8000b74 <__aeabi_uldivmod>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4611      	mov	r1, r2
 80059b4:	4b3b      	ldr	r3, [pc, #236]	; (8005aa4 <UART_SetConfig+0x2d4>)
 80059b6:	fba3 2301 	umull	r2, r3, r3, r1
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	2264      	movs	r2, #100	; 0x64
 80059be:	fb02 f303 	mul.w	r3, r2, r3
 80059c2:	1acb      	subs	r3, r1, r3
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059ca:	4b36      	ldr	r3, [pc, #216]	; (8005aa4 <UART_SetConfig+0x2d4>)
 80059cc:	fba3 2302 	umull	r2, r3, r3, r2
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059d8:	441c      	add	r4, r3
 80059da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059ec:	4642      	mov	r2, r8
 80059ee:	464b      	mov	r3, r9
 80059f0:	1891      	adds	r1, r2, r2
 80059f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80059f4:	415b      	adcs	r3, r3
 80059f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059fc:	4641      	mov	r1, r8
 80059fe:	1851      	adds	r1, r2, r1
 8005a00:	6339      	str	r1, [r7, #48]	; 0x30
 8005a02:	4649      	mov	r1, r9
 8005a04:	414b      	adcs	r3, r1
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a14:	4659      	mov	r1, fp
 8005a16:	00cb      	lsls	r3, r1, #3
 8005a18:	4651      	mov	r1, sl
 8005a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a1e:	4651      	mov	r1, sl
 8005a20:	00ca      	lsls	r2, r1, #3
 8005a22:	4610      	mov	r0, r2
 8005a24:	4619      	mov	r1, r3
 8005a26:	4603      	mov	r3, r0
 8005a28:	4642      	mov	r2, r8
 8005a2a:	189b      	adds	r3, r3, r2
 8005a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a30:	464b      	mov	r3, r9
 8005a32:	460a      	mov	r2, r1
 8005a34:	eb42 0303 	adc.w	r3, r2, r3
 8005a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a50:	460b      	mov	r3, r1
 8005a52:	18db      	adds	r3, r3, r3
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a56:	4613      	mov	r3, r2
 8005a58:	eb42 0303 	adc.w	r3, r2, r3
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a66:	f7fb f885 	bl	8000b74 <__aeabi_uldivmod>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <UART_SetConfig+0x2d4>)
 8005a70:	fba3 1302 	umull	r1, r3, r3, r2
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	2164      	movs	r1, #100	; 0x64
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	3332      	adds	r3, #50	; 0x32
 8005a82:	4a08      	ldr	r2, [pc, #32]	; (8005aa4 <UART_SetConfig+0x2d4>)
 8005a84:	fba2 2303 	umull	r2, r3, r2, r3
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	f003 0207 	and.w	r2, r3, #7
 8005a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4422      	add	r2, r4
 8005a96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a98:	e105      	b.n	8005ca6 <UART_SetConfig+0x4d6>
 8005a9a:	bf00      	nop
 8005a9c:	40011000 	.word	0x40011000
 8005aa0:	40011400 	.word	0x40011400
 8005aa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ab2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ab6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005aba:	4642      	mov	r2, r8
 8005abc:	464b      	mov	r3, r9
 8005abe:	1891      	adds	r1, r2, r2
 8005ac0:	6239      	str	r1, [r7, #32]
 8005ac2:	415b      	adcs	r3, r3
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005aca:	4641      	mov	r1, r8
 8005acc:	1854      	adds	r4, r2, r1
 8005ace:	4649      	mov	r1, r9
 8005ad0:	eb43 0501 	adc.w	r5, r3, r1
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	00eb      	lsls	r3, r5, #3
 8005ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ae2:	00e2      	lsls	r2, r4, #3
 8005ae4:	4614      	mov	r4, r2
 8005ae6:	461d      	mov	r5, r3
 8005ae8:	4643      	mov	r3, r8
 8005aea:	18e3      	adds	r3, r4, r3
 8005aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005af0:	464b      	mov	r3, r9
 8005af2:	eb45 0303 	adc.w	r3, r5, r3
 8005af6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b16:	4629      	mov	r1, r5
 8005b18:	008b      	lsls	r3, r1, #2
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b20:	4621      	mov	r1, r4
 8005b22:	008a      	lsls	r2, r1, #2
 8005b24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b28:	f7fb f824 	bl	8000b74 <__aeabi_uldivmod>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4b60      	ldr	r3, [pc, #384]	; (8005cb4 <UART_SetConfig+0x4e4>)
 8005b32:	fba3 2302 	umull	r2, r3, r3, r2
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	011c      	lsls	r4, r3, #4
 8005b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	464b      	mov	r3, r9
 8005b50:	1891      	adds	r1, r2, r2
 8005b52:	61b9      	str	r1, [r7, #24]
 8005b54:	415b      	adcs	r3, r3
 8005b56:	61fb      	str	r3, [r7, #28]
 8005b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b5c:	4641      	mov	r1, r8
 8005b5e:	1851      	adds	r1, r2, r1
 8005b60:	6139      	str	r1, [r7, #16]
 8005b62:	4649      	mov	r1, r9
 8005b64:	414b      	adcs	r3, r1
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b74:	4659      	mov	r1, fp
 8005b76:	00cb      	lsls	r3, r1, #3
 8005b78:	4651      	mov	r1, sl
 8005b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b7e:	4651      	mov	r1, sl
 8005b80:	00ca      	lsls	r2, r1, #3
 8005b82:	4610      	mov	r0, r2
 8005b84:	4619      	mov	r1, r3
 8005b86:	4603      	mov	r3, r0
 8005b88:	4642      	mov	r2, r8
 8005b8a:	189b      	adds	r3, r3, r2
 8005b8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b90:	464b      	mov	r3, r9
 8005b92:	460a      	mov	r2, r1
 8005b94:	eb42 0303 	adc.w	r3, r2, r3
 8005b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ba6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	008b      	lsls	r3, r1, #2
 8005bb8:	4641      	mov	r1, r8
 8005bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bbe:	4641      	mov	r1, r8
 8005bc0:	008a      	lsls	r2, r1, #2
 8005bc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bc6:	f7fa ffd5 	bl	8000b74 <__aeabi_uldivmod>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4b39      	ldr	r3, [pc, #228]	; (8005cb4 <UART_SetConfig+0x4e4>)
 8005bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	2164      	movs	r1, #100	; 0x64
 8005bd8:	fb01 f303 	mul.w	r3, r1, r3
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	3332      	adds	r3, #50	; 0x32
 8005be2:	4a34      	ldr	r2, [pc, #208]	; (8005cb4 <UART_SetConfig+0x4e4>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bee:	441c      	add	r4, r3
 8005bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	673b      	str	r3, [r7, #112]	; 0x70
 8005bf8:	677a      	str	r2, [r7, #116]	; 0x74
 8005bfa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bfe:	4642      	mov	r2, r8
 8005c00:	464b      	mov	r3, r9
 8005c02:	1891      	adds	r1, r2, r2
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	415b      	adcs	r3, r3
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c0e:	4641      	mov	r1, r8
 8005c10:	1851      	adds	r1, r2, r1
 8005c12:	6039      	str	r1, [r7, #0]
 8005c14:	4649      	mov	r1, r9
 8005c16:	414b      	adcs	r3, r1
 8005c18:	607b      	str	r3, [r7, #4]
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	f04f 0300 	mov.w	r3, #0
 8005c22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c26:	4659      	mov	r1, fp
 8005c28:	00cb      	lsls	r3, r1, #3
 8005c2a:	4651      	mov	r1, sl
 8005c2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c30:	4651      	mov	r1, sl
 8005c32:	00ca      	lsls	r2, r1, #3
 8005c34:	4610      	mov	r0, r2
 8005c36:	4619      	mov	r1, r3
 8005c38:	4603      	mov	r3, r0
 8005c3a:	4642      	mov	r2, r8
 8005c3c:	189b      	adds	r3, r3, r2
 8005c3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c40:	464b      	mov	r3, r9
 8005c42:	460a      	mov	r2, r1
 8005c44:	eb42 0303 	adc.w	r3, r2, r3
 8005c48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	663b      	str	r3, [r7, #96]	; 0x60
 8005c54:	667a      	str	r2, [r7, #100]	; 0x64
 8005c56:	f04f 0200 	mov.w	r2, #0
 8005c5a:	f04f 0300 	mov.w	r3, #0
 8005c5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c62:	4649      	mov	r1, r9
 8005c64:	008b      	lsls	r3, r1, #2
 8005c66:	4641      	mov	r1, r8
 8005c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c6c:	4641      	mov	r1, r8
 8005c6e:	008a      	lsls	r2, r1, #2
 8005c70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c74:	f7fa ff7e 	bl	8000b74 <__aeabi_uldivmod>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <UART_SetConfig+0x4e4>)
 8005c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	2164      	movs	r1, #100	; 0x64
 8005c86:	fb01 f303 	mul.w	r3, r1, r3
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	3332      	adds	r3, #50	; 0x32
 8005c90:	4a08      	ldr	r2, [pc, #32]	; (8005cb4 <UART_SetConfig+0x4e4>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	f003 020f 	and.w	r2, r3, #15
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4422      	add	r2, r4
 8005ca4:	609a      	str	r2, [r3, #8]
}
 8005ca6:	bf00      	nop
 8005ca8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cac:	46bd      	mov	sp, r7
 8005cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cb2:	bf00      	nop
 8005cb4:	51eb851f 	.word	0x51eb851f

08005cb8 <initMPU6500>:
// necesito una global donde se configure el puerto a usar;
static I2C_HandleTypeDef* privateI2CHandler = NULL;

//necesario para que esta biblioteca tome nocion
//del I2C_HandleTypeDef que se esta usando.
void initMPU6500(I2C_HandleTypeDef* i2ch) {
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	privateI2CHandler = i2ch;
 8005cc0:	4a04      	ldr	r2, [pc, #16]	; (8005cd4 <initMPU6500+0x1c>)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6013      	str	r3, [r2, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	200002e0 	.word	0x200002e0

08005cd8 <twiSendByte>:

//Manda un byte a una direccion I2C
uint8_t twiSendByte(uint8_t addr, uint8_t byte) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	4603      	mov	r3, r0
 8005ce0:	460a      	mov	r2, r1
 8005ce2:	71fb      	strb	r3, [r7, #7]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	71bb      	strb	r3, [r7, #6]

	if (privateI2CHandler == NULL) return 1;
 8005ce8:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <twiSendByte+0x44>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <twiSendByte+0x1c>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e00f      	b.n	8005d14 <twiSendByte+0x3c>
	addr = addr << 1;
 8005cf4:	79fb      	ldrb	r3, [r7, #7]
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	71fb      	strb	r3, [r7, #7]
	return (uint8_t)HAL_I2C_Master_Transmit(privateI2CHandler, addr, &byte, sizeof(uint8_t), HAL_MAX_DELAY);
 8005cfa:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <twiSendByte+0x44>)
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	b299      	uxth	r1, r3
 8005d02:	1dba      	adds	r2, r7, #6
 8005d04:	f04f 33ff 	mov.w	r3, #4294967295
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	f7fe fa28 	bl	8004160 <HAL_I2C_Master_Transmit>
 8005d10:	4603      	mov	r3, r0
 8005d12:	bf00      	nop

}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	200002e0 	.word	0x200002e0

08005d20 <twiSendBytes>:

//Manda una serie de bytes a una direccion I2C
uint8_t twiSendBytes(uint8_t addr, uint8_t* buf, uint16_t len) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	4603      	mov	r3, r0
 8005d28:	6039      	str	r1, [r7, #0]
 8005d2a:	71fb      	strb	r3, [r7, #7]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	80bb      	strh	r3, [r7, #4]

	if (privateI2CHandler == NULL) return 1;
 8005d30:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <twiSendBytes+0x44>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <twiSendBytes+0x1c>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e00f      	b.n	8005d5c <twiSendBytes+0x3c>
	addr = addr << 1;
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	71fb      	strb	r3, [r7, #7]
	return (uint8_t)HAL_I2C_Master_Transmit(privateI2CHandler, addr, buf, len, HAL_MAX_DELAY);
 8005d42:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <twiSendBytes+0x44>)
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	b299      	uxth	r1, r3
 8005d4a:	88bb      	ldrh	r3, [r7, #4]
 8005d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d50:	9200      	str	r2, [sp, #0]
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	f7fe fa04 	bl	8004160 <HAL_I2C_Master_Transmit>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	bf00      	nop

}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	200002e0 	.word	0x200002e0

08005d68 <twiRecvByte>:

//Recibe un byte de una dirección de I2C
uint8_t twiRecvByte(uint8_t addr) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	4603      	mov	r3, r0
 8005d70:	71fb      	strb	r3, [r7, #7]

	uint8_t buf = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
	if (privateI2CHandler == NULL) return buf;
 8005d76:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <twiRecvByte+0x44>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <twiRecvByte+0x1a>
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	e00f      	b.n	8005da2 <twiRecvByte+0x3a>
	addr = addr << 1;
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Receive(privateI2CHandler, addr, &buf, sizeof(uint8_t), HAL_MAX_DELAY);
 8005d88:	4b08      	ldr	r3, [pc, #32]	; (8005dac <twiRecvByte+0x44>)
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	b299      	uxth	r1, r3
 8005d90:	f107 020f 	add.w	r2, r7, #15
 8005d94:	f04f 33ff 	mov.w	r3, #4294967295
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f7fe fade 	bl	800435c <HAL_I2C_Master_Receive>
	return buf;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]

}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	200002e0 	.word	0x200002e0

08005db0 <twiRecvBytes>:

//Recibe varios bytes de una dirección I2C
uint16_t twiRecvBytes(uint8_t addr, uint8_t* buf, uint16_t len) {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	4603      	mov	r3, r0
 8005db8:	6039      	str	r1, [r7, #0]
 8005dba:	71fb      	strb	r3, [r7, #7]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	80bb      	strh	r3, [r7, #4]

	if (privateI2CHandler == NULL) return 1;
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <twiRecvBytes+0x44>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <twiRecvBytes+0x1c>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e00e      	b.n	8005dea <twiRecvBytes+0x3a>
	addr = addr << 1;
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Receive(privateI2CHandler, addr, buf, len, HAL_MAX_DELAY);
 8005dd2:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <twiRecvBytes+0x44>)
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	b299      	uxth	r1, r3
 8005dda:	88bb      	ldrh	r3, [r7, #4]
 8005ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8005de0:	9200      	str	r2, [sp, #0]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	f7fe faba 	bl	800435c <HAL_I2C_Master_Receive>
	//supuestamente la interface bloquea hasta no recibir len bytes;
	//no es como la de arduino que puede devolver de menos
	return len;
 8005de8:	88bb      	ldrh	r3, [r7, #4]

}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	200002e0 	.word	0x200002e0

08005df8 <twiWriteReg8>:

//Escribe un registro de 8 bits en un dispo I2C
uint8_t twiWriteReg8(uint8_t addr, uint8_t reg, uint8_t val) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	71fb      	strb	r3, [r7, #7]
 8005e02:	460b      	mov	r3, r1
 8005e04:	71bb      	strb	r3, [r7, #6]
 8005e06:	4613      	mov	r3, r2
 8005e08:	717b      	strb	r3, [r7, #5]
  uint8_t buf[2];
  buf[0] = reg;
 8005e0a:	79bb      	ldrb	r3, [r7, #6]
 8005e0c:	733b      	strb	r3, [r7, #12]
  buf[1] = val;
 8005e0e:	797b      	ldrb	r3, [r7, #5]
 8005e10:	737b      	strb	r3, [r7, #13]
  return twiSendBytes(addr, buf, 2);
 8005e12:	f107 010c 	add.w	r1, r7, #12
 8005e16:	79fb      	ldrb	r3, [r7, #7]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff ff80 	bl	8005d20 <twiSendBytes>
 8005e20:	4603      	mov	r3, r0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <twiWriteRegs8>:

//Escribe una serie de registros contiguos en un dispo I2C
uint8_t twiWriteRegs8(uint8_t addr, uint8_t reg, uint16_t len, uint8_t* buf) {
 8005e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e30:	b089      	sub	sp, #36	; 0x24
 8005e32:	af02      	add	r7, sp, #8
 8005e34:	603b      	str	r3, [r7, #0]
 8005e36:	4603      	mov	r3, r0
 8005e38:	71fb      	strb	r3, [r7, #7]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	71bb      	strb	r3, [r7, #6]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80bb      	strh	r3, [r7, #4]
 8005e42:	466b      	mov	r3, sp
 8005e44:	461e      	mov	r6, r3

	uint8_t auxBuf[len + 1];
 8005e46:	88bb      	ldrh	r3, [r7, #4]
 8005e48:	1c59      	adds	r1, r3, #1
 8005e4a:	1e4b      	subs	r3, r1, #1
 8005e4c:	613b      	str	r3, [r7, #16]
 8005e4e:	460a      	mov	r2, r1
 8005e50:	2300      	movs	r3, #0
 8005e52:	4690      	mov	r8, r2
 8005e54:	4699      	mov	r9, r3
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	f04f 0300 	mov.w	r3, #0
 8005e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e6a:	460a      	mov	r2, r1
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	4614      	mov	r4, r2
 8005e70:	461d      	mov	r5, r3
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	00eb      	lsls	r3, r5, #3
 8005e7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e80:	00e2      	lsls	r2, r4, #3
 8005e82:	460b      	mov	r3, r1
 8005e84:	3307      	adds	r3, #7
 8005e86:	08db      	lsrs	r3, r3, #3
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	ebad 0d03 	sub.w	sp, sp, r3
 8005e8e:	ab02      	add	r3, sp, #8
 8005e90:	3300      	adds	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]

	for (uint32_t i = 0 ; i < len; i++) auxBuf[i+1] = buf[i];
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e00a      	b.n	8005eb0 <twiWriteRegs8+0x84>
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	441a      	add	r2, r3
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	7811      	ldrb	r1, [r2, #0]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	54d1      	strb	r1, [r2, r3]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	3301      	adds	r3, #1
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	88bb      	ldrh	r3, [r7, #4]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d3f0      	bcc.n	8005e9a <twiWriteRegs8+0x6e>
	auxBuf[0] = reg;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	79ba      	ldrb	r2, [r7, #6]
 8005ebc:	701a      	strb	r2, [r3, #0]

	if (privateI2CHandler == NULL) return 1;
 8005ebe:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <twiWriteRegs8+0xd0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <twiWriteRegs8+0x9e>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e011      	b.n	8005eee <twiWriteRegs8+0xc2>
	addr = addr << 1;
 8005eca:	79fb      	ldrb	r3, [r7, #7]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	71fb      	strb	r3, [r7, #7]
	return (uint8_t)HAL_I2C_Master_Transmit(privateI2CHandler, addr, auxBuf, len + 1, HAL_MAX_DELAY);
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <twiWriteRegs8+0xd0>)
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	b299      	uxth	r1, r3
 8005ed8:	88bb      	ldrh	r3, [r7, #4]
 8005eda:	3301      	adds	r3, #1
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee2:	9200      	str	r2, [sp, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f7fe f93b 	bl	8004160 <HAL_I2C_Master_Transmit>
 8005eea:	4603      	mov	r3, r0
 8005eec:	bf00      	nop
 8005eee:	46b5      	mov	sp, r6

}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005efa:	bf00      	nop
 8005efc:	200002e0 	.word	0x200002e0

08005f00 <twiReadReg8>:

//Lee el valor de un registro de 8 bits en un dispo I2C
uint8_t twiReadReg8(uint8_t addr, uint8_t reg, uint8_t* buf) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	603a      	str	r2, [r7, #0]
 8005f0a:	71fb      	strb	r3, [r7, #7]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;
	ret = twiSendByte(addr, reg);
 8005f10:	79ba      	ldrb	r2, [r7, #6]
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	4611      	mov	r1, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fede 	bl	8005cd8 <twiSendByte>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73fb      	strb	r3, [r7, #15]
	if (ret) return ret;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <twiReadReg8+0x2a>
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	e008      	b.n	8005f3c <twiReadReg8+0x3c>
	*buf = twiRecvByte(addr);
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff ff1b 	bl	8005d68 <twiRecvByte>
 8005f32:	4603      	mov	r3, r0
 8005f34:	461a      	mov	r2, r3
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	701a      	strb	r2, [r3, #0]
	return 0;
 8005f3a:	2300      	movs	r3, #0

}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <twiReadRegs8>:

//Lee el valor de varios registros contiguos de un dispo I2C
uint8_t twiReadRegs8(uint8_t addr, uint8_t reg, uint16_t len, uint8_t* buf) {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	71fb      	strb	r3, [r7, #7]
 8005f50:	460b      	mov	r3, r1
 8005f52:	71bb      	strb	r3, [r7, #6]
 8005f54:	4613      	mov	r3, r2
 8005f56:	80bb      	strh	r3, [r7, #4]

  uint8_t ret;
  ret = twiSendByte(addr, reg);
 8005f58:	79ba      	ldrb	r2, [r7, #6]
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff feba 	bl	8005cd8 <twiSendByte>
 8005f64:	4603      	mov	r3, r0
 8005f66:	73fb      	strb	r3, [r7, #15]
  if (ret) return ret;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <twiReadRegs8+0x2e>
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	e00d      	b.n	8005f8e <twiReadRegs8+0x4a>
  if (len == twiRecvBytes(addr, buf, len)) return 0;
 8005f72:	88ba      	ldrh	r2, [r7, #4]
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff ff19 	bl	8005db0 <twiRecvBytes>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	461a      	mov	r2, r3
 8005f82:	88bb      	ldrh	r3, [r7, #4]
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d101      	bne.n	8005f8c <twiReadRegs8+0x48>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e000      	b.n	8005f8e <twiReadRegs8+0x4a>
  return (uint8_t)(-1);
 8005f8c:	23ff      	movs	r3, #255	; 0xff

}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <imuCheckPresence>:

//Verifica la presencia de un sensor MPU6500
//Leyendo el registro Who am I y verificando que sea igual a 0x70.
uint8_t imuCheckPresence() {
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
  uint8_t ret = 0, val = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	71fb      	strb	r3, [r7, #7]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	71bb      	strb	r3, [r7, #6]
  ret = twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_WHO_AM_I, &val);
 8005fa4:	1dbb      	adds	r3, r7, #6
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	2175      	movs	r1, #117	; 0x75
 8005faa:	2068      	movs	r0, #104	; 0x68
 8005fac:	f7ff ffa8 	bl	8005f00 <twiReadReg8>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	71fb      	strb	r3, [r7, #7]
  if (ret != 0 || val != MPU6500_WHO_AM_I_BYTE) return 0;
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d102      	bne.n	8005fc0 <imuCheckPresence+0x2a>
 8005fba:	79bb      	ldrb	r3, [r7, #6]
 8005fbc:	2b70      	cmp	r3, #112	; 0x70
 8005fbe:	d001      	beq.n	8005fc4 <imuCheckPresence+0x2e>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e000      	b.n	8005fc6 <imuCheckPresence+0x30>
  return 1;
 8005fc4:	2301      	movs	r3, #1
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <imuEvalSelfTest>:

//Comprueba los resultados de los self-test
uint8_t imuEvalSelfTest(float low, float high, float value, const char* string) {
 8005fce:	b480      	push	{r7}
 8005fd0:	b087      	sub	sp, #28
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	ed87 0a03 	vstr	s0, [r7, #12]
 8005fd8:	edc7 0a02 	vstr	s1, [r7, #8]
 8005fdc:	ed87 1a01 	vstr	s2, [r7, #4]
 8005fe0:	6038      	str	r0, [r7, #0]
  
  uint8_t pass = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	75fb      	strb	r3, [r7, #23]
  
  // gyros only have lower limit
  // this is a hack to use same evaluation function
  if (low > high) {
 8005fe6:	ed97 7a03 	vldr	s14, [r7, #12]
 8005fea:	edd7 7a02 	vldr	s15, [r7, #8]
 8005fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff6:	dd0b      	ble.n	8006010 <imuEvalSelfTest+0x42>
    if (value >= low) pass = 1;
 8005ff8:	ed97 7a01 	vldr	s14, [r7, #4]
 8005ffc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006008:	db16      	blt.n	8006038 <imuEvalSelfTest+0x6a>
 800600a:	2301      	movs	r3, #1
 800600c:	75fb      	strb	r3, [r7, #23]
 800600e:	e013      	b.n	8006038 <imuEvalSelfTest+0x6a>
  } else {
    if (value >= low || value <= high) pass = 1;
 8006010:	ed97 7a01 	vldr	s14, [r7, #4]
 8006014:	edd7 7a03 	vldr	s15, [r7, #12]
 8006018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800601c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006020:	da08      	bge.n	8006034 <imuEvalSelfTest+0x66>
 8006022:	ed97 7a01 	vldr	s14, [r7, #4]
 8006026:	edd7 7a02 	vldr	s15, [r7, #8]
 800602a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800602e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006032:	d801      	bhi.n	8006038 <imuEvalSelfTest+0x6a>
 8006034:	2301      	movs	r3, #1
 8006036:	75fb      	strb	r3, [r7, #23]
//  #ifdef DEBUG_PRINTF
//    Serial.printf("Self test %s %s. low: %0.2f, high: %0.2f, measured: %0.2f\n",
//    string, pass ? "[PASS]" : "[FAIL]" , low, high, value);
//  #endif

  return pass;
 8006038:	7dfb      	ldrb	r3, [r7, #23]

}
 800603a:	4618      	mov	r0, r3
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
	...

08006048 <imuSelfTest>:
// 2: no paso el giro Y
// 4: no paso el giro Z
// 8: no paso el accel X
// 16: no paso el accel Y
// 32: no paso el accel Z
uint8_t imuSelfTest() {
 8006048:	b580      	push	{r7, lr}
 800604a:	b09c      	sub	sp, #112	; 0x70
 800604c:	af00      	add	r7, sp, #0
  uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 800604e:	4aad      	ldr	r2, [pc, #692]	; (8006304 <imuSelfTest+0x2bc>)
 8006050:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006054:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006058:	6018      	str	r0, [r3, #0]
 800605a:	3304      	adds	r3, #4
 800605c:	8019      	strh	r1, [r3, #0]
  uint8_t saveReg[5];
  uint8_t selfTest[6];
  int32_t gAvg[3]={0}, aAvg[3]={0}, aSTAvg[3]={0}, gSTAvg[3]={0};
 800605e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	605a      	str	r2, [r3, #4]
 8006068:	609a      	str	r2, [r3, #8]
 800606a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	605a      	str	r2, [r3, #4]
 8006074:	609a      	str	r2, [r3, #8]
 8006076:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	609a      	str	r2, [r3, #8]
 8006082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	605a      	str	r2, [r3, #4]
 800608c:	609a      	str	r2, [r3, #8]
  uint16_t factoryTrim[6];
  float aDiff[3], gDiff[3];
  int i;

  uint8_t testStatus = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

  // Save old configuration
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_SMPLRT_DIV, &saveReg[0]);
 8006094:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006098:	461a      	mov	r2, r3
 800609a:	2119      	movs	r1, #25
 800609c:	2068      	movs	r0, #104	; 0x68
 800609e:	f7ff ff2f 	bl	8005f00 <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_CONFIG, &saveReg[1]);
 80060a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80060a6:	3301      	adds	r3, #1
 80060a8:	461a      	mov	r2, r3
 80060aa:	211a      	movs	r1, #26
 80060ac:	2068      	movs	r0, #104	; 0x68
 80060ae:	f7ff ff27 	bl	8005f00 <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, &saveReg[2]);
 80060b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80060b6:	3302      	adds	r3, #2
 80060b8:	461a      	mov	r2, r3
 80060ba:	211b      	movs	r1, #27
 80060bc:	2068      	movs	r0, #104	; 0x68
 80060be:	f7ff ff1f 	bl	8005f00 <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG_2, &saveReg[3]);
 80060c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80060c6:	3303      	adds	r3, #3
 80060c8:	461a      	mov	r2, r3
 80060ca:	211d      	movs	r1, #29
 80060cc:	2068      	movs	r0, #104	; 0x68
 80060ce:	f7ff ff17 	bl	8005f00 <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, &saveReg[4]);
 80060d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80060d6:	3304      	adds	r3, #4
 80060d8:	461a      	mov	r2, r3
 80060da:	211c      	movs	r1, #28
 80060dc:	2068      	movs	r0, #104	; 0x68
 80060de:	f7ff ff0f 	bl	8005f00 <twiReadReg8>
  // Write test configuration
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 80060e2:	2200      	movs	r2, #0
 80060e4:	2119      	movs	r1, #25
 80060e6:	2068      	movs	r0, #104	; 0x68
 80060e8:	f7ff fe86 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80060ec:	2202      	movs	r2, #2
 80060ee:	211a      	movs	r1, #26
 80060f0:	2068      	movs	r0, #104	; 0x68
 80060f2:	f7ff fe81 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, MPU6500_GYRO_FS_250); // Set full scale range for the gyro to 250 dps
 80060f6:	2200      	movs	r2, #0
 80060f8:	211b      	movs	r1, #27
 80060fa:	2068      	movs	r0, #104	; 0x68
 80060fc:	f7ff fe7c 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG_2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8006100:	2202      	movs	r2, #2
 8006102:	211d      	movs	r1, #29
 8006104:	2068      	movs	r0, #104	; 0x68
 8006106:	f7ff fe77 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, MPU6500_ACCEL_FS_2); // Set full scale range for the accelerometer to 2 g
 800610a:	2200      	movs	r2, #0
 800610c:	211c      	movs	r1, #28
 800610e:	2068      	movs	r0, #104	; 0x68
 8006110:	f7ff fe72 	bl	8005df8 <twiWriteReg8>

  for(i = 0; i < 200; i++)
 8006114:	2300      	movs	r3, #0
 8006116:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006118:	e055      	b.n	80061c6 <imuSelfTest+0x17e>
  {
    // get average current values of gyro and acclerometer
    twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 800611a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800611e:	2206      	movs	r2, #6
 8006120:	213b      	movs	r1, #59	; 0x3b
 8006122:	2068      	movs	r0, #104	; 0x68
 8006124:	f7ff ff0e 	bl	8005f44 <twiReadRegs8>
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800612e:	0212      	lsls	r2, r2, #8
 8006130:	b211      	sxth	r1, r2
 8006132:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8006136:	b212      	sxth	r2, r2
 8006138:	430a      	orrs	r2, r1
 800613a:	b212      	sxth	r2, r2
 800613c:	4413      	add	r3, r2
 800613e:	63fb      	str	r3, [r7, #60]	; 0x3c
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8006140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006142:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8006146:	0212      	lsls	r2, r2, #8
 8006148:	b211      	sxth	r1, r2
 800614a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800614e:	b212      	sxth	r2, r2
 8006150:	430a      	orrs	r2, r1
 8006152:	b212      	sxth	r2, r2
 8006154:	4413      	add	r3, r2
 8006156:	643b      	str	r3, [r7, #64]	; 0x40
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8006158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615a:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800615e:	0212      	lsls	r2, r2, #8
 8006160:	b211      	sxth	r1, r2
 8006162:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8006166:	b212      	sxth	r2, r2
 8006168:	430a      	orrs	r2, r1
 800616a:	b212      	sxth	r2, r2
 800616c:	4413      	add	r3, r2
 800616e:	647b      	str	r3, [r7, #68]	; 0x44

    twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8006170:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006174:	2206      	movs	r2, #6
 8006176:	2143      	movs	r1, #67	; 0x43
 8006178:	2068      	movs	r0, #104	; 0x68
 800617a:	f7ff fee3 	bl	8005f44 <twiReadRegs8>
    gAvg[0] += (int16_t)((int16_t)rawData[0] << 8) | rawData[1]; // Turn the MSB and LSB into a signed 16-bit value
 800617e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006180:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8006184:	021b      	lsls	r3, r3, #8
 8006186:	b21b      	sxth	r3, r3
 8006188:	4619      	mov	r1, r3
 800618a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800618e:	430b      	orrs	r3, r1
 8006190:	4413      	add	r3, r2
 8006192:	64bb      	str	r3, [r7, #72]	; 0x48
    gAvg[1] += (int16_t)((int16_t)rawData[2] << 8) | rawData[3];
 8006194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006196:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	b21b      	sxth	r3, r3
 800619e:	4619      	mov	r1, r3
 80061a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80061a4:	430b      	orrs	r3, r1
 80061a6:	4413      	add	r3, r2
 80061a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    gAvg[2] += (int16_t)((int16_t)rawData[4] << 8) | rawData[5];
 80061aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061ac:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	b21b      	sxth	r3, r3
 80061b4:	4619      	mov	r1, r3
 80061b6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80061ba:	430b      	orrs	r3, r1
 80061bc:	4413      	add	r3, r2
 80061be:	653b      	str	r3, [r7, #80]	; 0x50
  for(i = 0; i < 200; i++)
 80061c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c2:	3301      	adds	r3, #1
 80061c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c8:	2bc7      	cmp	r3, #199	; 0xc7
 80061ca:	dda6      	ble.n	800611a <imuSelfTest+0xd2>
  }

  for (i = 0; i < 3; i++)
 80061cc:	2300      	movs	r3, #0
 80061ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061d0:	e026      	b.n	8006220 <imuSelfTest+0x1d8>
  { // Get average of 200 values and store as average current readings
    aAvg[i] /= 200;
 80061d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	3370      	adds	r3, #112	; 0x70
 80061d8:	443b      	add	r3, r7
 80061da:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80061de:	4a4a      	ldr	r2, [pc, #296]	; (8006308 <imuSelfTest+0x2c0>)
 80061e0:	fb82 1203 	smull	r1, r2, r2, r3
 80061e4:	1192      	asrs	r2, r2, #6
 80061e6:	17db      	asrs	r3, r3, #31
 80061e8:	1ad2      	subs	r2, r2, r3
 80061ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	3370      	adds	r3, #112	; 0x70
 80061f0:	443b      	add	r3, r7
 80061f2:	f843 2c34 	str.w	r2, [r3, #-52]
    gAvg[i] /= 200;
 80061f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	3370      	adds	r3, #112	; 0x70
 80061fc:	443b      	add	r3, r7
 80061fe:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8006202:	4a41      	ldr	r2, [pc, #260]	; (8006308 <imuSelfTest+0x2c0>)
 8006204:	fb82 1203 	smull	r1, r2, r2, r3
 8006208:	1192      	asrs	r2, r2, #6
 800620a:	17db      	asrs	r3, r3, #31
 800620c:	1ad2      	subs	r2, r2, r3
 800620e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	3370      	adds	r3, #112	; 0x70
 8006214:	443b      	add	r3, r7
 8006216:	f843 2c28 	str.w	r2, [r3, #-40]
  for (i = 0; i < 3; i++)
 800621a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621c:	3301      	adds	r3, #1
 800621e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006222:	2b02      	cmp	r3, #2
 8006224:	ddd5      	ble.n	80061d2 <imuSelfTest+0x18a>
  }

  // Configure the accelerometer for self-test
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8006226:	22e0      	movs	r2, #224	; 0xe0
 8006228:	211c      	movs	r1, #28
 800622a:	2068      	movs	r0, #104	; 0x68
 800622c:	f7ff fde4 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8006230:	22e0      	movs	r2, #224	; 0xe0
 8006232:	211b      	movs	r1, #27
 8006234:	2068      	movs	r0, #104	; 0x68
 8006236:	f7ff fddf 	bl	8005df8 <twiWriteReg8>
  HAL_Delay(25); // Delay a while to let the device stabilize
 800623a:	2019      	movs	r0, #25
 800623c:	f7fd fba4 	bl	8003988 <HAL_Delay>

  for(i = 0; i < 200; i++)
 8006240:	2300      	movs	r3, #0
 8006242:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006244:	e058      	b.n	80062f8 <imuSelfTest+0x2b0>
  {
    // get average self-test values of gyro and acclerometer
    twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8006246:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800624a:	2206      	movs	r2, #6
 800624c:	213b      	movs	r1, #59	; 0x3b
 800624e:	2068      	movs	r0, #104	; 0x68
 8006250:	f7ff fe78 	bl	8005f44 <twiReadRegs8>
    aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800625a:	0212      	lsls	r2, r2, #8
 800625c:	b211      	sxth	r1, r2
 800625e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8006262:	b212      	sxth	r2, r2
 8006264:	430a      	orrs	r2, r1
 8006266:	b212      	sxth	r2, r2
 8006268:	4413      	add	r3, r2
 800626a:	633b      	str	r3, [r7, #48]	; 0x30
    aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8006272:	0212      	lsls	r2, r2, #8
 8006274:	b211      	sxth	r1, r2
 8006276:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800627a:	b212      	sxth	r2, r2
 800627c:	430a      	orrs	r2, r1
 800627e:	b212      	sxth	r2, r2
 8006280:	4413      	add	r3, r2
 8006282:	637b      	str	r3, [r7, #52]	; 0x34
    aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8006284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006286:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800628a:	0212      	lsls	r2, r2, #8
 800628c:	b211      	sxth	r1, r2
 800628e:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8006292:	b212      	sxth	r2, r2
 8006294:	430a      	orrs	r2, r1
 8006296:	b212      	sxth	r2, r2
 8006298:	4413      	add	r3, r2
 800629a:	63bb      	str	r3, [r7, #56]	; 0x38

    twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 800629c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80062a0:	2206      	movs	r2, #6
 80062a2:	2143      	movs	r1, #67	; 0x43
 80062a4:	2068      	movs	r0, #104	; 0x68
 80062a6:	f7ff fe4d 	bl	8005f44 <twiReadRegs8>
    gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80062b0:	0212      	lsls	r2, r2, #8
 80062b2:	b211      	sxth	r1, r2
 80062b4:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80062b8:	b212      	sxth	r2, r2
 80062ba:	430a      	orrs	r2, r1
 80062bc:	b212      	sxth	r2, r2
 80062be:	4413      	add	r3, r2
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
    gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80062c8:	0212      	lsls	r2, r2, #8
 80062ca:	b211      	sxth	r1, r2
 80062cc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80062d0:	b212      	sxth	r2, r2
 80062d2:	430a      	orrs	r2, r1
 80062d4:	b212      	sxth	r2, r2
 80062d6:	4413      	add	r3, r2
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28
    gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80062e0:	0212      	lsls	r2, r2, #8
 80062e2:	b211      	sxth	r1, r2
 80062e4:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 80062e8:	b212      	sxth	r2, r2
 80062ea:	430a      	orrs	r2, r1
 80062ec:	b212      	sxth	r2, r2
 80062ee:	4413      	add	r3, r2
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(i = 0; i < 200; i++)
 80062f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f4:	3301      	adds	r3, #1
 80062f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fa:	2bc7      	cmp	r3, #199	; 0xc7
 80062fc:	dda3      	ble.n	8006246 <imuSelfTest+0x1fe>
  }

  for (i =0; i < 3; i++)
 80062fe:	2300      	movs	r3, #0
 8006300:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006302:	e02a      	b.n	800635a <imuSelfTest+0x312>
 8006304:	08008310 	.word	0x08008310
 8006308:	51eb851f 	.word	0x51eb851f
  { // Get average of 200 values and store as average self-test readings
    aSTAvg[i] /= 200;
 800630c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	3370      	adds	r3, #112	; 0x70
 8006312:	443b      	add	r3, r7
 8006314:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006318:	4ace      	ldr	r2, [pc, #824]	; (8006654 <imuSelfTest+0x60c>)
 800631a:	fb82 1203 	smull	r1, r2, r2, r3
 800631e:	1192      	asrs	r2, r2, #6
 8006320:	17db      	asrs	r3, r3, #31
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	3370      	adds	r3, #112	; 0x70
 800632a:	443b      	add	r3, r7
 800632c:	f843 2c40 	str.w	r2, [r3, #-64]
    gSTAvg[i] /= 200;
 8006330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	3370      	adds	r3, #112	; 0x70
 8006336:	443b      	add	r3, r7
 8006338:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800633c:	4ac5      	ldr	r2, [pc, #788]	; (8006654 <imuSelfTest+0x60c>)
 800633e:	fb82 1203 	smull	r1, r2, r2, r3
 8006342:	1192      	asrs	r2, r2, #6
 8006344:	17db      	asrs	r3, r3, #31
 8006346:	1ad2      	subs	r2, r2, r3
 8006348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	3370      	adds	r3, #112	; 0x70
 800634e:	443b      	add	r3, r7
 8006350:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i =0; i < 3; i++)
 8006354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006356:	3301      	adds	r3, #1
 8006358:	66fb      	str	r3, [r7, #108]	; 0x6c
 800635a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635c:	2b02      	cmp	r3, #2
 800635e:	ddd5      	ble.n	800630c <imuSelfTest+0x2c4>
  }

   // Configure the gyro and accelerometer for normal operation
   twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, 0x00);
 8006360:	2200      	movs	r2, #0
 8006362:	211c      	movs	r1, #28
 8006364:	2068      	movs	r0, #104	; 0x68
 8006366:	f7ff fd47 	bl	8005df8 <twiWriteReg8>
   twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, 0x00);
 800636a:	2200      	movs	r2, #0
 800636c:	211b      	movs	r1, #27
 800636e:	2068      	movs	r0, #104	; 0x68
 8006370:	f7ff fd42 	bl	8005df8 <twiWriteReg8>
   HAL_Delay(25); // Delay a while to let the device stabilize
 8006374:	2019      	movs	r0, #25
 8006376:	f7fd fb07 	bl	8003988 <HAL_Delay>

   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ST_X_ACCEL, &selfTest[0]); // X-axis accel self-test results
 800637a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800637e:	461a      	mov	r2, r3
 8006380:	210d      	movs	r1, #13
 8006382:	2068      	movs	r0, #104	; 0x68
 8006384:	f7ff fdbc 	bl	8005f00 <twiReadReg8>
   twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ST_Y_ACCEL, &selfTest[1]); // Y-axis accel self-test results
 8006388:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800638c:	3301      	adds	r3, #1
 800638e:	461a      	mov	r2, r3
 8006390:	210e      	movs	r1, #14
 8006392:	2068      	movs	r0, #104	; 0x68
 8006394:	f7ff fdb4 	bl	8005f00 <twiReadReg8>
   twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ST_Z_ACCEL, &selfTest[2]); // Z-axis accel self-test results
 8006398:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800639c:	3302      	adds	r3, #2
 800639e:	461a      	mov	r2, r3
 80063a0:	210f      	movs	r1, #15
 80063a2:	2068      	movs	r0, #104	; 0x68
 80063a4:	f7ff fdac 	bl	8005f00 <twiReadReg8>
   twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ST_X_GYRO, &selfTest[3]); // X-axis gyro self-test results
 80063a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80063ac:	3303      	adds	r3, #3
 80063ae:	461a      	mov	r2, r3
 80063b0:	2100      	movs	r1, #0
 80063b2:	2068      	movs	r0, #104	; 0x68
 80063b4:	f7ff fda4 	bl	8005f00 <twiReadReg8>
   twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ST_Y_GYRO, &selfTest[4]); // Y-axis gyro self-test results
 80063b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80063bc:	3304      	adds	r3, #4
 80063be:	461a      	mov	r2, r3
 80063c0:	2101      	movs	r1, #1
 80063c2:	2068      	movs	r0, #104	; 0x68
 80063c4:	f7ff fd9c 	bl	8005f00 <twiReadReg8>
   twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ST_Z_GYRO, &selfTest[5]); // Z-axis gyro self-test results
 80063c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80063cc:	3305      	adds	r3, #5
 80063ce:	461a      	mov	r2, r3
 80063d0:	2102      	movs	r1, #2
 80063d2:	2068      	movs	r0, #104	; 0x68
 80063d4:	f7ff fd94 	bl	8005f00 <twiReadReg8>

   for (i = 0; i < 6; i++)
 80063d8:	2300      	movs	r3, #0
 80063da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063dc:	e023      	b.n	8006426 <imuSelfTest+0x3de>
   {
      if (selfTest[i] != 0)
 80063de:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80063e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e4:	4413      	add	r3, r2
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d012      	beq.n	8006412 <imuSelfTest+0x3ca>
      {
        factoryTrim[i] = *(mpu6500StTb + selfTest[i] - 1);
 80063ec:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80063f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f2:	4413      	add	r3, r2
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80063fa:	3b01      	subs	r3, #1
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	4a96      	ldr	r2, [pc, #600]	; (8006658 <imuSelfTest+0x610>)
 8006400:	4413      	add	r3, r2
 8006402:	881a      	ldrh	r2, [r3, #0]
 8006404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	3370      	adds	r3, #112	; 0x70
 800640a:	443b      	add	r3, r7
 800640c:	f823 2c58 	strh.w	r2, [r3, #-88]
 8006410:	e006      	b.n	8006420 <imuSelfTest+0x3d8>
      }
      else
      {
        factoryTrim[i] = 0;
 8006412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	3370      	adds	r3, #112	; 0x70
 8006418:	443b      	add	r3, r7
 800641a:	2200      	movs	r2, #0
 800641c:	f823 2c58 	strh.w	r2, [r3, #-88]
   for (i = 0; i < 6; i++)
 8006420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006422:	3301      	adds	r3, #1
 8006424:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006428:	2b05      	cmp	r3, #5
 800642a:	ddd8      	ble.n	80063de <imuSelfTest+0x396>
      // printf("[Self-test] idx #%d, st-code: %d, codeindex: %p, st-otp: %d\n", i, selfTest[i], mpu6500StTb + selfTest[i] - 1, factoryTrim[i]);
    }

  // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
  // To get percent, must multiply by 100
  for (i = 0; i < 3; i++)
 800642c:	2300      	movs	r3, #0
 800642e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006430:	e053      	b.n	80064da <imuSelfTest+0x492>
  {
    // aDiff[i] = 100.0f*((float)((aSTAvg[i] - aAvg[i]) - factoryTrim[i]))/factoryTrim[i]; // Report percent differences
    // gDiff[i] = 100.0f*((float)((gSTAvg[i] - gAvg[i]) - factoryTrim[i+3]))/factoryTrim[i+3]; // Report percent differences
    
    aDiff[i] = 100.0f*((float)((aSTAvg[i] - aAvg[i])))/factoryTrim[i]; // Report percent differences
 8006432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	3370      	adds	r3, #112	; 0x70
 8006438:	443b      	add	r3, r7
 800643a:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800643e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	3370      	adds	r3, #112	; 0x70
 8006444:	443b      	add	r3, r7
 8006446:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	ee07 3a90 	vmov	s15, r3
 8006450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006454:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800665c <imuSelfTest+0x614>
 8006458:	ee67 6a87 	vmul.f32	s13, s15, s14
 800645c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	3370      	adds	r3, #112	; 0x70
 8006462:	443b      	add	r3, r7
 8006464:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 8006468:	ee07 3a90 	vmov	s15, r3
 800646c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	3370      	adds	r3, #112	; 0x70
 800647a:	443b      	add	r3, r7
 800647c:	3b64      	subs	r3, #100	; 0x64
 800647e:	edc3 7a00 	vstr	s15, [r3]
    gDiff[i] = 100.0f*((float)((gSTAvg[i] - gAvg[i])))/factoryTrim[i+3]; // Report percent differences
 8006482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	3370      	adds	r3, #112	; 0x70
 8006488:	443b      	add	r3, r7
 800648a:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 800648e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	3370      	adds	r3, #112	; 0x70
 8006494:	443b      	add	r3, r7
 8006496:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	ee07 3a90 	vmov	s15, r3
 80064a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064a4:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800665c <imuSelfTest+0x614>
 80064a8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80064ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ae:	3303      	adds	r3, #3
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	3370      	adds	r3, #112	; 0x70
 80064b4:	443b      	add	r3, r7
 80064b6:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	3370      	adds	r3, #112	; 0x70
 80064cc:	443b      	add	r3, r7
 80064ce:	3b70      	subs	r3, #112	; 0x70
 80064d0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 80064d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d6:	3301      	adds	r3, #1
 80064d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064dc:	2b02      	cmp	r3, #2
 80064de:	dda8      	ble.n	8006432 <imuSelfTest+0x3ea>
    // printf("a[%d] Avg:%d, StAvg:%d, Shift:%d, FT:%d, Diff:%0.2f\n", i, aAvg[i], aSTAvg[i], aSTAvg[i] - aAvg[i], factoryTrim[i], aDiff[i]);
    // printf("g[%d] Avg:%d, StAvg:%d, Shift:%d, FT:%d, Diff:%0.2f\n", i, gAvg[i], gSTAvg[i], gSTAvg[i] - gAvg[i], factoryTrim[i+3], gDiff[i]);
  }

  // Restore old configuration
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_SMPLRT_DIV, saveReg[0]);
 80064e0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80064e4:	461a      	mov	r2, r3
 80064e6:	2119      	movs	r1, #25
 80064e8:	2068      	movs	r0, #104	; 0x68
 80064ea:	f7ff fc85 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_CONFIG, saveReg[1]);
 80064ee:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80064f2:	461a      	mov	r2, r3
 80064f4:	211a      	movs	r1, #26
 80064f6:	2068      	movs	r0, #104	; 0x68
 80064f8:	f7ff fc7e 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, saveReg[2]);
 80064fc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8006500:	461a      	mov	r2, r3
 8006502:	211b      	movs	r1, #27
 8006504:	2068      	movs	r0, #104	; 0x68
 8006506:	f7ff fc77 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG_2, saveReg[3]);
 800650a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800650e:	461a      	mov	r2, r3
 8006510:	211d      	movs	r1, #29
 8006512:	2068      	movs	r0, #104	; 0x68
 8006514:	f7ff fc70 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, saveReg[4]);
 8006518:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800651c:	461a      	mov	r2, r3
 800651e:	211c      	movs	r1, #28
 8006520:	2068      	movs	r0, #104	; 0x68
 8006522:	f7ff fc69 	bl	8005df8 <twiWriteReg8>

   // Check result
  testStatus |= imuEvalSelfTest(MPU6500_ST_GYRO_LOW, MPU6500_ST_GYRO_HIGH, gDiff[0], "gyro X") ? 0x00: 0x01;
 8006526:	edd7 7a00 	vldr	s15, [r7]
 800652a:	484d      	ldr	r0, [pc, #308]	; (8006660 <imuSelfTest+0x618>)
 800652c:	eeb0 1a67 	vmov.f32	s2, s15
 8006530:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8006664 <imuSelfTest+0x61c>
 8006534:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8006668 <imuSelfTest+0x620>
 8006538:	f7ff fd49 	bl	8005fce <imuEvalSelfTest>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	bf0c      	ite	eq
 8006542:	2301      	moveq	r3, #1
 8006544:	2300      	movne	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	b25a      	sxtb	r2, r3
 800654a:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 800654e:	4313      	orrs	r3, r2
 8006550:	b25b      	sxtb	r3, r3
 8006552:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  testStatus |= imuEvalSelfTest(MPU6500_ST_GYRO_LOW, MPU6500_ST_GYRO_HIGH, gDiff[1], "gyro Y") ? 0x00 : 0x02;
 8006556:	edd7 7a01 	vldr	s15, [r7, #4]
 800655a:	4844      	ldr	r0, [pc, #272]	; (800666c <imuSelfTest+0x624>)
 800655c:	eeb0 1a67 	vmov.f32	s2, s15
 8006560:	eddf 0a40 	vldr	s1, [pc, #256]	; 8006664 <imuSelfTest+0x61c>
 8006564:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8006668 <imuSelfTest+0x620>
 8006568:	f7ff fd31 	bl	8005fce <imuEvalSelfTest>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <imuSelfTest+0x52e>
 8006572:	2300      	movs	r3, #0
 8006574:	e000      	b.n	8006578 <imuSelfTest+0x530>
 8006576:	2302      	movs	r3, #2
 8006578:	b25a      	sxtb	r2, r3
 800657a:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 800657e:	4313      	orrs	r3, r2
 8006580:	b25b      	sxtb	r3, r3
 8006582:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  testStatus |= imuEvalSelfTest(MPU6500_ST_GYRO_LOW, MPU6500_ST_GYRO_HIGH, gDiff[2], "gyro Z") ? 0x00 : 0x04;
 8006586:	edd7 7a02 	vldr	s15, [r7, #8]
 800658a:	4839      	ldr	r0, [pc, #228]	; (8006670 <imuSelfTest+0x628>)
 800658c:	eeb0 1a67 	vmov.f32	s2, s15
 8006590:	eddf 0a34 	vldr	s1, [pc, #208]	; 8006664 <imuSelfTest+0x61c>
 8006594:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8006668 <imuSelfTest+0x620>
 8006598:	f7ff fd19 	bl	8005fce <imuEvalSelfTest>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <imuSelfTest+0x55e>
 80065a2:	2300      	movs	r3, #0
 80065a4:	e000      	b.n	80065a8 <imuSelfTest+0x560>
 80065a6:	2304      	movs	r3, #4
 80065a8:	b25a      	sxtb	r2, r3
 80065aa:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 80065ae:	4313      	orrs	r3, r2
 80065b0:	b25b      	sxtb	r3, r3
 80065b2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  testStatus |= imuEvalSelfTest(MPU6500_ST_ACCEL_LOW, MPU6500_ST_ACCEL_HIGH, aDiff[0], "acc X") ? 0x00 : 0x08;
 80065b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80065ba:	482e      	ldr	r0, [pc, #184]	; (8006674 <imuSelfTest+0x62c>)
 80065bc:	eeb0 1a67 	vmov.f32	s2, s15
 80065c0:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8006678 <imuSelfTest+0x630>
 80065c4:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8006668 <imuSelfTest+0x620>
 80065c8:	f7ff fd01 	bl	8005fce <imuEvalSelfTest>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <imuSelfTest+0x58e>
 80065d2:	2300      	movs	r3, #0
 80065d4:	e000      	b.n	80065d8 <imuSelfTest+0x590>
 80065d6:	2308      	movs	r3, #8
 80065d8:	b25a      	sxtb	r2, r3
 80065da:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 80065de:	4313      	orrs	r3, r2
 80065e0:	b25b      	sxtb	r3, r3
 80065e2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  testStatus |= imuEvalSelfTest(MPU6500_ST_ACCEL_LOW, MPU6500_ST_ACCEL_HIGH, aDiff[1], "acc Y") ? 0x00 : 0x10;
 80065e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80065ea:	4824      	ldr	r0, [pc, #144]	; (800667c <imuSelfTest+0x634>)
 80065ec:	eeb0 1a67 	vmov.f32	s2, s15
 80065f0:	eddf 0a21 	vldr	s1, [pc, #132]	; 8006678 <imuSelfTest+0x630>
 80065f4:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8006668 <imuSelfTest+0x620>
 80065f8:	f7ff fce9 	bl	8005fce <imuEvalSelfTest>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <imuSelfTest+0x5be>
 8006602:	2300      	movs	r3, #0
 8006604:	e000      	b.n	8006608 <imuSelfTest+0x5c0>
 8006606:	2310      	movs	r3, #16
 8006608:	b25a      	sxtb	r2, r3
 800660a:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 800660e:	4313      	orrs	r3, r2
 8006610:	b25b      	sxtb	r3, r3
 8006612:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  testStatus |= imuEvalSelfTest(MPU6500_ST_ACCEL_LOW, MPU6500_ST_ACCEL_HIGH, aDiff[2], "acc Z") ? 0x00 : 0x20;
 8006616:	edd7 7a05 	vldr	s15, [r7, #20]
 800661a:	4819      	ldr	r0, [pc, #100]	; (8006680 <imuSelfTest+0x638>)
 800661c:	eeb0 1a67 	vmov.f32	s2, s15
 8006620:	eddf 0a15 	vldr	s1, [pc, #84]	; 8006678 <imuSelfTest+0x630>
 8006624:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006668 <imuSelfTest+0x620>
 8006628:	f7ff fcd1 	bl	8005fce <imuEvalSelfTest>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <imuSelfTest+0x5ee>
 8006632:	2300      	movs	r3, #0
 8006634:	e000      	b.n	8006638 <imuSelfTest+0x5f0>
 8006636:	2320      	movs	r3, #32
 8006638:	b25a      	sxtb	r2, r3
 800663a:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 800663e:	4313      	orrs	r3, r2
 8006640:	b25b      	sxtb	r3, r3
 8006642:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

  return testStatus;
 8006646:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800664a:	4618      	mov	r0, r3
 800664c:	3770      	adds	r7, #112	; 0x70
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	51eb851f 	.word	0x51eb851f
 8006658:	08008330 	.word	0x08008330
 800665c:	42c80000 	.word	0x42c80000
 8006660:	080082e0 	.word	0x080082e0
 8006664:	00000000 	.word	0x00000000
 8006668:	42480000 	.word	0x42480000
 800666c:	080082e8 	.word	0x080082e8
 8006670:	080082f0 	.word	0x080082f0
 8006674:	080082f8 	.word	0x080082f8
 8006678:	43160000 	.word	0x43160000
 800667c:	08008300 	.word	0x08008300
 8006680:	08008308 	.word	0x08008308

08006684 <imuSetOffsets>:

// Setea los registros de corrección de offsets.
// De acelerometro y giroscopos.
void imuSetOffsets() {
 8006684:	b580      	push	{r7, lr}
 8006686:	b090      	sub	sp, #64	; 0x40
 8006688:	af00      	add	r7, sp, #0
  uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 800668a:	4aaa      	ldr	r2, [pc, #680]	; (8006934 <imuSetOffsets+0x2b0>)
 800668c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006694:	6018      	str	r0, [r3, #0]
 8006696:	3304      	adds	r3, #4
 8006698:	8019      	strh	r1, [r3, #0]
  uint8_t saveReg[5];
  uint8_t offsetsA[6] = {}, offsetsG[6] = {};
 800669a:	2300      	movs	r3, #0
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
 800669e:	2300      	movs	r3, #0
 80066a0:	853b      	strh	r3, [r7, #40]	; 0x28
 80066a2:	2300      	movs	r3, #0
 80066a4:	61fb      	str	r3, [r7, #28]
 80066a6:	2300      	movs	r3, #0
 80066a8:	843b      	strh	r3, [r7, #32]
  int32_t gAvg[3]={0}, aAvg[3]={0};
 80066aa:	f107 0310 	add.w	r3, r7, #16
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	605a      	str	r2, [r3, #4]
 80066b4:	609a      	str	r2, [r3, #8]
 80066b6:	1d3b      	adds	r3, r7, #4
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	605a      	str	r2, [r3, #4]
 80066be:	609a      	str	r2, [r3, #8]
  int i;

  // Save old configuration
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_SMPLRT_DIV, &saveReg[0]);
 80066c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066c4:	461a      	mov	r2, r3
 80066c6:	2119      	movs	r1, #25
 80066c8:	2068      	movs	r0, #104	; 0x68
 80066ca:	f7ff fc19 	bl	8005f00 <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_CONFIG, &saveReg[1]);
 80066ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066d2:	3301      	adds	r3, #1
 80066d4:	461a      	mov	r2, r3
 80066d6:	211a      	movs	r1, #26
 80066d8:	2068      	movs	r0, #104	; 0x68
 80066da:	f7ff fc11 	bl	8005f00 <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, &saveReg[2]);
 80066de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066e2:	3302      	adds	r3, #2
 80066e4:	461a      	mov	r2, r3
 80066e6:	211b      	movs	r1, #27
 80066e8:	2068      	movs	r0, #104	; 0x68
 80066ea:	f7ff fc09 	bl	8005f00 <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG_2, &saveReg[3]);
 80066ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066f2:	3303      	adds	r3, #3
 80066f4:	461a      	mov	r2, r3
 80066f6:	211d      	movs	r1, #29
 80066f8:	2068      	movs	r0, #104	; 0x68
 80066fa:	f7ff fc01 	bl	8005f00 <twiReadReg8>
  twiReadReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, &saveReg[4]);
 80066fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006702:	3304      	adds	r3, #4
 8006704:	461a      	mov	r2, r3
 8006706:	211c      	movs	r1, #28
 8006708:	2068      	movs	r0, #104	; 0x68
 800670a:	f7ff fbf9 	bl	8005f00 <twiReadReg8>
  // Write test configuration
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 800670e:	2200      	movs	r2, #0
 8006710:	2119      	movs	r1, #25
 8006712:	2068      	movs	r0, #104	; 0x68
 8006714:	f7ff fb70 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8006718:	2202      	movs	r2, #2
 800671a:	211a      	movs	r1, #26
 800671c:	2068      	movs	r0, #104	; 0x68
 800671e:	f7ff fb6b 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, MPU6500_GYRO_FS_250); // Set full scale range for the gyro to 250 dps
 8006722:	2200      	movs	r2, #0
 8006724:	211b      	movs	r1, #27
 8006726:	2068      	movs	r0, #104	; 0x68
 8006728:	f7ff fb66 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG_2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800672c:	2202      	movs	r2, #2
 800672e:	211d      	movs	r1, #29
 8006730:	2068      	movs	r0, #104	; 0x68
 8006732:	f7ff fb61 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, MPU6500_ACCEL_FS_2); // Set full scale range for the accelerometer to 2 g
 8006736:	2200      	movs	r2, #0
 8006738:	211c      	movs	r1, #28
 800673a:	2068      	movs	r0, #104	; 0x68
 800673c:	f7ff fb5c 	bl	8005df8 <twiWriteReg8>

  for(i = 0; i < 200; i++)
 8006740:	2300      	movs	r3, #0
 8006742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006744:	e055      	b.n	80067f2 <imuSetOffsets+0x16e>
  {
    // get average current values of gyro and acclerometer
    twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8006746:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800674a:	2206      	movs	r2, #6
 800674c:	213b      	movs	r1, #59	; 0x3b
 800674e:	2068      	movs	r0, #104	; 0x68
 8006750:	f7ff fbf8 	bl	8005f44 <twiReadRegs8>
    aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800675a:	0212      	lsls	r2, r2, #8
 800675c:	b211      	sxth	r1, r2
 800675e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006762:	b212      	sxth	r2, r2
 8006764:	430a      	orrs	r2, r1
 8006766:	b212      	sxth	r2, r2
 8006768:	4413      	add	r3, r2
 800676a:	607b      	str	r3, [r7, #4]
    aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8006772:	0212      	lsls	r2, r2, #8
 8006774:	b211      	sxth	r1, r2
 8006776:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800677a:	b212      	sxth	r2, r2
 800677c:	430a      	orrs	r2, r1
 800677e:	b212      	sxth	r2, r2
 8006780:	4413      	add	r3, r2
 8006782:	60bb      	str	r3, [r7, #8]
    aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800678a:	0212      	lsls	r2, r2, #8
 800678c:	b211      	sxth	r1, r2
 800678e:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8006792:	b212      	sxth	r2, r2
 8006794:	430a      	orrs	r2, r1
 8006796:	b212      	sxth	r2, r2
 8006798:	4413      	add	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]

    twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 800679c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80067a0:	2206      	movs	r2, #6
 80067a2:	2143      	movs	r1, #67	; 0x43
 80067a4:	2068      	movs	r0, #104	; 0x68
 80067a6:	f7ff fbcd 	bl	8005f44 <twiReadRegs8>
    gAvg[0] += (int16_t)((int16_t)rawData[0] << 8) | rawData[1]; // Turn the MSB and LSB into a signed 16-bit value
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	b21b      	sxth	r3, r3
 80067b4:	4619      	mov	r1, r3
 80067b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80067ba:	430b      	orrs	r3, r1
 80067bc:	4413      	add	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
    gAvg[1] += (int16_t)((int16_t)rawData[2] << 8) | rawData[3];
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	b21b      	sxth	r3, r3
 80067ca:	4619      	mov	r1, r3
 80067cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067d0:	430b      	orrs	r3, r1
 80067d2:	4413      	add	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]
    gAvg[2] += (int16_t)((int16_t)rawData[4] << 8) | rawData[5];
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	b21b      	sxth	r3, r3
 80067e0:	4619      	mov	r1, r3
 80067e2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80067e6:	430b      	orrs	r3, r1
 80067e8:	4413      	add	r3, r2
 80067ea:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < 200; i++)
 80067ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ee:	3301      	adds	r3, #1
 80067f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f4:	2bc7      	cmp	r3, #199	; 0xc7
 80067f6:	dda6      	ble.n	8006746 <imuSetOffsets+0xc2>
  }

  for (i = 0; i < 3; i++)
 80067f8:	2300      	movs	r3, #0
 80067fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067fc:	e068      	b.n	80068d0 <imuSetOffsets+0x24c>
  { // Get average of 200 values and store as average current readings
    aAvg[i] /= 200;
 80067fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	3340      	adds	r3, #64	; 0x40
 8006804:	443b      	add	r3, r7
 8006806:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800680a:	4a4b      	ldr	r2, [pc, #300]	; (8006938 <imuSetOffsets+0x2b4>)
 800680c:	fb82 1203 	smull	r1, r2, r2, r3
 8006810:	1192      	asrs	r2, r2, #6
 8006812:	17db      	asrs	r3, r3, #31
 8006814:	1ad2      	subs	r2, r2, r3
 8006816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	3340      	adds	r3, #64	; 0x40
 800681c:	443b      	add	r3, r7
 800681e:	f843 2c3c 	str.w	r2, [r3, #-60]
    gAvg[i] /= 200;
 8006822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	3340      	adds	r3, #64	; 0x40
 8006828:	443b      	add	r3, r7
 800682a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800682e:	4a42      	ldr	r2, [pc, #264]	; (8006938 <imuSetOffsets+0x2b4>)
 8006830:	fb82 1203 	smull	r1, r2, r2, r3
 8006834:	1192      	asrs	r2, r2, #6
 8006836:	17db      	asrs	r3, r3, #31
 8006838:	1ad2      	subs	r2, r2, r3
 800683a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	3340      	adds	r3, #64	; 0x40
 8006840:	443b      	add	r3, r7
 8006842:	f843 2c30 	str.w	r2, [r3, #-48]

    offsetsA[i*2] = ((aAvg[i] >> 3) & 0x0000ff00) >> 8;
 8006846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	3340      	adds	r3, #64	; 0x40
 800684c:	443b      	add	r3, r7
 800684e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006852:	10db      	asrs	r3, r3, #3
 8006854:	121a      	asrs	r2, r3, #8
 8006856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	3340      	adds	r3, #64	; 0x40
 800685e:	443b      	add	r3, r7
 8006860:	f803 2c1c 	strb.w	r2, [r3, #-28]
    offsetsA[(i*2) + 1] = (aAvg[i] >> 3) & 0x000000fe;
 8006864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	3340      	adds	r3, #64	; 0x40
 800686a:	443b      	add	r3, r7
 800686c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006870:	10db      	asrs	r3, r3, #3
 8006872:	b2da      	uxtb	r2, r3
 8006874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	3301      	adds	r3, #1
 800687a:	f022 0201 	bic.w	r2, r2, #1
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	3340      	adds	r3, #64	; 0x40
 8006882:	443b      	add	r3, r7
 8006884:	f803 2c1c 	strb.w	r2, [r3, #-28]

    offsetsG[i*2] = ((gAvg[i] >> 3) & 0x0000ff00) >> 8;
 8006888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	3340      	adds	r3, #64	; 0x40
 800688e:	443b      	add	r3, r7
 8006890:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8006894:	10db      	asrs	r3, r3, #3
 8006896:	121a      	asrs	r2, r3, #8
 8006898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	3340      	adds	r3, #64	; 0x40
 80068a0:	443b      	add	r3, r7
 80068a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    offsetsG[(i*2) + 1] = (gAvg[i] >> 3) & 0x000000fe;
 80068a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	3340      	adds	r3, #64	; 0x40
 80068ac:	443b      	add	r3, r7
 80068ae:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80068b2:	10db      	asrs	r3, r3, #3
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	3301      	adds	r3, #1
 80068bc:	f022 0201 	bic.w	r2, r2, #1
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	3340      	adds	r3, #64	; 0x40
 80068c4:	443b      	add	r3, r7
 80068c6:	f803 2c24 	strb.w	r2, [r3, #-36]
  for (i = 0; i < 3; i++)
 80068ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068cc:	3301      	adds	r3, #1
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	dd93      	ble.n	80067fe <imuSetOffsets+0x17a>
  }

  //Write offsets
  twiWriteRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_XG_OFFS_USRH, 6, offsetsG);
 80068d6:	f107 031c 	add.w	r3, r7, #28
 80068da:	2206      	movs	r2, #6
 80068dc:	2113      	movs	r1, #19
 80068de:	2068      	movs	r0, #104	; 0x68
 80068e0:	f7ff faa4 	bl	8005e2c <twiWriteRegs8>
  //twiWriteRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_XA_OFFSET_H, 6, offsetsA);

  //Restore registers
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_SMPLRT_DIV, saveReg[0]);
 80068e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80068e8:	461a      	mov	r2, r3
 80068ea:	2119      	movs	r1, #25
 80068ec:	2068      	movs	r0, #104	; 0x68
 80068ee:	f7ff fa83 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_CONFIG, saveReg[1]);
 80068f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80068f6:	461a      	mov	r2, r3
 80068f8:	211a      	movs	r1, #26
 80068fa:	2068      	movs	r0, #104	; 0x68
 80068fc:	f7ff fa7c 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_CONFIG, saveReg[2]);
 8006900:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006904:	461a      	mov	r2, r3
 8006906:	211b      	movs	r1, #27
 8006908:	2068      	movs	r0, #104	; 0x68
 800690a:	f7ff fa75 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG_2, saveReg[3]);
 800690e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006912:	461a      	mov	r2, r3
 8006914:	211d      	movs	r1, #29
 8006916:	2068      	movs	r0, #104	; 0x68
 8006918:	f7ff fa6e 	bl	8005df8 <twiWriteReg8>
  twiWriteReg8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_CONFIG, saveReg[4]);
 800691c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006920:	461a      	mov	r2, r3
 8006922:	211c      	movs	r1, #28
 8006924:	2068      	movs	r0, #104	; 0x68
 8006926:	f7ff fa67 	bl	8005df8 <twiWriteReg8>
  
}
 800692a:	bf00      	nop
 800692c:	3740      	adds	r7, #64	; 0x40
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	08008310 	.word	0x08008310
 8006938:	51eb851f 	.word	0x51eb851f

0800693c <imuGetAccelData>:
  return ((float)temp / 333.87f) + 21.0f;
}

//Retorna en un uint64 los datos de los 3 ejes del acelerometro.
//Formato: IIXXYYZZ (donde cada letra es un grupo de 8 bits. I: Ignorados)
uint64_t imuGetAccelData() {
 800693c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006940:	b08c      	sub	sp, #48	; 0x30
 8006942:	af00      	add	r7, sp, #0
  uint8_t buf[6];
  uint64_t ret = 0;
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_ACCEL_XOUT_H, 6, buf);
 8006950:	f107 031c 	add.w	r3, r7, #28
 8006954:	2206      	movs	r2, #6
 8006956:	213b      	movs	r1, #59	; 0x3b
 8006958:	2068      	movs	r0, #104	; 0x68
 800695a:	f7ff faf3 	bl	8005f44 <twiReadRegs8>
  for (int i = 0; i < 3; i++) {
 800695e:	2300      	movs	r3, #0
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
 8006962:	e05d      	b.n	8006a20 <imuGetAccelData+0xe4>
	  //Esta operativa me carga en el uint64 los datos de x, y & z.
	  //Es posible que sea mas legible y eficiente si unrolleo el loop;
	  ret |= ((uint64_t)buf[i*2]) << (8 + (2-i) * 16);
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	3318      	adds	r3, #24
 800696a:	f107 0218 	add.w	r2, r7, #24
 800696e:	4413      	add	r3, r2
 8006970:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2200      	movs	r2, #0
 8006978:	469a      	mov	sl, r3
 800697a:	4693      	mov	fp, r2
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	f1c3 0302 	rsb	r3, r3, #2
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	3308      	adds	r3, #8
 8006986:	f1a3 0120 	sub.w	r1, r3, #32
 800698a:	f1c3 0220 	rsb	r2, r3, #32
 800698e:	fa0b f503 	lsl.w	r5, fp, r3
 8006992:	fa0a f101 	lsl.w	r1, sl, r1
 8006996:	430d      	orrs	r5, r1
 8006998:	fa2a f202 	lsr.w	r2, sl, r2
 800699c:	4315      	orrs	r5, r2
 800699e:	fa0a f403 	lsl.w	r4, sl, r3
 80069a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069a6:	ea42 0104 	orr.w	r1, r2, r4
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	432b      	orrs	r3, r5
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  ret |= ((uint64_t)buf[(i*2)+1]) << (2-i) * 16;
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	3301      	adds	r3, #1
 80069be:	3318      	adds	r3, #24
 80069c0:	f107 0218 	add.w	r2, r7, #24
 80069c4:	4413      	add	r3, r2
 80069c6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2200      	movs	r2, #0
 80069ce:	613b      	str	r3, [r7, #16]
 80069d0:	617a      	str	r2, [r7, #20]
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	f1c3 0302 	rsb	r3, r3, #2
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	f1a3 0120 	sub.w	r1, r3, #32
 80069de:	f1c3 0220 	rsb	r2, r3, #32
 80069e2:	6978      	ldr	r0, [r7, #20]
 80069e4:	fa00 f903 	lsl.w	r9, r0, r3
 80069e8:	6938      	ldr	r0, [r7, #16]
 80069ea:	fa00 f101 	lsl.w	r1, r0, r1
 80069ee:	ea49 0901 	orr.w	r9, r9, r1
 80069f2:	6939      	ldr	r1, [r7, #16]
 80069f4:	fa21 f202 	lsr.w	r2, r1, r2
 80069f8:	ea49 0902 	orr.w	r9, r9, r2
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	fa02 f803 	lsl.w	r8, r2, r3
 8006a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a06:	ea42 0108 	orr.w	r1, r2, r8
 8006a0a:	6039      	str	r1, [r7, #0]
 8006a0c:	ea43 0309 	orr.w	r3, r3, r9
 8006a10:	607b      	str	r3, [r7, #4]
 8006a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a16:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for (int i = 0; i < 3; i++) {
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	dd9e      	ble.n	8006964 <imuGetAccelData+0x28>

  }
  return ret;
 8006a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	3730      	adds	r7, #48	; 0x30
 8006a30:	46bd      	mov	sp, r7
 8006a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006a36 <imuGetGyroData>:

//Retorna en un uint64 los datos de los 3 ejes del giroscopo
//Formato: IIXXYYZZ (donde cada letra es un grupo de 8 bits. I: Ignorados)
uint64_t imuGetGyroData() {
 8006a36:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a3a:	b08c      	sub	sp, #48	; 0x30
 8006a3c:	af00      	add	r7, sp, #0
  uint8_t buf[6];
  uint64_t ret = 0;
 8006a3e:	f04f 0200 	mov.w	r2, #0
 8006a42:	f04f 0300 	mov.w	r3, #0
 8006a46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  twiReadRegs8(MPU6500_DEFAULT_ADDRESS, MPU6500_RA_GYRO_XOUT_H, 6, buf);
 8006a4a:	f107 031c 	add.w	r3, r7, #28
 8006a4e:	2206      	movs	r2, #6
 8006a50:	2143      	movs	r1, #67	; 0x43
 8006a52:	2068      	movs	r0, #104	; 0x68
 8006a54:	f7ff fa76 	bl	8005f44 <twiReadRegs8>
  for (int i = 0; i < 3; i++) {
 8006a58:	2300      	movs	r3, #0
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5c:	e05d      	b.n	8006b1a <imuGetGyroData+0xe4>
	  //Esta operativa me carga en el uint64 los datos de x, y & z.
	  //Es posible que sea mas legible y eficiente si unrolleo el loop;
	  ret |= ((uint64_t)buf[i*2]) << (8 + (2-i) * 16);
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	3318      	adds	r3, #24
 8006a64:	f107 0218 	add.w	r2, r7, #24
 8006a68:	4413      	add	r3, r2
 8006a6a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2200      	movs	r2, #0
 8006a72:	469a      	mov	sl, r3
 8006a74:	4693      	mov	fp, r2
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	f1c3 0302 	rsb	r3, r3, #2
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	3308      	adds	r3, #8
 8006a80:	f1a3 0120 	sub.w	r1, r3, #32
 8006a84:	f1c3 0220 	rsb	r2, r3, #32
 8006a88:	fa0b f503 	lsl.w	r5, fp, r3
 8006a8c:	fa0a f101 	lsl.w	r1, sl, r1
 8006a90:	430d      	orrs	r5, r1
 8006a92:	fa2a f202 	lsr.w	r2, sl, r2
 8006a96:	4315      	orrs	r5, r2
 8006a98:	fa0a f403 	lsl.w	r4, sl, r3
 8006a9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006aa0:	ea42 0104 	orr.w	r1, r2, r4
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	432b      	orrs	r3, r5
 8006aa8:	60fb      	str	r3, [r7, #12]
 8006aaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006aae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  ret |= ((uint64_t)buf[(i*2)+1]) << (2-i) * 16;
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	3318      	adds	r3, #24
 8006aba:	f107 0218 	add.w	r2, r7, #24
 8006abe:	4413      	add	r3, r2
 8006ac0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	617a      	str	r2, [r7, #20]
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	f1c3 0302 	rsb	r3, r3, #2
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	f1a3 0120 	sub.w	r1, r3, #32
 8006ad8:	f1c3 0220 	rsb	r2, r3, #32
 8006adc:	6978      	ldr	r0, [r7, #20]
 8006ade:	fa00 f903 	lsl.w	r9, r0, r3
 8006ae2:	6938      	ldr	r0, [r7, #16]
 8006ae4:	fa00 f101 	lsl.w	r1, r0, r1
 8006ae8:	ea49 0901 	orr.w	r9, r9, r1
 8006aec:	6939      	ldr	r1, [r7, #16]
 8006aee:	fa21 f202 	lsr.w	r2, r1, r2
 8006af2:	ea49 0902 	orr.w	r9, r9, r2
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	fa02 f803 	lsl.w	r8, r2, r3
 8006afc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b00:	ea42 0108 	orr.w	r1, r2, r8
 8006b04:	6039      	str	r1, [r7, #0]
 8006b06:	ea43 0309 	orr.w	r3, r3, r9
 8006b0a:	607b      	str	r3, [r7, #4]
 8006b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b10:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for (int i = 0; i < 3; i++) {
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	3301      	adds	r3, #1
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	dd9e      	ble.n	8006a5e <imuGetGyroData+0x28>
  }
  return ret;
 8006b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8006b24:	4610      	mov	r0, r2
 8006b26:	4619      	mov	r1, r3
 8006b28:	3730      	adds	r7, #48	; 0x30
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b30 <__errno>:
 8006b30:	4b01      	ldr	r3, [pc, #4]	; (8006b38 <__errno+0x8>)
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	20000048 	.word	0x20000048

08006b3c <__libc_init_array>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	4d0d      	ldr	r5, [pc, #52]	; (8006b74 <__libc_init_array+0x38>)
 8006b40:	4c0d      	ldr	r4, [pc, #52]	; (8006b78 <__libc_init_array+0x3c>)
 8006b42:	1b64      	subs	r4, r4, r5
 8006b44:	10a4      	asrs	r4, r4, #2
 8006b46:	2600      	movs	r6, #0
 8006b48:	42a6      	cmp	r6, r4
 8006b4a:	d109      	bne.n	8006b60 <__libc_init_array+0x24>
 8006b4c:	4d0b      	ldr	r5, [pc, #44]	; (8006b7c <__libc_init_array+0x40>)
 8006b4e:	4c0c      	ldr	r4, [pc, #48]	; (8006b80 <__libc_init_array+0x44>)
 8006b50:	f001 fbba 	bl	80082c8 <_init>
 8006b54:	1b64      	subs	r4, r4, r5
 8006b56:	10a4      	asrs	r4, r4, #2
 8006b58:	2600      	movs	r6, #0
 8006b5a:	42a6      	cmp	r6, r4
 8006b5c:	d105      	bne.n	8006b6a <__libc_init_array+0x2e>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b64:	4798      	blx	r3
 8006b66:	3601      	adds	r6, #1
 8006b68:	e7ee      	b.n	8006b48 <__libc_init_array+0xc>
 8006b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6e:	4798      	blx	r3
 8006b70:	3601      	adds	r6, #1
 8006b72:	e7f2      	b.n	8006b5a <__libc_init_array+0x1e>
 8006b74:	08008758 	.word	0x08008758
 8006b78:	08008758 	.word	0x08008758
 8006b7c:	08008758 	.word	0x08008758
 8006b80:	0800875c 	.word	0x0800875c

08006b84 <memset>:
 8006b84:	4402      	add	r2, r0
 8006b86:	4603      	mov	r3, r0
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d100      	bne.n	8006b8e <memset+0xa>
 8006b8c:	4770      	bx	lr
 8006b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b92:	e7f9      	b.n	8006b88 <memset+0x4>
 8006b94:	0000      	movs	r0, r0
	...

08006b98 <atan>:
 8006b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	ec55 4b10 	vmov	r4, r5, d0
 8006ba0:	4bc3      	ldr	r3, [pc, #780]	; (8006eb0 <atan+0x318>)
 8006ba2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006ba6:	429e      	cmp	r6, r3
 8006ba8:	46ab      	mov	fp, r5
 8006baa:	dd18      	ble.n	8006bde <atan+0x46>
 8006bac:	4bc1      	ldr	r3, [pc, #772]	; (8006eb4 <atan+0x31c>)
 8006bae:	429e      	cmp	r6, r3
 8006bb0:	dc01      	bgt.n	8006bb6 <atan+0x1e>
 8006bb2:	d109      	bne.n	8006bc8 <atan+0x30>
 8006bb4:	b144      	cbz	r4, 8006bc8 <atan+0x30>
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	462b      	mov	r3, r5
 8006bba:	4620      	mov	r0, r4
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	f7f9 fb11 	bl	80001e4 <__adddf3>
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	460d      	mov	r5, r1
 8006bc6:	e006      	b.n	8006bd6 <atan+0x3e>
 8006bc8:	f1bb 0f00 	cmp.w	fp, #0
 8006bcc:	f300 8131 	bgt.w	8006e32 <atan+0x29a>
 8006bd0:	a59b      	add	r5, pc, #620	; (adr r5, 8006e40 <atan+0x2a8>)
 8006bd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006bd6:	ec45 4b10 	vmov	d0, r4, r5
 8006bda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bde:	4bb6      	ldr	r3, [pc, #728]	; (8006eb8 <atan+0x320>)
 8006be0:	429e      	cmp	r6, r3
 8006be2:	dc14      	bgt.n	8006c0e <atan+0x76>
 8006be4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006be8:	429e      	cmp	r6, r3
 8006bea:	dc0d      	bgt.n	8006c08 <atan+0x70>
 8006bec:	a396      	add	r3, pc, #600	; (adr r3, 8006e48 <atan+0x2b0>)
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	ee10 0a10 	vmov	r0, s0
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	f7f9 faf4 	bl	80001e4 <__adddf3>
 8006bfc:	4baf      	ldr	r3, [pc, #700]	; (8006ebc <atan+0x324>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f7f9 ff36 	bl	8000a70 <__aeabi_dcmpgt>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d1e6      	bne.n	8006bd6 <atan+0x3e>
 8006c08:	f04f 3aff 	mov.w	sl, #4294967295
 8006c0c:	e02b      	b.n	8006c66 <atan+0xce>
 8006c0e:	f000 f9b7 	bl	8006f80 <fabs>
 8006c12:	4bab      	ldr	r3, [pc, #684]	; (8006ec0 <atan+0x328>)
 8006c14:	429e      	cmp	r6, r3
 8006c16:	ec55 4b10 	vmov	r4, r5, d0
 8006c1a:	f300 80bf 	bgt.w	8006d9c <atan+0x204>
 8006c1e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006c22:	429e      	cmp	r6, r3
 8006c24:	f300 80a0 	bgt.w	8006d68 <atan+0x1d0>
 8006c28:	ee10 2a10 	vmov	r2, s0
 8006c2c:	ee10 0a10 	vmov	r0, s0
 8006c30:	462b      	mov	r3, r5
 8006c32:	4629      	mov	r1, r5
 8006c34:	f7f9 fad6 	bl	80001e4 <__adddf3>
 8006c38:	4ba0      	ldr	r3, [pc, #640]	; (8006ebc <atan+0x324>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f7f9 fad0 	bl	80001e0 <__aeabi_dsub>
 8006c40:	2200      	movs	r2, #0
 8006c42:	4606      	mov	r6, r0
 8006c44:	460f      	mov	r7, r1
 8006c46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	f7f9 fac9 	bl	80001e4 <__adddf3>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4630      	mov	r0, r6
 8006c58:	4639      	mov	r1, r7
 8006c5a:	f7f9 fda3 	bl	80007a4 <__aeabi_ddiv>
 8006c5e:	f04f 0a00 	mov.w	sl, #0
 8006c62:	4604      	mov	r4, r0
 8006c64:	460d      	mov	r5, r1
 8006c66:	4622      	mov	r2, r4
 8006c68:	462b      	mov	r3, r5
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	f7f9 fc6f 	bl	8000550 <__aeabi_dmul>
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	4680      	mov	r8, r0
 8006c78:	4689      	mov	r9, r1
 8006c7a:	f7f9 fc69 	bl	8000550 <__aeabi_dmul>
 8006c7e:	a374      	add	r3, pc, #464	; (adr r3, 8006e50 <atan+0x2b8>)
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	4606      	mov	r6, r0
 8006c86:	460f      	mov	r7, r1
 8006c88:	f7f9 fc62 	bl	8000550 <__aeabi_dmul>
 8006c8c:	a372      	add	r3, pc, #456	; (adr r3, 8006e58 <atan+0x2c0>)
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	f7f9 faa7 	bl	80001e4 <__adddf3>
 8006c96:	4632      	mov	r2, r6
 8006c98:	463b      	mov	r3, r7
 8006c9a:	f7f9 fc59 	bl	8000550 <__aeabi_dmul>
 8006c9e:	a370      	add	r3, pc, #448	; (adr r3, 8006e60 <atan+0x2c8>)
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	f7f9 fa9e 	bl	80001e4 <__adddf3>
 8006ca8:	4632      	mov	r2, r6
 8006caa:	463b      	mov	r3, r7
 8006cac:	f7f9 fc50 	bl	8000550 <__aeabi_dmul>
 8006cb0:	a36d      	add	r3, pc, #436	; (adr r3, 8006e68 <atan+0x2d0>)
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	f7f9 fa95 	bl	80001e4 <__adddf3>
 8006cba:	4632      	mov	r2, r6
 8006cbc:	463b      	mov	r3, r7
 8006cbe:	f7f9 fc47 	bl	8000550 <__aeabi_dmul>
 8006cc2:	a36b      	add	r3, pc, #428	; (adr r3, 8006e70 <atan+0x2d8>)
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	f7f9 fa8c 	bl	80001e4 <__adddf3>
 8006ccc:	4632      	mov	r2, r6
 8006cce:	463b      	mov	r3, r7
 8006cd0:	f7f9 fc3e 	bl	8000550 <__aeabi_dmul>
 8006cd4:	a368      	add	r3, pc, #416	; (adr r3, 8006e78 <atan+0x2e0>)
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	f7f9 fa83 	bl	80001e4 <__adddf3>
 8006cde:	4642      	mov	r2, r8
 8006ce0:	464b      	mov	r3, r9
 8006ce2:	f7f9 fc35 	bl	8000550 <__aeabi_dmul>
 8006ce6:	a366      	add	r3, pc, #408	; (adr r3, 8006e80 <atan+0x2e8>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	4680      	mov	r8, r0
 8006cee:	4689      	mov	r9, r1
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	4639      	mov	r1, r7
 8006cf4:	f7f9 fc2c 	bl	8000550 <__aeabi_dmul>
 8006cf8:	a363      	add	r3, pc, #396	; (adr r3, 8006e88 <atan+0x2f0>)
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	f7f9 fa6f 	bl	80001e0 <__aeabi_dsub>
 8006d02:	4632      	mov	r2, r6
 8006d04:	463b      	mov	r3, r7
 8006d06:	f7f9 fc23 	bl	8000550 <__aeabi_dmul>
 8006d0a:	a361      	add	r3, pc, #388	; (adr r3, 8006e90 <atan+0x2f8>)
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	f7f9 fa66 	bl	80001e0 <__aeabi_dsub>
 8006d14:	4632      	mov	r2, r6
 8006d16:	463b      	mov	r3, r7
 8006d18:	f7f9 fc1a 	bl	8000550 <__aeabi_dmul>
 8006d1c:	a35e      	add	r3, pc, #376	; (adr r3, 8006e98 <atan+0x300>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f7f9 fa5d 	bl	80001e0 <__aeabi_dsub>
 8006d26:	4632      	mov	r2, r6
 8006d28:	463b      	mov	r3, r7
 8006d2a:	f7f9 fc11 	bl	8000550 <__aeabi_dmul>
 8006d2e:	a35c      	add	r3, pc, #368	; (adr r3, 8006ea0 <atan+0x308>)
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f7f9 fa54 	bl	80001e0 <__aeabi_dsub>
 8006d38:	4632      	mov	r2, r6
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	f7f9 fc08 	bl	8000550 <__aeabi_dmul>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4640      	mov	r0, r8
 8006d46:	4649      	mov	r1, r9
 8006d48:	f7f9 fa4c 	bl	80001e4 <__adddf3>
 8006d4c:	4622      	mov	r2, r4
 8006d4e:	462b      	mov	r3, r5
 8006d50:	f7f9 fbfe 	bl	8000550 <__aeabi_dmul>
 8006d54:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	d14b      	bne.n	8006df6 <atan+0x25e>
 8006d5e:	4620      	mov	r0, r4
 8006d60:	4629      	mov	r1, r5
 8006d62:	f7f9 fa3d 	bl	80001e0 <__aeabi_dsub>
 8006d66:	e72c      	b.n	8006bc2 <atan+0x2a>
 8006d68:	ee10 0a10 	vmov	r0, s0
 8006d6c:	4b53      	ldr	r3, [pc, #332]	; (8006ebc <atan+0x324>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	4629      	mov	r1, r5
 8006d72:	f7f9 fa35 	bl	80001e0 <__aeabi_dsub>
 8006d76:	4b51      	ldr	r3, [pc, #324]	; (8006ebc <atan+0x324>)
 8006d78:	4606      	mov	r6, r0
 8006d7a:	460f      	mov	r7, r1
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4629      	mov	r1, r5
 8006d82:	f7f9 fa2f 	bl	80001e4 <__adddf3>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	f7f9 fd09 	bl	80007a4 <__aeabi_ddiv>
 8006d92:	f04f 0a01 	mov.w	sl, #1
 8006d96:	4604      	mov	r4, r0
 8006d98:	460d      	mov	r5, r1
 8006d9a:	e764      	b.n	8006c66 <atan+0xce>
 8006d9c:	4b49      	ldr	r3, [pc, #292]	; (8006ec4 <atan+0x32c>)
 8006d9e:	429e      	cmp	r6, r3
 8006da0:	da1d      	bge.n	8006dde <atan+0x246>
 8006da2:	ee10 0a10 	vmov	r0, s0
 8006da6:	4b48      	ldr	r3, [pc, #288]	; (8006ec8 <atan+0x330>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	4629      	mov	r1, r5
 8006dac:	f7f9 fa18 	bl	80001e0 <__aeabi_dsub>
 8006db0:	4b45      	ldr	r3, [pc, #276]	; (8006ec8 <atan+0x330>)
 8006db2:	4606      	mov	r6, r0
 8006db4:	460f      	mov	r7, r1
 8006db6:	2200      	movs	r2, #0
 8006db8:	4620      	mov	r0, r4
 8006dba:	4629      	mov	r1, r5
 8006dbc:	f7f9 fbc8 	bl	8000550 <__aeabi_dmul>
 8006dc0:	4b3e      	ldr	r3, [pc, #248]	; (8006ebc <atan+0x324>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f7f9 fa0e 	bl	80001e4 <__adddf3>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4630      	mov	r0, r6
 8006dce:	4639      	mov	r1, r7
 8006dd0:	f7f9 fce8 	bl	80007a4 <__aeabi_ddiv>
 8006dd4:	f04f 0a02 	mov.w	sl, #2
 8006dd8:	4604      	mov	r4, r0
 8006dda:	460d      	mov	r5, r1
 8006ddc:	e743      	b.n	8006c66 <atan+0xce>
 8006dde:	462b      	mov	r3, r5
 8006de0:	ee10 2a10 	vmov	r2, s0
 8006de4:	4939      	ldr	r1, [pc, #228]	; (8006ecc <atan+0x334>)
 8006de6:	2000      	movs	r0, #0
 8006de8:	f7f9 fcdc 	bl	80007a4 <__aeabi_ddiv>
 8006dec:	f04f 0a03 	mov.w	sl, #3
 8006df0:	4604      	mov	r4, r0
 8006df2:	460d      	mov	r5, r1
 8006df4:	e737      	b.n	8006c66 <atan+0xce>
 8006df6:	4b36      	ldr	r3, [pc, #216]	; (8006ed0 <atan+0x338>)
 8006df8:	4e36      	ldr	r6, [pc, #216]	; (8006ed4 <atan+0x33c>)
 8006dfa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006dfe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006e02:	e9da 2300 	ldrd	r2, r3, [sl]
 8006e06:	f7f9 f9eb 	bl	80001e0 <__aeabi_dsub>
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	462b      	mov	r3, r5
 8006e0e:	f7f9 f9e7 	bl	80001e0 <__aeabi_dsub>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006e1a:	f7f9 f9e1 	bl	80001e0 <__aeabi_dsub>
 8006e1e:	f1bb 0f00 	cmp.w	fp, #0
 8006e22:	4604      	mov	r4, r0
 8006e24:	460d      	mov	r5, r1
 8006e26:	f6bf aed6 	bge.w	8006bd6 <atan+0x3e>
 8006e2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e2e:	461d      	mov	r5, r3
 8006e30:	e6d1      	b.n	8006bd6 <atan+0x3e>
 8006e32:	a51d      	add	r5, pc, #116	; (adr r5, 8006ea8 <atan+0x310>)
 8006e34:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e38:	e6cd      	b.n	8006bd6 <atan+0x3e>
 8006e3a:	bf00      	nop
 8006e3c:	f3af 8000 	nop.w
 8006e40:	54442d18 	.word	0x54442d18
 8006e44:	bff921fb 	.word	0xbff921fb
 8006e48:	8800759c 	.word	0x8800759c
 8006e4c:	7e37e43c 	.word	0x7e37e43c
 8006e50:	e322da11 	.word	0xe322da11
 8006e54:	3f90ad3a 	.word	0x3f90ad3a
 8006e58:	24760deb 	.word	0x24760deb
 8006e5c:	3fa97b4b 	.word	0x3fa97b4b
 8006e60:	a0d03d51 	.word	0xa0d03d51
 8006e64:	3fb10d66 	.word	0x3fb10d66
 8006e68:	c54c206e 	.word	0xc54c206e
 8006e6c:	3fb745cd 	.word	0x3fb745cd
 8006e70:	920083ff 	.word	0x920083ff
 8006e74:	3fc24924 	.word	0x3fc24924
 8006e78:	5555550d 	.word	0x5555550d
 8006e7c:	3fd55555 	.word	0x3fd55555
 8006e80:	2c6a6c2f 	.word	0x2c6a6c2f
 8006e84:	bfa2b444 	.word	0xbfa2b444
 8006e88:	52defd9a 	.word	0x52defd9a
 8006e8c:	3fadde2d 	.word	0x3fadde2d
 8006e90:	af749a6d 	.word	0xaf749a6d
 8006e94:	3fb3b0f2 	.word	0x3fb3b0f2
 8006e98:	fe231671 	.word	0xfe231671
 8006e9c:	3fbc71c6 	.word	0x3fbc71c6
 8006ea0:	9998ebc4 	.word	0x9998ebc4
 8006ea4:	3fc99999 	.word	0x3fc99999
 8006ea8:	54442d18 	.word	0x54442d18
 8006eac:	3ff921fb 	.word	0x3ff921fb
 8006eb0:	440fffff 	.word	0x440fffff
 8006eb4:	7ff00000 	.word	0x7ff00000
 8006eb8:	3fdbffff 	.word	0x3fdbffff
 8006ebc:	3ff00000 	.word	0x3ff00000
 8006ec0:	3ff2ffff 	.word	0x3ff2ffff
 8006ec4:	40038000 	.word	0x40038000
 8006ec8:	3ff80000 	.word	0x3ff80000
 8006ecc:	bff00000 	.word	0xbff00000
 8006ed0:	08008550 	.word	0x08008550
 8006ed4:	08008530 	.word	0x08008530

08006ed8 <cos>:
 8006ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eda:	ec53 2b10 	vmov	r2, r3, d0
 8006ede:	4826      	ldr	r0, [pc, #152]	; (8006f78 <cos+0xa0>)
 8006ee0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006ee4:	4281      	cmp	r1, r0
 8006ee6:	dc06      	bgt.n	8006ef6 <cos+0x1e>
 8006ee8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006f70 <cos+0x98>
 8006eec:	b005      	add	sp, #20
 8006eee:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ef2:	f000 bbfd 	b.w	80076f0 <__kernel_cos>
 8006ef6:	4821      	ldr	r0, [pc, #132]	; (8006f7c <cos+0xa4>)
 8006ef8:	4281      	cmp	r1, r0
 8006efa:	dd09      	ble.n	8006f10 <cos+0x38>
 8006efc:	ee10 0a10 	vmov	r0, s0
 8006f00:	4619      	mov	r1, r3
 8006f02:	f7f9 f96d 	bl	80001e0 <__aeabi_dsub>
 8006f06:	ec41 0b10 	vmov	d0, r0, r1
 8006f0a:	b005      	add	sp, #20
 8006f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f10:	4668      	mov	r0, sp
 8006f12:	f000 f8e5 	bl	80070e0 <__ieee754_rem_pio2>
 8006f16:	f000 0003 	and.w	r0, r0, #3
 8006f1a:	2801      	cmp	r0, #1
 8006f1c:	d00b      	beq.n	8006f36 <cos+0x5e>
 8006f1e:	2802      	cmp	r0, #2
 8006f20:	d016      	beq.n	8006f50 <cos+0x78>
 8006f22:	b9e0      	cbnz	r0, 8006f5e <cos+0x86>
 8006f24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f28:	ed9d 0b00 	vldr	d0, [sp]
 8006f2c:	f000 fbe0 	bl	80076f0 <__kernel_cos>
 8006f30:	ec51 0b10 	vmov	r0, r1, d0
 8006f34:	e7e7      	b.n	8006f06 <cos+0x2e>
 8006f36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f3a:	ed9d 0b00 	vldr	d0, [sp]
 8006f3e:	f000 ffef 	bl	8007f20 <__kernel_sin>
 8006f42:	ec53 2b10 	vmov	r2, r3, d0
 8006f46:	ee10 0a10 	vmov	r0, s0
 8006f4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006f4e:	e7da      	b.n	8006f06 <cos+0x2e>
 8006f50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f54:	ed9d 0b00 	vldr	d0, [sp]
 8006f58:	f000 fbca 	bl	80076f0 <__kernel_cos>
 8006f5c:	e7f1      	b.n	8006f42 <cos+0x6a>
 8006f5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f62:	ed9d 0b00 	vldr	d0, [sp]
 8006f66:	2001      	movs	r0, #1
 8006f68:	f000 ffda 	bl	8007f20 <__kernel_sin>
 8006f6c:	e7e0      	b.n	8006f30 <cos+0x58>
 8006f6e:	bf00      	nop
	...
 8006f78:	3fe921fb 	.word	0x3fe921fb
 8006f7c:	7fefffff 	.word	0x7fefffff

08006f80 <fabs>:
 8006f80:	ec51 0b10 	vmov	r0, r1, d0
 8006f84:	ee10 2a10 	vmov	r2, s0
 8006f88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f8c:	ec43 2b10 	vmov	d0, r2, r3
 8006f90:	4770      	bx	lr
 8006f92:	0000      	movs	r0, r0
 8006f94:	0000      	movs	r0, r0
	...

08006f98 <sin>:
 8006f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f9a:	ec53 2b10 	vmov	r2, r3, d0
 8006f9e:	4828      	ldr	r0, [pc, #160]	; (8007040 <sin+0xa8>)
 8006fa0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006fa4:	4281      	cmp	r1, r0
 8006fa6:	dc07      	bgt.n	8006fb8 <sin+0x20>
 8006fa8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007038 <sin+0xa0>
 8006fac:	2000      	movs	r0, #0
 8006fae:	b005      	add	sp, #20
 8006fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fb4:	f000 bfb4 	b.w	8007f20 <__kernel_sin>
 8006fb8:	4822      	ldr	r0, [pc, #136]	; (8007044 <sin+0xac>)
 8006fba:	4281      	cmp	r1, r0
 8006fbc:	dd09      	ble.n	8006fd2 <sin+0x3a>
 8006fbe:	ee10 0a10 	vmov	r0, s0
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f7f9 f90c 	bl	80001e0 <__aeabi_dsub>
 8006fc8:	ec41 0b10 	vmov	d0, r0, r1
 8006fcc:	b005      	add	sp, #20
 8006fce:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fd2:	4668      	mov	r0, sp
 8006fd4:	f000 f884 	bl	80070e0 <__ieee754_rem_pio2>
 8006fd8:	f000 0003 	and.w	r0, r0, #3
 8006fdc:	2801      	cmp	r0, #1
 8006fde:	d00c      	beq.n	8006ffa <sin+0x62>
 8006fe0:	2802      	cmp	r0, #2
 8006fe2:	d011      	beq.n	8007008 <sin+0x70>
 8006fe4:	b9f0      	cbnz	r0, 8007024 <sin+0x8c>
 8006fe6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006fea:	ed9d 0b00 	vldr	d0, [sp]
 8006fee:	2001      	movs	r0, #1
 8006ff0:	f000 ff96 	bl	8007f20 <__kernel_sin>
 8006ff4:	ec51 0b10 	vmov	r0, r1, d0
 8006ff8:	e7e6      	b.n	8006fc8 <sin+0x30>
 8006ffa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ffe:	ed9d 0b00 	vldr	d0, [sp]
 8007002:	f000 fb75 	bl	80076f0 <__kernel_cos>
 8007006:	e7f5      	b.n	8006ff4 <sin+0x5c>
 8007008:	ed9d 1b02 	vldr	d1, [sp, #8]
 800700c:	ed9d 0b00 	vldr	d0, [sp]
 8007010:	2001      	movs	r0, #1
 8007012:	f000 ff85 	bl	8007f20 <__kernel_sin>
 8007016:	ec53 2b10 	vmov	r2, r3, d0
 800701a:	ee10 0a10 	vmov	r0, s0
 800701e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007022:	e7d1      	b.n	8006fc8 <sin+0x30>
 8007024:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007028:	ed9d 0b00 	vldr	d0, [sp]
 800702c:	f000 fb60 	bl	80076f0 <__kernel_cos>
 8007030:	e7f1      	b.n	8007016 <sin+0x7e>
 8007032:	bf00      	nop
 8007034:	f3af 8000 	nop.w
	...
 8007040:	3fe921fb 	.word	0x3fe921fb
 8007044:	7fefffff 	.word	0x7fefffff

08007048 <acosf>:
 8007048:	b508      	push	{r3, lr}
 800704a:	ed2d 8b02 	vpush	{d8}
 800704e:	eeb0 8a40 	vmov.f32	s16, s0
 8007052:	f000 fa51 	bl	80074f8 <__ieee754_acosf>
 8007056:	eeb4 8a48 	vcmp.f32	s16, s16
 800705a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800705e:	eef0 8a40 	vmov.f32	s17, s0
 8007062:	d615      	bvs.n	8007090 <acosf+0x48>
 8007064:	eeb0 0a48 	vmov.f32	s0, s16
 8007068:	f001 f920 	bl	80082ac <fabsf>
 800706c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007070:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007078:	dd0a      	ble.n	8007090 <acosf+0x48>
 800707a:	f7ff fd59 	bl	8006b30 <__errno>
 800707e:	ecbd 8b02 	vpop	{d8}
 8007082:	2321      	movs	r3, #33	; 0x21
 8007084:	6003      	str	r3, [r0, #0]
 8007086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800708a:	4804      	ldr	r0, [pc, #16]	; (800709c <acosf+0x54>)
 800708c:	f001 b916 	b.w	80082bc <nanf>
 8007090:	eeb0 0a68 	vmov.f32	s0, s17
 8007094:	ecbd 8b02 	vpop	{d8}
 8007098:	bd08      	pop	{r3, pc}
 800709a:	bf00      	nop
 800709c:	08008570 	.word	0x08008570

080070a0 <sqrtf>:
 80070a0:	b508      	push	{r3, lr}
 80070a2:	ed2d 8b02 	vpush	{d8}
 80070a6:	eeb0 8a40 	vmov.f32	s16, s0
 80070aa:	f000 fb1d 	bl	80076e8 <__ieee754_sqrtf>
 80070ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80070b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b6:	d60c      	bvs.n	80070d2 <sqrtf+0x32>
 80070b8:	eddf 8a07 	vldr	s17, [pc, #28]	; 80070d8 <sqrtf+0x38>
 80070bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80070c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c4:	d505      	bpl.n	80070d2 <sqrtf+0x32>
 80070c6:	f7ff fd33 	bl	8006b30 <__errno>
 80070ca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80070ce:	2321      	movs	r3, #33	; 0x21
 80070d0:	6003      	str	r3, [r0, #0]
 80070d2:	ecbd 8b02 	vpop	{d8}
 80070d6:	bd08      	pop	{r3, pc}
	...

080070e0 <__ieee754_rem_pio2>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	ed2d 8b02 	vpush	{d8}
 80070e8:	ec55 4b10 	vmov	r4, r5, d0
 80070ec:	4bca      	ldr	r3, [pc, #808]	; (8007418 <__ieee754_rem_pio2+0x338>)
 80070ee:	b08b      	sub	sp, #44	; 0x2c
 80070f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80070f4:	4598      	cmp	r8, r3
 80070f6:	4682      	mov	sl, r0
 80070f8:	9502      	str	r5, [sp, #8]
 80070fa:	dc08      	bgt.n	800710e <__ieee754_rem_pio2+0x2e>
 80070fc:	2200      	movs	r2, #0
 80070fe:	2300      	movs	r3, #0
 8007100:	ed80 0b00 	vstr	d0, [r0]
 8007104:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007108:	f04f 0b00 	mov.w	fp, #0
 800710c:	e028      	b.n	8007160 <__ieee754_rem_pio2+0x80>
 800710e:	4bc3      	ldr	r3, [pc, #780]	; (800741c <__ieee754_rem_pio2+0x33c>)
 8007110:	4598      	cmp	r8, r3
 8007112:	dc78      	bgt.n	8007206 <__ieee754_rem_pio2+0x126>
 8007114:	9b02      	ldr	r3, [sp, #8]
 8007116:	4ec2      	ldr	r6, [pc, #776]	; (8007420 <__ieee754_rem_pio2+0x340>)
 8007118:	2b00      	cmp	r3, #0
 800711a:	ee10 0a10 	vmov	r0, s0
 800711e:	a3b0      	add	r3, pc, #704	; (adr r3, 80073e0 <__ieee754_rem_pio2+0x300>)
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	4629      	mov	r1, r5
 8007126:	dd39      	ble.n	800719c <__ieee754_rem_pio2+0xbc>
 8007128:	f7f9 f85a 	bl	80001e0 <__aeabi_dsub>
 800712c:	45b0      	cmp	r8, r6
 800712e:	4604      	mov	r4, r0
 8007130:	460d      	mov	r5, r1
 8007132:	d01b      	beq.n	800716c <__ieee754_rem_pio2+0x8c>
 8007134:	a3ac      	add	r3, pc, #688	; (adr r3, 80073e8 <__ieee754_rem_pio2+0x308>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f7f9 f851 	bl	80001e0 <__aeabi_dsub>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	e9ca 2300 	strd	r2, r3, [sl]
 8007146:	4620      	mov	r0, r4
 8007148:	4629      	mov	r1, r5
 800714a:	f7f9 f849 	bl	80001e0 <__aeabi_dsub>
 800714e:	a3a6      	add	r3, pc, #664	; (adr r3, 80073e8 <__ieee754_rem_pio2+0x308>)
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	f7f9 f844 	bl	80001e0 <__aeabi_dsub>
 8007158:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800715c:	f04f 0b01 	mov.w	fp, #1
 8007160:	4658      	mov	r0, fp
 8007162:	b00b      	add	sp, #44	; 0x2c
 8007164:	ecbd 8b02 	vpop	{d8}
 8007168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716c:	a3a0      	add	r3, pc, #640	; (adr r3, 80073f0 <__ieee754_rem_pio2+0x310>)
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f7f9 f835 	bl	80001e0 <__aeabi_dsub>
 8007176:	a3a0      	add	r3, pc, #640	; (adr r3, 80073f8 <__ieee754_rem_pio2+0x318>)
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	4604      	mov	r4, r0
 800717e:	460d      	mov	r5, r1
 8007180:	f7f9 f82e 	bl	80001e0 <__aeabi_dsub>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	e9ca 2300 	strd	r2, r3, [sl]
 800718c:	4620      	mov	r0, r4
 800718e:	4629      	mov	r1, r5
 8007190:	f7f9 f826 	bl	80001e0 <__aeabi_dsub>
 8007194:	a398      	add	r3, pc, #608	; (adr r3, 80073f8 <__ieee754_rem_pio2+0x318>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	e7db      	b.n	8007154 <__ieee754_rem_pio2+0x74>
 800719c:	f7f9 f822 	bl	80001e4 <__adddf3>
 80071a0:	45b0      	cmp	r8, r6
 80071a2:	4604      	mov	r4, r0
 80071a4:	460d      	mov	r5, r1
 80071a6:	d016      	beq.n	80071d6 <__ieee754_rem_pio2+0xf6>
 80071a8:	a38f      	add	r3, pc, #572	; (adr r3, 80073e8 <__ieee754_rem_pio2+0x308>)
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f7f9 f819 	bl	80001e4 <__adddf3>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	e9ca 2300 	strd	r2, r3, [sl]
 80071ba:	4620      	mov	r0, r4
 80071bc:	4629      	mov	r1, r5
 80071be:	f7f9 f80f 	bl	80001e0 <__aeabi_dsub>
 80071c2:	a389      	add	r3, pc, #548	; (adr r3, 80073e8 <__ieee754_rem_pio2+0x308>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f7f9 f80c 	bl	80001e4 <__adddf3>
 80071cc:	f04f 3bff 	mov.w	fp, #4294967295
 80071d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80071d4:	e7c4      	b.n	8007160 <__ieee754_rem_pio2+0x80>
 80071d6:	a386      	add	r3, pc, #536	; (adr r3, 80073f0 <__ieee754_rem_pio2+0x310>)
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	f7f9 f802 	bl	80001e4 <__adddf3>
 80071e0:	a385      	add	r3, pc, #532	; (adr r3, 80073f8 <__ieee754_rem_pio2+0x318>)
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	4604      	mov	r4, r0
 80071e8:	460d      	mov	r5, r1
 80071ea:	f7f8 fffb 	bl	80001e4 <__adddf3>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	e9ca 2300 	strd	r2, r3, [sl]
 80071f6:	4620      	mov	r0, r4
 80071f8:	4629      	mov	r1, r5
 80071fa:	f7f8 fff1 	bl	80001e0 <__aeabi_dsub>
 80071fe:	a37e      	add	r3, pc, #504	; (adr r3, 80073f8 <__ieee754_rem_pio2+0x318>)
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	e7e0      	b.n	80071c8 <__ieee754_rem_pio2+0xe8>
 8007206:	4b87      	ldr	r3, [pc, #540]	; (8007424 <__ieee754_rem_pio2+0x344>)
 8007208:	4598      	cmp	r8, r3
 800720a:	f300 80d9 	bgt.w	80073c0 <__ieee754_rem_pio2+0x2e0>
 800720e:	f7ff feb7 	bl	8006f80 <fabs>
 8007212:	ec55 4b10 	vmov	r4, r5, d0
 8007216:	ee10 0a10 	vmov	r0, s0
 800721a:	a379      	add	r3, pc, #484	; (adr r3, 8007400 <__ieee754_rem_pio2+0x320>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	4629      	mov	r1, r5
 8007222:	f7f9 f995 	bl	8000550 <__aeabi_dmul>
 8007226:	4b80      	ldr	r3, [pc, #512]	; (8007428 <__ieee754_rem_pio2+0x348>)
 8007228:	2200      	movs	r2, #0
 800722a:	f7f8 ffdb 	bl	80001e4 <__adddf3>
 800722e:	f7f9 fc29 	bl	8000a84 <__aeabi_d2iz>
 8007232:	4683      	mov	fp, r0
 8007234:	f7f9 f922 	bl	800047c <__aeabi_i2d>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	ec43 2b18 	vmov	d8, r2, r3
 8007240:	a367      	add	r3, pc, #412	; (adr r3, 80073e0 <__ieee754_rem_pio2+0x300>)
 8007242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007246:	f7f9 f983 	bl	8000550 <__aeabi_dmul>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4620      	mov	r0, r4
 8007250:	4629      	mov	r1, r5
 8007252:	f7f8 ffc5 	bl	80001e0 <__aeabi_dsub>
 8007256:	a364      	add	r3, pc, #400	; (adr r3, 80073e8 <__ieee754_rem_pio2+0x308>)
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	4606      	mov	r6, r0
 800725e:	460f      	mov	r7, r1
 8007260:	ec51 0b18 	vmov	r0, r1, d8
 8007264:	f7f9 f974 	bl	8000550 <__aeabi_dmul>
 8007268:	f1bb 0f1f 	cmp.w	fp, #31
 800726c:	4604      	mov	r4, r0
 800726e:	460d      	mov	r5, r1
 8007270:	dc0d      	bgt.n	800728e <__ieee754_rem_pio2+0x1ae>
 8007272:	4b6e      	ldr	r3, [pc, #440]	; (800742c <__ieee754_rem_pio2+0x34c>)
 8007274:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727c:	4543      	cmp	r3, r8
 800727e:	d006      	beq.n	800728e <__ieee754_rem_pio2+0x1ae>
 8007280:	4622      	mov	r2, r4
 8007282:	462b      	mov	r3, r5
 8007284:	4630      	mov	r0, r6
 8007286:	4639      	mov	r1, r7
 8007288:	f7f8 ffaa 	bl	80001e0 <__aeabi_dsub>
 800728c:	e00f      	b.n	80072ae <__ieee754_rem_pio2+0x1ce>
 800728e:	462b      	mov	r3, r5
 8007290:	4622      	mov	r2, r4
 8007292:	4630      	mov	r0, r6
 8007294:	4639      	mov	r1, r7
 8007296:	f7f8 ffa3 	bl	80001e0 <__aeabi_dsub>
 800729a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800729e:	9303      	str	r3, [sp, #12]
 80072a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80072a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80072a8:	f1b8 0f10 	cmp.w	r8, #16
 80072ac:	dc02      	bgt.n	80072b4 <__ieee754_rem_pio2+0x1d4>
 80072ae:	e9ca 0100 	strd	r0, r1, [sl]
 80072b2:	e039      	b.n	8007328 <__ieee754_rem_pio2+0x248>
 80072b4:	a34e      	add	r3, pc, #312	; (adr r3, 80073f0 <__ieee754_rem_pio2+0x310>)
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	ec51 0b18 	vmov	r0, r1, d8
 80072be:	f7f9 f947 	bl	8000550 <__aeabi_dmul>
 80072c2:	4604      	mov	r4, r0
 80072c4:	460d      	mov	r5, r1
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4630      	mov	r0, r6
 80072cc:	4639      	mov	r1, r7
 80072ce:	f7f8 ff87 	bl	80001e0 <__aeabi_dsub>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4680      	mov	r8, r0
 80072d8:	4689      	mov	r9, r1
 80072da:	4630      	mov	r0, r6
 80072dc:	4639      	mov	r1, r7
 80072de:	f7f8 ff7f 	bl	80001e0 <__aeabi_dsub>
 80072e2:	4622      	mov	r2, r4
 80072e4:	462b      	mov	r3, r5
 80072e6:	f7f8 ff7b 	bl	80001e0 <__aeabi_dsub>
 80072ea:	a343      	add	r3, pc, #268	; (adr r3, 80073f8 <__ieee754_rem_pio2+0x318>)
 80072ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f0:	4604      	mov	r4, r0
 80072f2:	460d      	mov	r5, r1
 80072f4:	ec51 0b18 	vmov	r0, r1, d8
 80072f8:	f7f9 f92a 	bl	8000550 <__aeabi_dmul>
 80072fc:	4622      	mov	r2, r4
 80072fe:	462b      	mov	r3, r5
 8007300:	f7f8 ff6e 	bl	80001e0 <__aeabi_dsub>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4604      	mov	r4, r0
 800730a:	460d      	mov	r5, r1
 800730c:	4640      	mov	r0, r8
 800730e:	4649      	mov	r1, r9
 8007310:	f7f8 ff66 	bl	80001e0 <__aeabi_dsub>
 8007314:	9a03      	ldr	r2, [sp, #12]
 8007316:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b31      	cmp	r3, #49	; 0x31
 800731e:	dc24      	bgt.n	800736a <__ieee754_rem_pio2+0x28a>
 8007320:	e9ca 0100 	strd	r0, r1, [sl]
 8007324:	4646      	mov	r6, r8
 8007326:	464f      	mov	r7, r9
 8007328:	e9da 8900 	ldrd	r8, r9, [sl]
 800732c:	4630      	mov	r0, r6
 800732e:	4642      	mov	r2, r8
 8007330:	464b      	mov	r3, r9
 8007332:	4639      	mov	r1, r7
 8007334:	f7f8 ff54 	bl	80001e0 <__aeabi_dsub>
 8007338:	462b      	mov	r3, r5
 800733a:	4622      	mov	r2, r4
 800733c:	f7f8 ff50 	bl	80001e0 <__aeabi_dsub>
 8007340:	9b02      	ldr	r3, [sp, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007348:	f6bf af0a 	bge.w	8007160 <__ieee754_rem_pio2+0x80>
 800734c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007350:	f8ca 3004 	str.w	r3, [sl, #4]
 8007354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007358:	f8ca 8000 	str.w	r8, [sl]
 800735c:	f8ca 0008 	str.w	r0, [sl, #8]
 8007360:	f8ca 300c 	str.w	r3, [sl, #12]
 8007364:	f1cb 0b00 	rsb	fp, fp, #0
 8007368:	e6fa      	b.n	8007160 <__ieee754_rem_pio2+0x80>
 800736a:	a327      	add	r3, pc, #156	; (adr r3, 8007408 <__ieee754_rem_pio2+0x328>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	ec51 0b18 	vmov	r0, r1, d8
 8007374:	f7f9 f8ec 	bl	8000550 <__aeabi_dmul>
 8007378:	4604      	mov	r4, r0
 800737a:	460d      	mov	r5, r1
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4640      	mov	r0, r8
 8007382:	4649      	mov	r1, r9
 8007384:	f7f8 ff2c 	bl	80001e0 <__aeabi_dsub>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4606      	mov	r6, r0
 800738e:	460f      	mov	r7, r1
 8007390:	4640      	mov	r0, r8
 8007392:	4649      	mov	r1, r9
 8007394:	f7f8 ff24 	bl	80001e0 <__aeabi_dsub>
 8007398:	4622      	mov	r2, r4
 800739a:	462b      	mov	r3, r5
 800739c:	f7f8 ff20 	bl	80001e0 <__aeabi_dsub>
 80073a0:	a31b      	add	r3, pc, #108	; (adr r3, 8007410 <__ieee754_rem_pio2+0x330>)
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	4604      	mov	r4, r0
 80073a8:	460d      	mov	r5, r1
 80073aa:	ec51 0b18 	vmov	r0, r1, d8
 80073ae:	f7f9 f8cf 	bl	8000550 <__aeabi_dmul>
 80073b2:	4622      	mov	r2, r4
 80073b4:	462b      	mov	r3, r5
 80073b6:	f7f8 ff13 	bl	80001e0 <__aeabi_dsub>
 80073ba:	4604      	mov	r4, r0
 80073bc:	460d      	mov	r5, r1
 80073be:	e75f      	b.n	8007280 <__ieee754_rem_pio2+0x1a0>
 80073c0:	4b1b      	ldr	r3, [pc, #108]	; (8007430 <__ieee754_rem_pio2+0x350>)
 80073c2:	4598      	cmp	r8, r3
 80073c4:	dd36      	ble.n	8007434 <__ieee754_rem_pio2+0x354>
 80073c6:	ee10 2a10 	vmov	r2, s0
 80073ca:	462b      	mov	r3, r5
 80073cc:	4620      	mov	r0, r4
 80073ce:	4629      	mov	r1, r5
 80073d0:	f7f8 ff06 	bl	80001e0 <__aeabi_dsub>
 80073d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80073d8:	e9ca 0100 	strd	r0, r1, [sl]
 80073dc:	e694      	b.n	8007108 <__ieee754_rem_pio2+0x28>
 80073de:	bf00      	nop
 80073e0:	54400000 	.word	0x54400000
 80073e4:	3ff921fb 	.word	0x3ff921fb
 80073e8:	1a626331 	.word	0x1a626331
 80073ec:	3dd0b461 	.word	0x3dd0b461
 80073f0:	1a600000 	.word	0x1a600000
 80073f4:	3dd0b461 	.word	0x3dd0b461
 80073f8:	2e037073 	.word	0x2e037073
 80073fc:	3ba3198a 	.word	0x3ba3198a
 8007400:	6dc9c883 	.word	0x6dc9c883
 8007404:	3fe45f30 	.word	0x3fe45f30
 8007408:	2e000000 	.word	0x2e000000
 800740c:	3ba3198a 	.word	0x3ba3198a
 8007410:	252049c1 	.word	0x252049c1
 8007414:	397b839a 	.word	0x397b839a
 8007418:	3fe921fb 	.word	0x3fe921fb
 800741c:	4002d97b 	.word	0x4002d97b
 8007420:	3ff921fb 	.word	0x3ff921fb
 8007424:	413921fb 	.word	0x413921fb
 8007428:	3fe00000 	.word	0x3fe00000
 800742c:	08008574 	.word	0x08008574
 8007430:	7fefffff 	.word	0x7fefffff
 8007434:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007438:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800743c:	ee10 0a10 	vmov	r0, s0
 8007440:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007444:	ee10 6a10 	vmov	r6, s0
 8007448:	460f      	mov	r7, r1
 800744a:	f7f9 fb1b 	bl	8000a84 <__aeabi_d2iz>
 800744e:	f7f9 f815 	bl	800047c <__aeabi_i2d>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4630      	mov	r0, r6
 8007458:	4639      	mov	r1, r7
 800745a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800745e:	f7f8 febf 	bl	80001e0 <__aeabi_dsub>
 8007462:	4b23      	ldr	r3, [pc, #140]	; (80074f0 <__ieee754_rem_pio2+0x410>)
 8007464:	2200      	movs	r2, #0
 8007466:	f7f9 f873 	bl	8000550 <__aeabi_dmul>
 800746a:	460f      	mov	r7, r1
 800746c:	4606      	mov	r6, r0
 800746e:	f7f9 fb09 	bl	8000a84 <__aeabi_d2iz>
 8007472:	f7f9 f803 	bl	800047c <__aeabi_i2d>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4630      	mov	r0, r6
 800747c:	4639      	mov	r1, r7
 800747e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007482:	f7f8 fead 	bl	80001e0 <__aeabi_dsub>
 8007486:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <__ieee754_rem_pio2+0x410>)
 8007488:	2200      	movs	r2, #0
 800748a:	f7f9 f861 	bl	8000550 <__aeabi_dmul>
 800748e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007492:	ad04      	add	r5, sp, #16
 8007494:	f04f 0803 	mov.w	r8, #3
 8007498:	46a9      	mov	r9, r5
 800749a:	2600      	movs	r6, #0
 800749c:	2700      	movs	r7, #0
 800749e:	4632      	mov	r2, r6
 80074a0:	463b      	mov	r3, r7
 80074a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80074a6:	46c3      	mov	fp, r8
 80074a8:	3d08      	subs	r5, #8
 80074aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80074ae:	f7f9 fab7 	bl	8000a20 <__aeabi_dcmpeq>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d1f3      	bne.n	800749e <__ieee754_rem_pio2+0x3be>
 80074b6:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <__ieee754_rem_pio2+0x414>)
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	2302      	movs	r3, #2
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	4622      	mov	r2, r4
 80074c0:	465b      	mov	r3, fp
 80074c2:	4651      	mov	r1, sl
 80074c4:	4648      	mov	r0, r9
 80074c6:	f000 f9db 	bl	8007880 <__kernel_rem_pio2>
 80074ca:	9b02      	ldr	r3, [sp, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	4683      	mov	fp, r0
 80074d0:	f6bf ae46 	bge.w	8007160 <__ieee754_rem_pio2+0x80>
 80074d4:	e9da 2100 	ldrd	r2, r1, [sl]
 80074d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074dc:	e9ca 2300 	strd	r2, r3, [sl]
 80074e0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80074e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074e8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80074ec:	e73a      	b.n	8007364 <__ieee754_rem_pio2+0x284>
 80074ee:	bf00      	nop
 80074f0:	41700000 	.word	0x41700000
 80074f4:	080085f4 	.word	0x080085f4

080074f8 <__ieee754_acosf>:
 80074f8:	b508      	push	{r3, lr}
 80074fa:	ee10 3a10 	vmov	r3, s0
 80074fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007502:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007506:	ed2d 8b0c 	vpush	{d8-d13}
 800750a:	d10a      	bne.n	8007522 <__ieee754_acosf+0x2a>
 800750c:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80076a4 <__ieee754_acosf+0x1ac>
 8007510:	ed9f 8a65 	vldr	s16, [pc, #404]	; 80076a8 <__ieee754_acosf+0x1b0>
 8007514:	2b00      	cmp	r3, #0
 8007516:	bfd8      	it	le
 8007518:	eeb0 0a48 	vmovle.f32	s0, s16
 800751c:	ecbd 8b0c 	vpop	{d8-d13}
 8007520:	bd08      	pop	{r3, pc}
 8007522:	dd04      	ble.n	800752e <__ieee754_acosf+0x36>
 8007524:	ee30 8a40 	vsub.f32	s16, s0, s0
 8007528:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800752c:	e7f6      	b.n	800751c <__ieee754_acosf+0x24>
 800752e:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8007532:	da3c      	bge.n	80075ae <__ieee754_acosf+0xb6>
 8007534:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8007538:	f340 80b1 	ble.w	800769e <__ieee754_acosf+0x1a6>
 800753c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007540:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80076ac <__ieee754_acosf+0x1b4>
 8007544:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80076b0 <__ieee754_acosf+0x1b8>
 8007548:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 80076b4 <__ieee754_acosf+0x1bc>
 800754c:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 80076b8 <__ieee754_acosf+0x1c0>
 8007550:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007554:	eddf 6a59 	vldr	s13, [pc, #356]	; 80076bc <__ieee754_acosf+0x1c4>
 8007558:	eee7 6a27 	vfma.f32	s13, s14, s15
 800755c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80076c0 <__ieee754_acosf+0x1c8>
 8007560:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007564:	eddf 6a57 	vldr	s13, [pc, #348]	; 80076c4 <__ieee754_acosf+0x1cc>
 8007568:	eee7 6a27 	vfma.f32	s13, s14, s15
 800756c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80076c8 <__ieee754_acosf+0x1d0>
 8007570:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007574:	eddf 6a55 	vldr	s13, [pc, #340]	; 80076cc <__ieee754_acosf+0x1d4>
 8007578:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800757c:	eddf 6a54 	vldr	s13, [pc, #336]	; 80076d0 <__ieee754_acosf+0x1d8>
 8007580:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007584:	ed9f 6a53 	vldr	s12, [pc, #332]	; 80076d4 <__ieee754_acosf+0x1dc>
 8007588:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800758c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007590:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007598:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800759c:	eea0 8a67 	vfms.f32	s16, s0, s15
 80075a0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80076d8 <__ieee754_acosf+0x1e0>
 80075a4:	ee30 0a48 	vsub.f32	s0, s0, s16
 80075a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80075ac:	e7b6      	b.n	800751c <__ieee754_acosf+0x24>
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	eddf da3e 	vldr	s27, [pc, #248]	; 80076ac <__ieee754_acosf+0x1b4>
 80075b4:	eddf ca3e 	vldr	s25, [pc, #248]	; 80076b0 <__ieee754_acosf+0x1b8>
 80075b8:	ed9f ca40 	vldr	s24, [pc, #256]	; 80076bc <__ieee754_acosf+0x1c4>
 80075bc:	eddf ba40 	vldr	s23, [pc, #256]	; 80076c0 <__ieee754_acosf+0x1c8>
 80075c0:	ed9f ba40 	vldr	s22, [pc, #256]	; 80076c4 <__ieee754_acosf+0x1cc>
 80075c4:	eddf 8a40 	vldr	s17, [pc, #256]	; 80076c8 <__ieee754_acosf+0x1d0>
 80075c8:	ed9f da40 	vldr	s26, [pc, #256]	; 80076cc <__ieee754_acosf+0x1d4>
 80075cc:	eddf aa39 	vldr	s21, [pc, #228]	; 80076b4 <__ieee754_acosf+0x1bc>
 80075d0:	ed9f aa3f 	vldr	s20, [pc, #252]	; 80076d0 <__ieee754_acosf+0x1d8>
 80075d4:	eddf 9a3f 	vldr	s19, [pc, #252]	; 80076d4 <__ieee754_acosf+0x1dc>
 80075d8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80075dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80075e0:	da28      	bge.n	8007634 <__ieee754_acosf+0x13c>
 80075e2:	ee30 0a09 	vadd.f32	s0, s0, s18
 80075e6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80075ea:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80075ee:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80075f2:	eeac ca80 	vfma.f32	s24, s25, s0
 80075f6:	eeaa aa80 	vfma.f32	s20, s21, s0
 80075fa:	eeec ba00 	vfma.f32	s23, s24, s0
 80075fe:	eeea 9a00 	vfma.f32	s19, s20, s0
 8007602:	eeab ba80 	vfma.f32	s22, s23, s0
 8007606:	eea9 9a80 	vfma.f32	s18, s19, s0
 800760a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800760e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8007612:	f000 f869 	bl	80076e8 <__ieee754_sqrtf>
 8007616:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800761a:	eddf 7a30 	vldr	s15, [pc, #192]	; 80076dc <__ieee754_acosf+0x1e4>
 800761e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007622:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007626:	ee77 7a80 	vadd.f32	s15, s15, s0
 800762a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80076e0 <__ieee754_acosf+0x1e8>
 800762e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007632:	e773      	b.n	800751c <__ieee754_acosf+0x24>
 8007634:	ee39 8a40 	vsub.f32	s16, s18, s0
 8007638:	ee28 8a27 	vmul.f32	s16, s16, s15
 800763c:	eeb0 0a48 	vmov.f32	s0, s16
 8007640:	f000 f852 	bl	80076e8 <__ieee754_sqrtf>
 8007644:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8007648:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800764c:	eeac ca88 	vfma.f32	s24, s25, s16
 8007650:	eeaa aa88 	vfma.f32	s20, s21, s16
 8007654:	eeec ba08 	vfma.f32	s23, s24, s16
 8007658:	ee10 3a10 	vmov	r3, s0
 800765c:	eeab ba88 	vfma.f32	s22, s23, s16
 8007660:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007664:	f023 030f 	bic.w	r3, r3, #15
 8007668:	eeea 9a08 	vfma.f32	s19, s20, s16
 800766c:	ee07 3a90 	vmov	s15, r3
 8007670:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8007674:	eeb0 6a48 	vmov.f32	s12, s16
 8007678:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800767c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8007680:	ee70 6a27 	vadd.f32	s13, s0, s15
 8007684:	ee68 8a88 	vmul.f32	s17, s17, s16
 8007688:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800768c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8007690:	eea0 7a26 	vfma.f32	s14, s0, s13
 8007694:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007698:	ee30 0a00 	vadd.f32	s0, s0, s0
 800769c:	e73e      	b.n	800751c <__ieee754_acosf+0x24>
 800769e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80076e4 <__ieee754_acosf+0x1ec>
 80076a2:	e73b      	b.n	800751c <__ieee754_acosf+0x24>
 80076a4:	00000000 	.word	0x00000000
 80076a8:	40490fdb 	.word	0x40490fdb
 80076ac:	3811ef08 	.word	0x3811ef08
 80076b0:	3a4f7f04 	.word	0x3a4f7f04
 80076b4:	bf303361 	.word	0xbf303361
 80076b8:	33a22168 	.word	0x33a22168
 80076bc:	bd241146 	.word	0xbd241146
 80076c0:	3e4e0aa8 	.word	0x3e4e0aa8
 80076c4:	bea6b090 	.word	0xbea6b090
 80076c8:	3e2aaaab 	.word	0x3e2aaaab
 80076cc:	3d9dc62e 	.word	0x3d9dc62e
 80076d0:	4001572d 	.word	0x4001572d
 80076d4:	c019d139 	.word	0xc019d139
 80076d8:	3fc90fda 	.word	0x3fc90fda
 80076dc:	b3a22168 	.word	0xb3a22168
 80076e0:	40490fda 	.word	0x40490fda
 80076e4:	3fc90fdb 	.word	0x3fc90fdb

080076e8 <__ieee754_sqrtf>:
 80076e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80076ec:	4770      	bx	lr
	...

080076f0 <__kernel_cos>:
 80076f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	ec57 6b10 	vmov	r6, r7, d0
 80076f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80076fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007700:	ed8d 1b00 	vstr	d1, [sp]
 8007704:	da07      	bge.n	8007716 <__kernel_cos+0x26>
 8007706:	ee10 0a10 	vmov	r0, s0
 800770a:	4639      	mov	r1, r7
 800770c:	f7f9 f9ba 	bl	8000a84 <__aeabi_d2iz>
 8007710:	2800      	cmp	r0, #0
 8007712:	f000 8088 	beq.w	8007826 <__kernel_cos+0x136>
 8007716:	4632      	mov	r2, r6
 8007718:	463b      	mov	r3, r7
 800771a:	4630      	mov	r0, r6
 800771c:	4639      	mov	r1, r7
 800771e:	f7f8 ff17 	bl	8000550 <__aeabi_dmul>
 8007722:	4b51      	ldr	r3, [pc, #324]	; (8007868 <__kernel_cos+0x178>)
 8007724:	2200      	movs	r2, #0
 8007726:	4604      	mov	r4, r0
 8007728:	460d      	mov	r5, r1
 800772a:	f7f8 ff11 	bl	8000550 <__aeabi_dmul>
 800772e:	a340      	add	r3, pc, #256	; (adr r3, 8007830 <__kernel_cos+0x140>)
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	4682      	mov	sl, r0
 8007736:	468b      	mov	fp, r1
 8007738:	4620      	mov	r0, r4
 800773a:	4629      	mov	r1, r5
 800773c:	f7f8 ff08 	bl	8000550 <__aeabi_dmul>
 8007740:	a33d      	add	r3, pc, #244	; (adr r3, 8007838 <__kernel_cos+0x148>)
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	f7f8 fd4d 	bl	80001e4 <__adddf3>
 800774a:	4622      	mov	r2, r4
 800774c:	462b      	mov	r3, r5
 800774e:	f7f8 feff 	bl	8000550 <__aeabi_dmul>
 8007752:	a33b      	add	r3, pc, #236	; (adr r3, 8007840 <__kernel_cos+0x150>)
 8007754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007758:	f7f8 fd42 	bl	80001e0 <__aeabi_dsub>
 800775c:	4622      	mov	r2, r4
 800775e:	462b      	mov	r3, r5
 8007760:	f7f8 fef6 	bl	8000550 <__aeabi_dmul>
 8007764:	a338      	add	r3, pc, #224	; (adr r3, 8007848 <__kernel_cos+0x158>)
 8007766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776a:	f7f8 fd3b 	bl	80001e4 <__adddf3>
 800776e:	4622      	mov	r2, r4
 8007770:	462b      	mov	r3, r5
 8007772:	f7f8 feed 	bl	8000550 <__aeabi_dmul>
 8007776:	a336      	add	r3, pc, #216	; (adr r3, 8007850 <__kernel_cos+0x160>)
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	f7f8 fd30 	bl	80001e0 <__aeabi_dsub>
 8007780:	4622      	mov	r2, r4
 8007782:	462b      	mov	r3, r5
 8007784:	f7f8 fee4 	bl	8000550 <__aeabi_dmul>
 8007788:	a333      	add	r3, pc, #204	; (adr r3, 8007858 <__kernel_cos+0x168>)
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	f7f8 fd29 	bl	80001e4 <__adddf3>
 8007792:	4622      	mov	r2, r4
 8007794:	462b      	mov	r3, r5
 8007796:	f7f8 fedb 	bl	8000550 <__aeabi_dmul>
 800779a:	4622      	mov	r2, r4
 800779c:	462b      	mov	r3, r5
 800779e:	f7f8 fed7 	bl	8000550 <__aeabi_dmul>
 80077a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077a6:	4604      	mov	r4, r0
 80077a8:	460d      	mov	r5, r1
 80077aa:	4630      	mov	r0, r6
 80077ac:	4639      	mov	r1, r7
 80077ae:	f7f8 fecf 	bl	8000550 <__aeabi_dmul>
 80077b2:	460b      	mov	r3, r1
 80077b4:	4602      	mov	r2, r0
 80077b6:	4629      	mov	r1, r5
 80077b8:	4620      	mov	r0, r4
 80077ba:	f7f8 fd11 	bl	80001e0 <__aeabi_dsub>
 80077be:	4b2b      	ldr	r3, [pc, #172]	; (800786c <__kernel_cos+0x17c>)
 80077c0:	4598      	cmp	r8, r3
 80077c2:	4606      	mov	r6, r0
 80077c4:	460f      	mov	r7, r1
 80077c6:	dc10      	bgt.n	80077ea <__kernel_cos+0xfa>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4650      	mov	r0, sl
 80077ce:	4659      	mov	r1, fp
 80077d0:	f7f8 fd06 	bl	80001e0 <__aeabi_dsub>
 80077d4:	460b      	mov	r3, r1
 80077d6:	4926      	ldr	r1, [pc, #152]	; (8007870 <__kernel_cos+0x180>)
 80077d8:	4602      	mov	r2, r0
 80077da:	2000      	movs	r0, #0
 80077dc:	f7f8 fd00 	bl	80001e0 <__aeabi_dsub>
 80077e0:	ec41 0b10 	vmov	d0, r0, r1
 80077e4:	b003      	add	sp, #12
 80077e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ea:	4b22      	ldr	r3, [pc, #136]	; (8007874 <__kernel_cos+0x184>)
 80077ec:	4920      	ldr	r1, [pc, #128]	; (8007870 <__kernel_cos+0x180>)
 80077ee:	4598      	cmp	r8, r3
 80077f0:	bfcc      	ite	gt
 80077f2:	4d21      	ldrgt	r5, [pc, #132]	; (8007878 <__kernel_cos+0x188>)
 80077f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80077f8:	2400      	movs	r4, #0
 80077fa:	4622      	mov	r2, r4
 80077fc:	462b      	mov	r3, r5
 80077fe:	2000      	movs	r0, #0
 8007800:	f7f8 fcee 	bl	80001e0 <__aeabi_dsub>
 8007804:	4622      	mov	r2, r4
 8007806:	4680      	mov	r8, r0
 8007808:	4689      	mov	r9, r1
 800780a:	462b      	mov	r3, r5
 800780c:	4650      	mov	r0, sl
 800780e:	4659      	mov	r1, fp
 8007810:	f7f8 fce6 	bl	80001e0 <__aeabi_dsub>
 8007814:	4632      	mov	r2, r6
 8007816:	463b      	mov	r3, r7
 8007818:	f7f8 fce2 	bl	80001e0 <__aeabi_dsub>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4640      	mov	r0, r8
 8007822:	4649      	mov	r1, r9
 8007824:	e7da      	b.n	80077dc <__kernel_cos+0xec>
 8007826:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007860 <__kernel_cos+0x170>
 800782a:	e7db      	b.n	80077e4 <__kernel_cos+0xf4>
 800782c:	f3af 8000 	nop.w
 8007830:	be8838d4 	.word	0xbe8838d4
 8007834:	bda8fae9 	.word	0xbda8fae9
 8007838:	bdb4b1c4 	.word	0xbdb4b1c4
 800783c:	3e21ee9e 	.word	0x3e21ee9e
 8007840:	809c52ad 	.word	0x809c52ad
 8007844:	3e927e4f 	.word	0x3e927e4f
 8007848:	19cb1590 	.word	0x19cb1590
 800784c:	3efa01a0 	.word	0x3efa01a0
 8007850:	16c15177 	.word	0x16c15177
 8007854:	3f56c16c 	.word	0x3f56c16c
 8007858:	5555554c 	.word	0x5555554c
 800785c:	3fa55555 	.word	0x3fa55555
 8007860:	00000000 	.word	0x00000000
 8007864:	3ff00000 	.word	0x3ff00000
 8007868:	3fe00000 	.word	0x3fe00000
 800786c:	3fd33332 	.word	0x3fd33332
 8007870:	3ff00000 	.word	0x3ff00000
 8007874:	3fe90000 	.word	0x3fe90000
 8007878:	3fd20000 	.word	0x3fd20000
 800787c:	00000000 	.word	0x00000000

08007880 <__kernel_rem_pio2>:
 8007880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007884:	ed2d 8b02 	vpush	{d8}
 8007888:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800788c:	f112 0f14 	cmn.w	r2, #20
 8007890:	9308      	str	r3, [sp, #32]
 8007892:	9101      	str	r1, [sp, #4]
 8007894:	4bc4      	ldr	r3, [pc, #784]	; (8007ba8 <__kernel_rem_pio2+0x328>)
 8007896:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007898:	900b      	str	r0, [sp, #44]	; 0x2c
 800789a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800789e:	9302      	str	r3, [sp, #8]
 80078a0:	9b08      	ldr	r3, [sp, #32]
 80078a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80078a6:	bfa8      	it	ge
 80078a8:	1ed4      	subge	r4, r2, #3
 80078aa:	9306      	str	r3, [sp, #24]
 80078ac:	bfb2      	itee	lt
 80078ae:	2400      	movlt	r4, #0
 80078b0:	2318      	movge	r3, #24
 80078b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80078b6:	f06f 0317 	mvn.w	r3, #23
 80078ba:	fb04 3303 	mla	r3, r4, r3, r3
 80078be:	eb03 0a02 	add.w	sl, r3, r2
 80078c2:	9b02      	ldr	r3, [sp, #8]
 80078c4:	9a06      	ldr	r2, [sp, #24]
 80078c6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007b98 <__kernel_rem_pio2+0x318>
 80078ca:	eb03 0802 	add.w	r8, r3, r2
 80078ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80078d0:	1aa7      	subs	r7, r4, r2
 80078d2:	ae22      	add	r6, sp, #136	; 0x88
 80078d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80078d8:	2500      	movs	r5, #0
 80078da:	4545      	cmp	r5, r8
 80078dc:	dd13      	ble.n	8007906 <__kernel_rem_pio2+0x86>
 80078de:	9b08      	ldr	r3, [sp, #32]
 80078e0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007b98 <__kernel_rem_pio2+0x318>
 80078e4:	aa22      	add	r2, sp, #136	; 0x88
 80078e6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80078ea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80078ee:	f04f 0800 	mov.w	r8, #0
 80078f2:	9b02      	ldr	r3, [sp, #8]
 80078f4:	4598      	cmp	r8, r3
 80078f6:	dc2f      	bgt.n	8007958 <__kernel_rem_pio2+0xd8>
 80078f8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80078fc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007900:	462f      	mov	r7, r5
 8007902:	2600      	movs	r6, #0
 8007904:	e01b      	b.n	800793e <__kernel_rem_pio2+0xbe>
 8007906:	42ef      	cmn	r7, r5
 8007908:	d407      	bmi.n	800791a <__kernel_rem_pio2+0x9a>
 800790a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800790e:	f7f8 fdb5 	bl	800047c <__aeabi_i2d>
 8007912:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007916:	3501      	adds	r5, #1
 8007918:	e7df      	b.n	80078da <__kernel_rem_pio2+0x5a>
 800791a:	ec51 0b18 	vmov	r0, r1, d8
 800791e:	e7f8      	b.n	8007912 <__kernel_rem_pio2+0x92>
 8007920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007924:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007928:	f7f8 fe12 	bl	8000550 <__aeabi_dmul>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007934:	f7f8 fc56 	bl	80001e4 <__adddf3>
 8007938:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800793c:	3601      	adds	r6, #1
 800793e:	9b06      	ldr	r3, [sp, #24]
 8007940:	429e      	cmp	r6, r3
 8007942:	f1a7 0708 	sub.w	r7, r7, #8
 8007946:	ddeb      	ble.n	8007920 <__kernel_rem_pio2+0xa0>
 8007948:	ed9d 7b04 	vldr	d7, [sp, #16]
 800794c:	f108 0801 	add.w	r8, r8, #1
 8007950:	ecab 7b02 	vstmia	fp!, {d7}
 8007954:	3508      	adds	r5, #8
 8007956:	e7cc      	b.n	80078f2 <__kernel_rem_pio2+0x72>
 8007958:	9b02      	ldr	r3, [sp, #8]
 800795a:	aa0e      	add	r2, sp, #56	; 0x38
 800795c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007960:	930d      	str	r3, [sp, #52]	; 0x34
 8007962:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007964:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007968:	9c02      	ldr	r4, [sp, #8]
 800796a:	930c      	str	r3, [sp, #48]	; 0x30
 800796c:	00e3      	lsls	r3, r4, #3
 800796e:	930a      	str	r3, [sp, #40]	; 0x28
 8007970:	ab9a      	add	r3, sp, #616	; 0x268
 8007972:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007976:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800797a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800797e:	ab72      	add	r3, sp, #456	; 0x1c8
 8007980:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007984:	46c3      	mov	fp, r8
 8007986:	46a1      	mov	r9, r4
 8007988:	f1b9 0f00 	cmp.w	r9, #0
 800798c:	f1a5 0508 	sub.w	r5, r5, #8
 8007990:	dc77      	bgt.n	8007a82 <__kernel_rem_pio2+0x202>
 8007992:	ec47 6b10 	vmov	d0, r6, r7
 8007996:	4650      	mov	r0, sl
 8007998:	f000 fc02 	bl	80081a0 <scalbn>
 800799c:	ec57 6b10 	vmov	r6, r7, d0
 80079a0:	2200      	movs	r2, #0
 80079a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80079a6:	ee10 0a10 	vmov	r0, s0
 80079aa:	4639      	mov	r1, r7
 80079ac:	f7f8 fdd0 	bl	8000550 <__aeabi_dmul>
 80079b0:	ec41 0b10 	vmov	d0, r0, r1
 80079b4:	f000 fb74 	bl	80080a0 <floor>
 80079b8:	4b7c      	ldr	r3, [pc, #496]	; (8007bac <__kernel_rem_pio2+0x32c>)
 80079ba:	ec51 0b10 	vmov	r0, r1, d0
 80079be:	2200      	movs	r2, #0
 80079c0:	f7f8 fdc6 	bl	8000550 <__aeabi_dmul>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4630      	mov	r0, r6
 80079ca:	4639      	mov	r1, r7
 80079cc:	f7f8 fc08 	bl	80001e0 <__aeabi_dsub>
 80079d0:	460f      	mov	r7, r1
 80079d2:	4606      	mov	r6, r0
 80079d4:	f7f9 f856 	bl	8000a84 <__aeabi_d2iz>
 80079d8:	9004      	str	r0, [sp, #16]
 80079da:	f7f8 fd4f 	bl	800047c <__aeabi_i2d>
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4630      	mov	r0, r6
 80079e4:	4639      	mov	r1, r7
 80079e6:	f7f8 fbfb 	bl	80001e0 <__aeabi_dsub>
 80079ea:	f1ba 0f00 	cmp.w	sl, #0
 80079ee:	4606      	mov	r6, r0
 80079f0:	460f      	mov	r7, r1
 80079f2:	dd6d      	ble.n	8007ad0 <__kernel_rem_pio2+0x250>
 80079f4:	1e62      	subs	r2, r4, #1
 80079f6:	ab0e      	add	r3, sp, #56	; 0x38
 80079f8:	9d04      	ldr	r5, [sp, #16]
 80079fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80079fe:	f1ca 0118 	rsb	r1, sl, #24
 8007a02:	fa40 f301 	asr.w	r3, r0, r1
 8007a06:	441d      	add	r5, r3
 8007a08:	408b      	lsls	r3, r1
 8007a0a:	1ac0      	subs	r0, r0, r3
 8007a0c:	ab0e      	add	r3, sp, #56	; 0x38
 8007a0e:	9504      	str	r5, [sp, #16]
 8007a10:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007a14:	f1ca 0317 	rsb	r3, sl, #23
 8007a18:	fa40 fb03 	asr.w	fp, r0, r3
 8007a1c:	f1bb 0f00 	cmp.w	fp, #0
 8007a20:	dd65      	ble.n	8007aee <__kernel_rem_pio2+0x26e>
 8007a22:	9b04      	ldr	r3, [sp, #16]
 8007a24:	2200      	movs	r2, #0
 8007a26:	3301      	adds	r3, #1
 8007a28:	9304      	str	r3, [sp, #16]
 8007a2a:	4615      	mov	r5, r2
 8007a2c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007a30:	4294      	cmp	r4, r2
 8007a32:	f300 809c 	bgt.w	8007b6e <__kernel_rem_pio2+0x2ee>
 8007a36:	f1ba 0f00 	cmp.w	sl, #0
 8007a3a:	dd07      	ble.n	8007a4c <__kernel_rem_pio2+0x1cc>
 8007a3c:	f1ba 0f01 	cmp.w	sl, #1
 8007a40:	f000 80c0 	beq.w	8007bc4 <__kernel_rem_pio2+0x344>
 8007a44:	f1ba 0f02 	cmp.w	sl, #2
 8007a48:	f000 80c6 	beq.w	8007bd8 <__kernel_rem_pio2+0x358>
 8007a4c:	f1bb 0f02 	cmp.w	fp, #2
 8007a50:	d14d      	bne.n	8007aee <__kernel_rem_pio2+0x26e>
 8007a52:	4632      	mov	r2, r6
 8007a54:	463b      	mov	r3, r7
 8007a56:	4956      	ldr	r1, [pc, #344]	; (8007bb0 <__kernel_rem_pio2+0x330>)
 8007a58:	2000      	movs	r0, #0
 8007a5a:	f7f8 fbc1 	bl	80001e0 <__aeabi_dsub>
 8007a5e:	4606      	mov	r6, r0
 8007a60:	460f      	mov	r7, r1
 8007a62:	2d00      	cmp	r5, #0
 8007a64:	d043      	beq.n	8007aee <__kernel_rem_pio2+0x26e>
 8007a66:	4650      	mov	r0, sl
 8007a68:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007ba0 <__kernel_rem_pio2+0x320>
 8007a6c:	f000 fb98 	bl	80081a0 <scalbn>
 8007a70:	4630      	mov	r0, r6
 8007a72:	4639      	mov	r1, r7
 8007a74:	ec53 2b10 	vmov	r2, r3, d0
 8007a78:	f7f8 fbb2 	bl	80001e0 <__aeabi_dsub>
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	460f      	mov	r7, r1
 8007a80:	e035      	b.n	8007aee <__kernel_rem_pio2+0x26e>
 8007a82:	4b4c      	ldr	r3, [pc, #304]	; (8007bb4 <__kernel_rem_pio2+0x334>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	4630      	mov	r0, r6
 8007a88:	4639      	mov	r1, r7
 8007a8a:	f7f8 fd61 	bl	8000550 <__aeabi_dmul>
 8007a8e:	f7f8 fff9 	bl	8000a84 <__aeabi_d2iz>
 8007a92:	f7f8 fcf3 	bl	800047c <__aeabi_i2d>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	ec43 2b18 	vmov	d8, r2, r3
 8007a9e:	4b46      	ldr	r3, [pc, #280]	; (8007bb8 <__kernel_rem_pio2+0x338>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f7f8 fd55 	bl	8000550 <__aeabi_dmul>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4630      	mov	r0, r6
 8007aac:	4639      	mov	r1, r7
 8007aae:	f7f8 fb97 	bl	80001e0 <__aeabi_dsub>
 8007ab2:	f7f8 ffe7 	bl	8000a84 <__aeabi_d2iz>
 8007ab6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007aba:	f84b 0b04 	str.w	r0, [fp], #4
 8007abe:	ec51 0b18 	vmov	r0, r1, d8
 8007ac2:	f7f8 fb8f 	bl	80001e4 <__adddf3>
 8007ac6:	f109 39ff 	add.w	r9, r9, #4294967295
 8007aca:	4606      	mov	r6, r0
 8007acc:	460f      	mov	r7, r1
 8007ace:	e75b      	b.n	8007988 <__kernel_rem_pio2+0x108>
 8007ad0:	d106      	bne.n	8007ae0 <__kernel_rem_pio2+0x260>
 8007ad2:	1e63      	subs	r3, r4, #1
 8007ad4:	aa0e      	add	r2, sp, #56	; 0x38
 8007ad6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007ada:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007ade:	e79d      	b.n	8007a1c <__kernel_rem_pio2+0x19c>
 8007ae0:	4b36      	ldr	r3, [pc, #216]	; (8007bbc <__kernel_rem_pio2+0x33c>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f7f8 ffba 	bl	8000a5c <__aeabi_dcmpge>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d13d      	bne.n	8007b68 <__kernel_rem_pio2+0x2e8>
 8007aec:	4683      	mov	fp, r0
 8007aee:	2200      	movs	r2, #0
 8007af0:	2300      	movs	r3, #0
 8007af2:	4630      	mov	r0, r6
 8007af4:	4639      	mov	r1, r7
 8007af6:	f7f8 ff93 	bl	8000a20 <__aeabi_dcmpeq>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	f000 80c0 	beq.w	8007c80 <__kernel_rem_pio2+0x400>
 8007b00:	1e65      	subs	r5, r4, #1
 8007b02:	462b      	mov	r3, r5
 8007b04:	2200      	movs	r2, #0
 8007b06:	9902      	ldr	r1, [sp, #8]
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	da6c      	bge.n	8007be6 <__kernel_rem_pio2+0x366>
 8007b0c:	2a00      	cmp	r2, #0
 8007b0e:	f000 8089 	beq.w	8007c24 <__kernel_rem_pio2+0x3a4>
 8007b12:	ab0e      	add	r3, sp, #56	; 0x38
 8007b14:	f1aa 0a18 	sub.w	sl, sl, #24
 8007b18:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 80ad 	beq.w	8007c7c <__kernel_rem_pio2+0x3fc>
 8007b22:	4650      	mov	r0, sl
 8007b24:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007ba0 <__kernel_rem_pio2+0x320>
 8007b28:	f000 fb3a 	bl	80081a0 <scalbn>
 8007b2c:	ab9a      	add	r3, sp, #616	; 0x268
 8007b2e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007b32:	ec57 6b10 	vmov	r6, r7, d0
 8007b36:	00ec      	lsls	r4, r5, #3
 8007b38:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007b3c:	46aa      	mov	sl, r5
 8007b3e:	f1ba 0f00 	cmp.w	sl, #0
 8007b42:	f280 80d6 	bge.w	8007cf2 <__kernel_rem_pio2+0x472>
 8007b46:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007b98 <__kernel_rem_pio2+0x318>
 8007b4a:	462e      	mov	r6, r5
 8007b4c:	2e00      	cmp	r6, #0
 8007b4e:	f2c0 8104 	blt.w	8007d5a <__kernel_rem_pio2+0x4da>
 8007b52:	ab72      	add	r3, sp, #456	; 0x1c8
 8007b54:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007b58:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007bc0 <__kernel_rem_pio2+0x340>
 8007b5c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007b60:	f04f 0800 	mov.w	r8, #0
 8007b64:	1baf      	subs	r7, r5, r6
 8007b66:	e0ea      	b.n	8007d3e <__kernel_rem_pio2+0x4be>
 8007b68:	f04f 0b02 	mov.w	fp, #2
 8007b6c:	e759      	b.n	8007a22 <__kernel_rem_pio2+0x1a2>
 8007b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b72:	b955      	cbnz	r5, 8007b8a <__kernel_rem_pio2+0x30a>
 8007b74:	b123      	cbz	r3, 8007b80 <__kernel_rem_pio2+0x300>
 8007b76:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007b7a:	f8c8 3000 	str.w	r3, [r8]
 8007b7e:	2301      	movs	r3, #1
 8007b80:	3201      	adds	r2, #1
 8007b82:	f108 0804 	add.w	r8, r8, #4
 8007b86:	461d      	mov	r5, r3
 8007b88:	e752      	b.n	8007a30 <__kernel_rem_pio2+0x1b0>
 8007b8a:	1acb      	subs	r3, r1, r3
 8007b8c:	f8c8 3000 	str.w	r3, [r8]
 8007b90:	462b      	mov	r3, r5
 8007b92:	e7f5      	b.n	8007b80 <__kernel_rem_pio2+0x300>
 8007b94:	f3af 8000 	nop.w
	...
 8007ba4:	3ff00000 	.word	0x3ff00000
 8007ba8:	08008740 	.word	0x08008740
 8007bac:	40200000 	.word	0x40200000
 8007bb0:	3ff00000 	.word	0x3ff00000
 8007bb4:	3e700000 	.word	0x3e700000
 8007bb8:	41700000 	.word	0x41700000
 8007bbc:	3fe00000 	.word	0x3fe00000
 8007bc0:	08008700 	.word	0x08008700
 8007bc4:	1e62      	subs	r2, r4, #1
 8007bc6:	ab0e      	add	r3, sp, #56	; 0x38
 8007bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bcc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007bd0:	a90e      	add	r1, sp, #56	; 0x38
 8007bd2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007bd6:	e739      	b.n	8007a4c <__kernel_rem_pio2+0x1cc>
 8007bd8:	1e62      	subs	r2, r4, #1
 8007bda:	ab0e      	add	r3, sp, #56	; 0x38
 8007bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007be4:	e7f4      	b.n	8007bd0 <__kernel_rem_pio2+0x350>
 8007be6:	a90e      	add	r1, sp, #56	; 0x38
 8007be8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	e789      	b.n	8007b06 <__kernel_rem_pio2+0x286>
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007bf8:	2900      	cmp	r1, #0
 8007bfa:	d0fa      	beq.n	8007bf2 <__kernel_rem_pio2+0x372>
 8007bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bfe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007c02:	446a      	add	r2, sp
 8007c04:	3a98      	subs	r2, #152	; 0x98
 8007c06:	920a      	str	r2, [sp, #40]	; 0x28
 8007c08:	9a08      	ldr	r2, [sp, #32]
 8007c0a:	18e3      	adds	r3, r4, r3
 8007c0c:	18a5      	adds	r5, r4, r2
 8007c0e:	aa22      	add	r2, sp, #136	; 0x88
 8007c10:	f104 0801 	add.w	r8, r4, #1
 8007c14:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007c18:	9304      	str	r3, [sp, #16]
 8007c1a:	9b04      	ldr	r3, [sp, #16]
 8007c1c:	4543      	cmp	r3, r8
 8007c1e:	da04      	bge.n	8007c2a <__kernel_rem_pio2+0x3aa>
 8007c20:	461c      	mov	r4, r3
 8007c22:	e6a3      	b.n	800796c <__kernel_rem_pio2+0xec>
 8007c24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c26:	2301      	movs	r3, #1
 8007c28:	e7e4      	b.n	8007bf4 <__kernel_rem_pio2+0x374>
 8007c2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c2c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007c30:	f7f8 fc24 	bl	800047c <__aeabi_i2d>
 8007c34:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c3a:	46ab      	mov	fp, r5
 8007c3c:	461c      	mov	r4, r3
 8007c3e:	f04f 0900 	mov.w	r9, #0
 8007c42:	2600      	movs	r6, #0
 8007c44:	2700      	movs	r7, #0
 8007c46:	9b06      	ldr	r3, [sp, #24]
 8007c48:	4599      	cmp	r9, r3
 8007c4a:	dd06      	ble.n	8007c5a <__kernel_rem_pio2+0x3da>
 8007c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c4e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007c52:	f108 0801 	add.w	r8, r8, #1
 8007c56:	930a      	str	r3, [sp, #40]	; 0x28
 8007c58:	e7df      	b.n	8007c1a <__kernel_rem_pio2+0x39a>
 8007c5a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007c5e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007c62:	f7f8 fc75 	bl	8000550 <__aeabi_dmul>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	f7f8 fab9 	bl	80001e4 <__adddf3>
 8007c72:	f109 0901 	add.w	r9, r9, #1
 8007c76:	4606      	mov	r6, r0
 8007c78:	460f      	mov	r7, r1
 8007c7a:	e7e4      	b.n	8007c46 <__kernel_rem_pio2+0x3c6>
 8007c7c:	3d01      	subs	r5, #1
 8007c7e:	e748      	b.n	8007b12 <__kernel_rem_pio2+0x292>
 8007c80:	ec47 6b10 	vmov	d0, r6, r7
 8007c84:	f1ca 0000 	rsb	r0, sl, #0
 8007c88:	f000 fa8a 	bl	80081a0 <scalbn>
 8007c8c:	ec57 6b10 	vmov	r6, r7, d0
 8007c90:	4ba0      	ldr	r3, [pc, #640]	; (8007f14 <__kernel_rem_pio2+0x694>)
 8007c92:	ee10 0a10 	vmov	r0, s0
 8007c96:	2200      	movs	r2, #0
 8007c98:	4639      	mov	r1, r7
 8007c9a:	f7f8 fedf 	bl	8000a5c <__aeabi_dcmpge>
 8007c9e:	b1f8      	cbz	r0, 8007ce0 <__kernel_rem_pio2+0x460>
 8007ca0:	4b9d      	ldr	r3, [pc, #628]	; (8007f18 <__kernel_rem_pio2+0x698>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	f7f8 fc52 	bl	8000550 <__aeabi_dmul>
 8007cac:	f7f8 feea 	bl	8000a84 <__aeabi_d2iz>
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	f7f8 fbe3 	bl	800047c <__aeabi_i2d>
 8007cb6:	4b97      	ldr	r3, [pc, #604]	; (8007f14 <__kernel_rem_pio2+0x694>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f7f8 fc49 	bl	8000550 <__aeabi_dmul>
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	f7f8 fa8b 	bl	80001e0 <__aeabi_dsub>
 8007cca:	f7f8 fedb 	bl	8000a84 <__aeabi_d2iz>
 8007cce:	1c65      	adds	r5, r4, #1
 8007cd0:	ab0e      	add	r3, sp, #56	; 0x38
 8007cd2:	f10a 0a18 	add.w	sl, sl, #24
 8007cd6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007cda:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007cde:	e720      	b.n	8007b22 <__kernel_rem_pio2+0x2a2>
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	f7f8 fece 	bl	8000a84 <__aeabi_d2iz>
 8007ce8:	ab0e      	add	r3, sp, #56	; 0x38
 8007cea:	4625      	mov	r5, r4
 8007cec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007cf0:	e717      	b.n	8007b22 <__kernel_rem_pio2+0x2a2>
 8007cf2:	ab0e      	add	r3, sp, #56	; 0x38
 8007cf4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007cf8:	f7f8 fbc0 	bl	800047c <__aeabi_i2d>
 8007cfc:	4632      	mov	r2, r6
 8007cfe:	463b      	mov	r3, r7
 8007d00:	f7f8 fc26 	bl	8000550 <__aeabi_dmul>
 8007d04:	4b84      	ldr	r3, [pc, #528]	; (8007f18 <__kernel_rem_pio2+0x698>)
 8007d06:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	4639      	mov	r1, r7
 8007d10:	f7f8 fc1e 	bl	8000550 <__aeabi_dmul>
 8007d14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d18:	4606      	mov	r6, r0
 8007d1a:	460f      	mov	r7, r1
 8007d1c:	e70f      	b.n	8007b3e <__kernel_rem_pio2+0x2be>
 8007d1e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007d22:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007d26:	f7f8 fc13 	bl	8000550 <__aeabi_dmul>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d32:	f7f8 fa57 	bl	80001e4 <__adddf3>
 8007d36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d3a:	f108 0801 	add.w	r8, r8, #1
 8007d3e:	9b02      	ldr	r3, [sp, #8]
 8007d40:	4598      	cmp	r8, r3
 8007d42:	dc01      	bgt.n	8007d48 <__kernel_rem_pio2+0x4c8>
 8007d44:	45b8      	cmp	r8, r7
 8007d46:	ddea      	ble.n	8007d1e <__kernel_rem_pio2+0x49e>
 8007d48:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007d4c:	ab4a      	add	r3, sp, #296	; 0x128
 8007d4e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007d52:	ed87 7b00 	vstr	d7, [r7]
 8007d56:	3e01      	subs	r6, #1
 8007d58:	e6f8      	b.n	8007b4c <__kernel_rem_pio2+0x2cc>
 8007d5a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	dc0b      	bgt.n	8007d78 <__kernel_rem_pio2+0x4f8>
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	dc35      	bgt.n	8007dd0 <__kernel_rem_pio2+0x550>
 8007d64:	d059      	beq.n	8007e1a <__kernel_rem_pio2+0x59a>
 8007d66:	9b04      	ldr	r3, [sp, #16]
 8007d68:	f003 0007 	and.w	r0, r3, #7
 8007d6c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007d70:	ecbd 8b02 	vpop	{d8}
 8007d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d78:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d1f3      	bne.n	8007d66 <__kernel_rem_pio2+0x4e6>
 8007d7e:	ab4a      	add	r3, sp, #296	; 0x128
 8007d80:	4423      	add	r3, r4
 8007d82:	9306      	str	r3, [sp, #24]
 8007d84:	461c      	mov	r4, r3
 8007d86:	469a      	mov	sl, r3
 8007d88:	9502      	str	r5, [sp, #8]
 8007d8a:	9b02      	ldr	r3, [sp, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f1aa 0a08 	sub.w	sl, sl, #8
 8007d92:	dc6b      	bgt.n	8007e6c <__kernel_rem_pio2+0x5ec>
 8007d94:	46aa      	mov	sl, r5
 8007d96:	f1ba 0f01 	cmp.w	sl, #1
 8007d9a:	f1a4 0408 	sub.w	r4, r4, #8
 8007d9e:	f300 8085 	bgt.w	8007eac <__kernel_rem_pio2+0x62c>
 8007da2:	9c06      	ldr	r4, [sp, #24]
 8007da4:	2000      	movs	r0, #0
 8007da6:	3408      	adds	r4, #8
 8007da8:	2100      	movs	r1, #0
 8007daa:	2d01      	cmp	r5, #1
 8007dac:	f300 809d 	bgt.w	8007eea <__kernel_rem_pio2+0x66a>
 8007db0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007db4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007db8:	f1bb 0f00 	cmp.w	fp, #0
 8007dbc:	f040 809b 	bne.w	8007ef6 <__kernel_rem_pio2+0x676>
 8007dc0:	9b01      	ldr	r3, [sp, #4]
 8007dc2:	e9c3 5600 	strd	r5, r6, [r3]
 8007dc6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007dca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007dce:	e7ca      	b.n	8007d66 <__kernel_rem_pio2+0x4e6>
 8007dd0:	3408      	adds	r4, #8
 8007dd2:	ab4a      	add	r3, sp, #296	; 0x128
 8007dd4:	441c      	add	r4, r3
 8007dd6:	462e      	mov	r6, r5
 8007dd8:	2000      	movs	r0, #0
 8007dda:	2100      	movs	r1, #0
 8007ddc:	2e00      	cmp	r6, #0
 8007dde:	da36      	bge.n	8007e4e <__kernel_rem_pio2+0x5ce>
 8007de0:	f1bb 0f00 	cmp.w	fp, #0
 8007de4:	d039      	beq.n	8007e5a <__kernel_rem_pio2+0x5da>
 8007de6:	4602      	mov	r2, r0
 8007de8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dec:	9c01      	ldr	r4, [sp, #4]
 8007dee:	e9c4 2300 	strd	r2, r3, [r4]
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007dfa:	f7f8 f9f1 	bl	80001e0 <__aeabi_dsub>
 8007dfe:	ae4c      	add	r6, sp, #304	; 0x130
 8007e00:	2401      	movs	r4, #1
 8007e02:	42a5      	cmp	r5, r4
 8007e04:	da2c      	bge.n	8007e60 <__kernel_rem_pio2+0x5e0>
 8007e06:	f1bb 0f00 	cmp.w	fp, #0
 8007e0a:	d002      	beq.n	8007e12 <__kernel_rem_pio2+0x592>
 8007e0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e10:	4619      	mov	r1, r3
 8007e12:	9b01      	ldr	r3, [sp, #4]
 8007e14:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007e18:	e7a5      	b.n	8007d66 <__kernel_rem_pio2+0x4e6>
 8007e1a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007e1e:	eb0d 0403 	add.w	r4, sp, r3
 8007e22:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007e26:	2000      	movs	r0, #0
 8007e28:	2100      	movs	r1, #0
 8007e2a:	2d00      	cmp	r5, #0
 8007e2c:	da09      	bge.n	8007e42 <__kernel_rem_pio2+0x5c2>
 8007e2e:	f1bb 0f00 	cmp.w	fp, #0
 8007e32:	d002      	beq.n	8007e3a <__kernel_rem_pio2+0x5ba>
 8007e34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e38:	4619      	mov	r1, r3
 8007e3a:	9b01      	ldr	r3, [sp, #4]
 8007e3c:	e9c3 0100 	strd	r0, r1, [r3]
 8007e40:	e791      	b.n	8007d66 <__kernel_rem_pio2+0x4e6>
 8007e42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007e46:	f7f8 f9cd 	bl	80001e4 <__adddf3>
 8007e4a:	3d01      	subs	r5, #1
 8007e4c:	e7ed      	b.n	8007e2a <__kernel_rem_pio2+0x5aa>
 8007e4e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007e52:	f7f8 f9c7 	bl	80001e4 <__adddf3>
 8007e56:	3e01      	subs	r6, #1
 8007e58:	e7c0      	b.n	8007ddc <__kernel_rem_pio2+0x55c>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	e7c5      	b.n	8007dec <__kernel_rem_pio2+0x56c>
 8007e60:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007e64:	f7f8 f9be 	bl	80001e4 <__adddf3>
 8007e68:	3401      	adds	r4, #1
 8007e6a:	e7ca      	b.n	8007e02 <__kernel_rem_pio2+0x582>
 8007e6c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e70:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007e74:	9b02      	ldr	r3, [sp, #8]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	9302      	str	r3, [sp, #8]
 8007e7a:	4632      	mov	r2, r6
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f7f8 f9af 	bl	80001e4 <__adddf3>
 8007e86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4640      	mov	r0, r8
 8007e90:	4649      	mov	r1, r9
 8007e92:	f7f8 f9a5 	bl	80001e0 <__aeabi_dsub>
 8007e96:	4632      	mov	r2, r6
 8007e98:	463b      	mov	r3, r7
 8007e9a:	f7f8 f9a3 	bl	80001e4 <__adddf3>
 8007e9e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007ea2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ea6:	ed8a 7b00 	vstr	d7, [sl]
 8007eaa:	e76e      	b.n	8007d8a <__kernel_rem_pio2+0x50a>
 8007eac:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007eb0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007eb4:	4640      	mov	r0, r8
 8007eb6:	4632      	mov	r2, r6
 8007eb8:	463b      	mov	r3, r7
 8007eba:	4649      	mov	r1, r9
 8007ebc:	f7f8 f992 	bl	80001e4 <__adddf3>
 8007ec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4640      	mov	r0, r8
 8007eca:	4649      	mov	r1, r9
 8007ecc:	f7f8 f988 	bl	80001e0 <__aeabi_dsub>
 8007ed0:	4632      	mov	r2, r6
 8007ed2:	463b      	mov	r3, r7
 8007ed4:	f7f8 f986 	bl	80001e4 <__adddf3>
 8007ed8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007edc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ee0:	ed84 7b00 	vstr	d7, [r4]
 8007ee4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ee8:	e755      	b.n	8007d96 <__kernel_rem_pio2+0x516>
 8007eea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007eee:	f7f8 f979 	bl	80001e4 <__adddf3>
 8007ef2:	3d01      	subs	r5, #1
 8007ef4:	e759      	b.n	8007daa <__kernel_rem_pio2+0x52a>
 8007ef6:	9b01      	ldr	r3, [sp, #4]
 8007ef8:	9a01      	ldr	r2, [sp, #4]
 8007efa:	601d      	str	r5, [r3, #0]
 8007efc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007f00:	605c      	str	r4, [r3, #4]
 8007f02:	609f      	str	r7, [r3, #8]
 8007f04:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007f08:	60d3      	str	r3, [r2, #12]
 8007f0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f0e:	6110      	str	r0, [r2, #16]
 8007f10:	6153      	str	r3, [r2, #20]
 8007f12:	e728      	b.n	8007d66 <__kernel_rem_pio2+0x4e6>
 8007f14:	41700000 	.word	0x41700000
 8007f18:	3e700000 	.word	0x3e700000
 8007f1c:	00000000 	.word	0x00000000

08007f20 <__kernel_sin>:
 8007f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f24:	ed2d 8b04 	vpush	{d8-d9}
 8007f28:	eeb0 8a41 	vmov.f32	s16, s2
 8007f2c:	eef0 8a61 	vmov.f32	s17, s3
 8007f30:	ec55 4b10 	vmov	r4, r5, d0
 8007f34:	b083      	sub	sp, #12
 8007f36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007f3a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007f3e:	9001      	str	r0, [sp, #4]
 8007f40:	da06      	bge.n	8007f50 <__kernel_sin+0x30>
 8007f42:	ee10 0a10 	vmov	r0, s0
 8007f46:	4629      	mov	r1, r5
 8007f48:	f7f8 fd9c 	bl	8000a84 <__aeabi_d2iz>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d051      	beq.n	8007ff4 <__kernel_sin+0xd4>
 8007f50:	4622      	mov	r2, r4
 8007f52:	462b      	mov	r3, r5
 8007f54:	4620      	mov	r0, r4
 8007f56:	4629      	mov	r1, r5
 8007f58:	f7f8 fafa 	bl	8000550 <__aeabi_dmul>
 8007f5c:	4682      	mov	sl, r0
 8007f5e:	468b      	mov	fp, r1
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4620      	mov	r0, r4
 8007f66:	4629      	mov	r1, r5
 8007f68:	f7f8 faf2 	bl	8000550 <__aeabi_dmul>
 8007f6c:	a341      	add	r3, pc, #260	; (adr r3, 8008074 <__kernel_sin+0x154>)
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	4680      	mov	r8, r0
 8007f74:	4689      	mov	r9, r1
 8007f76:	4650      	mov	r0, sl
 8007f78:	4659      	mov	r1, fp
 8007f7a:	f7f8 fae9 	bl	8000550 <__aeabi_dmul>
 8007f7e:	a33f      	add	r3, pc, #252	; (adr r3, 800807c <__kernel_sin+0x15c>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f7f8 f92c 	bl	80001e0 <__aeabi_dsub>
 8007f88:	4652      	mov	r2, sl
 8007f8a:	465b      	mov	r3, fp
 8007f8c:	f7f8 fae0 	bl	8000550 <__aeabi_dmul>
 8007f90:	a33c      	add	r3, pc, #240	; (adr r3, 8008084 <__kernel_sin+0x164>)
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f7f8 f925 	bl	80001e4 <__adddf3>
 8007f9a:	4652      	mov	r2, sl
 8007f9c:	465b      	mov	r3, fp
 8007f9e:	f7f8 fad7 	bl	8000550 <__aeabi_dmul>
 8007fa2:	a33a      	add	r3, pc, #232	; (adr r3, 800808c <__kernel_sin+0x16c>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f7f8 f91a 	bl	80001e0 <__aeabi_dsub>
 8007fac:	4652      	mov	r2, sl
 8007fae:	465b      	mov	r3, fp
 8007fb0:	f7f8 face 	bl	8000550 <__aeabi_dmul>
 8007fb4:	a337      	add	r3, pc, #220	; (adr r3, 8008094 <__kernel_sin+0x174>)
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f7f8 f913 	bl	80001e4 <__adddf3>
 8007fbe:	9b01      	ldr	r3, [sp, #4]
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	460f      	mov	r7, r1
 8007fc4:	b9eb      	cbnz	r3, 8008002 <__kernel_sin+0xe2>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4650      	mov	r0, sl
 8007fcc:	4659      	mov	r1, fp
 8007fce:	f7f8 fabf 	bl	8000550 <__aeabi_dmul>
 8007fd2:	a325      	add	r3, pc, #148	; (adr r3, 8008068 <__kernel_sin+0x148>)
 8007fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd8:	f7f8 f902 	bl	80001e0 <__aeabi_dsub>
 8007fdc:	4642      	mov	r2, r8
 8007fde:	464b      	mov	r3, r9
 8007fe0:	f7f8 fab6 	bl	8000550 <__aeabi_dmul>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4620      	mov	r0, r4
 8007fea:	4629      	mov	r1, r5
 8007fec:	f7f8 f8fa 	bl	80001e4 <__adddf3>
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	460d      	mov	r5, r1
 8007ff4:	ec45 4b10 	vmov	d0, r4, r5
 8007ff8:	b003      	add	sp, #12
 8007ffa:	ecbd 8b04 	vpop	{d8-d9}
 8007ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008002:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <__kernel_sin+0x150>)
 8008004:	ec51 0b18 	vmov	r0, r1, d8
 8008008:	2200      	movs	r2, #0
 800800a:	f7f8 faa1 	bl	8000550 <__aeabi_dmul>
 800800e:	4632      	mov	r2, r6
 8008010:	ec41 0b19 	vmov	d9, r0, r1
 8008014:	463b      	mov	r3, r7
 8008016:	4640      	mov	r0, r8
 8008018:	4649      	mov	r1, r9
 800801a:	f7f8 fa99 	bl	8000550 <__aeabi_dmul>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	ec51 0b19 	vmov	r0, r1, d9
 8008026:	f7f8 f8db 	bl	80001e0 <__aeabi_dsub>
 800802a:	4652      	mov	r2, sl
 800802c:	465b      	mov	r3, fp
 800802e:	f7f8 fa8f 	bl	8000550 <__aeabi_dmul>
 8008032:	ec53 2b18 	vmov	r2, r3, d8
 8008036:	f7f8 f8d3 	bl	80001e0 <__aeabi_dsub>
 800803a:	a30b      	add	r3, pc, #44	; (adr r3, 8008068 <__kernel_sin+0x148>)
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	4606      	mov	r6, r0
 8008042:	460f      	mov	r7, r1
 8008044:	4640      	mov	r0, r8
 8008046:	4649      	mov	r1, r9
 8008048:	f7f8 fa82 	bl	8000550 <__aeabi_dmul>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4630      	mov	r0, r6
 8008052:	4639      	mov	r1, r7
 8008054:	f7f8 f8c6 	bl	80001e4 <__adddf3>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4620      	mov	r0, r4
 800805e:	4629      	mov	r1, r5
 8008060:	f7f8 f8be 	bl	80001e0 <__aeabi_dsub>
 8008064:	e7c4      	b.n	8007ff0 <__kernel_sin+0xd0>
 8008066:	bf00      	nop
 8008068:	55555549 	.word	0x55555549
 800806c:	3fc55555 	.word	0x3fc55555
 8008070:	3fe00000 	.word	0x3fe00000
 8008074:	5acfd57c 	.word	0x5acfd57c
 8008078:	3de5d93a 	.word	0x3de5d93a
 800807c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008080:	3e5ae5e6 	.word	0x3e5ae5e6
 8008084:	57b1fe7d 	.word	0x57b1fe7d
 8008088:	3ec71de3 	.word	0x3ec71de3
 800808c:	19c161d5 	.word	0x19c161d5
 8008090:	3f2a01a0 	.word	0x3f2a01a0
 8008094:	1110f8a6 	.word	0x1110f8a6
 8008098:	3f811111 	.word	0x3f811111
 800809c:	00000000 	.word	0x00000000

080080a0 <floor>:
 80080a0:	ec51 0b10 	vmov	r0, r1, d0
 80080a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80080ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80080b0:	2e13      	cmp	r6, #19
 80080b2:	ee10 5a10 	vmov	r5, s0
 80080b6:	ee10 8a10 	vmov	r8, s0
 80080ba:	460c      	mov	r4, r1
 80080bc:	dc32      	bgt.n	8008124 <floor+0x84>
 80080be:	2e00      	cmp	r6, #0
 80080c0:	da14      	bge.n	80080ec <floor+0x4c>
 80080c2:	a333      	add	r3, pc, #204	; (adr r3, 8008190 <floor+0xf0>)
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	f7f8 f88c 	bl	80001e4 <__adddf3>
 80080cc:	2200      	movs	r2, #0
 80080ce:	2300      	movs	r3, #0
 80080d0:	f7f8 fcce 	bl	8000a70 <__aeabi_dcmpgt>
 80080d4:	b138      	cbz	r0, 80080e6 <floor+0x46>
 80080d6:	2c00      	cmp	r4, #0
 80080d8:	da57      	bge.n	800818a <floor+0xea>
 80080da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80080de:	431d      	orrs	r5, r3
 80080e0:	d001      	beq.n	80080e6 <floor+0x46>
 80080e2:	4c2d      	ldr	r4, [pc, #180]	; (8008198 <floor+0xf8>)
 80080e4:	2500      	movs	r5, #0
 80080e6:	4621      	mov	r1, r4
 80080e8:	4628      	mov	r0, r5
 80080ea:	e025      	b.n	8008138 <floor+0x98>
 80080ec:	4f2b      	ldr	r7, [pc, #172]	; (800819c <floor+0xfc>)
 80080ee:	4137      	asrs	r7, r6
 80080f0:	ea01 0307 	and.w	r3, r1, r7
 80080f4:	4303      	orrs	r3, r0
 80080f6:	d01f      	beq.n	8008138 <floor+0x98>
 80080f8:	a325      	add	r3, pc, #148	; (adr r3, 8008190 <floor+0xf0>)
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	f7f8 f871 	bl	80001e4 <__adddf3>
 8008102:	2200      	movs	r2, #0
 8008104:	2300      	movs	r3, #0
 8008106:	f7f8 fcb3 	bl	8000a70 <__aeabi_dcmpgt>
 800810a:	2800      	cmp	r0, #0
 800810c:	d0eb      	beq.n	80080e6 <floor+0x46>
 800810e:	2c00      	cmp	r4, #0
 8008110:	bfbe      	ittt	lt
 8008112:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008116:	fa43 f606 	asrlt.w	r6, r3, r6
 800811a:	19a4      	addlt	r4, r4, r6
 800811c:	ea24 0407 	bic.w	r4, r4, r7
 8008120:	2500      	movs	r5, #0
 8008122:	e7e0      	b.n	80080e6 <floor+0x46>
 8008124:	2e33      	cmp	r6, #51	; 0x33
 8008126:	dd0b      	ble.n	8008140 <floor+0xa0>
 8008128:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800812c:	d104      	bne.n	8008138 <floor+0x98>
 800812e:	ee10 2a10 	vmov	r2, s0
 8008132:	460b      	mov	r3, r1
 8008134:	f7f8 f856 	bl	80001e4 <__adddf3>
 8008138:	ec41 0b10 	vmov	d0, r0, r1
 800813c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008140:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008144:	f04f 33ff 	mov.w	r3, #4294967295
 8008148:	fa23 f707 	lsr.w	r7, r3, r7
 800814c:	4207      	tst	r7, r0
 800814e:	d0f3      	beq.n	8008138 <floor+0x98>
 8008150:	a30f      	add	r3, pc, #60	; (adr r3, 8008190 <floor+0xf0>)
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	f7f8 f845 	bl	80001e4 <__adddf3>
 800815a:	2200      	movs	r2, #0
 800815c:	2300      	movs	r3, #0
 800815e:	f7f8 fc87 	bl	8000a70 <__aeabi_dcmpgt>
 8008162:	2800      	cmp	r0, #0
 8008164:	d0bf      	beq.n	80080e6 <floor+0x46>
 8008166:	2c00      	cmp	r4, #0
 8008168:	da02      	bge.n	8008170 <floor+0xd0>
 800816a:	2e14      	cmp	r6, #20
 800816c:	d103      	bne.n	8008176 <floor+0xd6>
 800816e:	3401      	adds	r4, #1
 8008170:	ea25 0507 	bic.w	r5, r5, r7
 8008174:	e7b7      	b.n	80080e6 <floor+0x46>
 8008176:	2301      	movs	r3, #1
 8008178:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800817c:	fa03 f606 	lsl.w	r6, r3, r6
 8008180:	4435      	add	r5, r6
 8008182:	4545      	cmp	r5, r8
 8008184:	bf38      	it	cc
 8008186:	18e4      	addcc	r4, r4, r3
 8008188:	e7f2      	b.n	8008170 <floor+0xd0>
 800818a:	2500      	movs	r5, #0
 800818c:	462c      	mov	r4, r5
 800818e:	e7aa      	b.n	80080e6 <floor+0x46>
 8008190:	8800759c 	.word	0x8800759c
 8008194:	7e37e43c 	.word	0x7e37e43c
 8008198:	bff00000 	.word	0xbff00000
 800819c:	000fffff 	.word	0x000fffff

080081a0 <scalbn>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	ec55 4b10 	vmov	r4, r5, d0
 80081a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80081aa:	4606      	mov	r6, r0
 80081ac:	462b      	mov	r3, r5
 80081ae:	b99a      	cbnz	r2, 80081d8 <scalbn+0x38>
 80081b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80081b4:	4323      	orrs	r3, r4
 80081b6:	d036      	beq.n	8008226 <scalbn+0x86>
 80081b8:	4b39      	ldr	r3, [pc, #228]	; (80082a0 <scalbn+0x100>)
 80081ba:	4629      	mov	r1, r5
 80081bc:	ee10 0a10 	vmov	r0, s0
 80081c0:	2200      	movs	r2, #0
 80081c2:	f7f8 f9c5 	bl	8000550 <__aeabi_dmul>
 80081c6:	4b37      	ldr	r3, [pc, #220]	; (80082a4 <scalbn+0x104>)
 80081c8:	429e      	cmp	r6, r3
 80081ca:	4604      	mov	r4, r0
 80081cc:	460d      	mov	r5, r1
 80081ce:	da10      	bge.n	80081f2 <scalbn+0x52>
 80081d0:	a32b      	add	r3, pc, #172	; (adr r3, 8008280 <scalbn+0xe0>)
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	e03a      	b.n	800824e <scalbn+0xae>
 80081d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80081dc:	428a      	cmp	r2, r1
 80081de:	d10c      	bne.n	80081fa <scalbn+0x5a>
 80081e0:	ee10 2a10 	vmov	r2, s0
 80081e4:	4620      	mov	r0, r4
 80081e6:	4629      	mov	r1, r5
 80081e8:	f7f7 fffc 	bl	80001e4 <__adddf3>
 80081ec:	4604      	mov	r4, r0
 80081ee:	460d      	mov	r5, r1
 80081f0:	e019      	b.n	8008226 <scalbn+0x86>
 80081f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80081f6:	460b      	mov	r3, r1
 80081f8:	3a36      	subs	r2, #54	; 0x36
 80081fa:	4432      	add	r2, r6
 80081fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008200:	428a      	cmp	r2, r1
 8008202:	dd08      	ble.n	8008216 <scalbn+0x76>
 8008204:	2d00      	cmp	r5, #0
 8008206:	a120      	add	r1, pc, #128	; (adr r1, 8008288 <scalbn+0xe8>)
 8008208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800820c:	da1c      	bge.n	8008248 <scalbn+0xa8>
 800820e:	a120      	add	r1, pc, #128	; (adr r1, 8008290 <scalbn+0xf0>)
 8008210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008214:	e018      	b.n	8008248 <scalbn+0xa8>
 8008216:	2a00      	cmp	r2, #0
 8008218:	dd08      	ble.n	800822c <scalbn+0x8c>
 800821a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800821e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008222:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008226:	ec45 4b10 	vmov	d0, r4, r5
 800822a:	bd70      	pop	{r4, r5, r6, pc}
 800822c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008230:	da19      	bge.n	8008266 <scalbn+0xc6>
 8008232:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008236:	429e      	cmp	r6, r3
 8008238:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800823c:	dd0a      	ble.n	8008254 <scalbn+0xb4>
 800823e:	a112      	add	r1, pc, #72	; (adr r1, 8008288 <scalbn+0xe8>)
 8008240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e2      	bne.n	800820e <scalbn+0x6e>
 8008248:	a30f      	add	r3, pc, #60	; (adr r3, 8008288 <scalbn+0xe8>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f7f8 f97f 	bl	8000550 <__aeabi_dmul>
 8008252:	e7cb      	b.n	80081ec <scalbn+0x4c>
 8008254:	a10a      	add	r1, pc, #40	; (adr r1, 8008280 <scalbn+0xe0>)
 8008256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0b8      	beq.n	80081d0 <scalbn+0x30>
 800825e:	a10e      	add	r1, pc, #56	; (adr r1, 8008298 <scalbn+0xf8>)
 8008260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008264:	e7b4      	b.n	80081d0 <scalbn+0x30>
 8008266:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800826a:	3236      	adds	r2, #54	; 0x36
 800826c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008270:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008274:	4620      	mov	r0, r4
 8008276:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <scalbn+0x108>)
 8008278:	2200      	movs	r2, #0
 800827a:	e7e8      	b.n	800824e <scalbn+0xae>
 800827c:	f3af 8000 	nop.w
 8008280:	c2f8f359 	.word	0xc2f8f359
 8008284:	01a56e1f 	.word	0x01a56e1f
 8008288:	8800759c 	.word	0x8800759c
 800828c:	7e37e43c 	.word	0x7e37e43c
 8008290:	8800759c 	.word	0x8800759c
 8008294:	fe37e43c 	.word	0xfe37e43c
 8008298:	c2f8f359 	.word	0xc2f8f359
 800829c:	81a56e1f 	.word	0x81a56e1f
 80082a0:	43500000 	.word	0x43500000
 80082a4:	ffff3cb0 	.word	0xffff3cb0
 80082a8:	3c900000 	.word	0x3c900000

080082ac <fabsf>:
 80082ac:	ee10 3a10 	vmov	r3, s0
 80082b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082b4:	ee00 3a10 	vmov	s0, r3
 80082b8:	4770      	bx	lr
	...

080082bc <nanf>:
 80082bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80082c4 <nanf+0x8>
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	7fc00000 	.word	0x7fc00000

080082c8 <_init>:
 80082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ca:	bf00      	nop
 80082cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ce:	bc08      	pop	{r3}
 80082d0:	469e      	mov	lr, r3
 80082d2:	4770      	bx	lr

080082d4 <_fini>:
 80082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d6:	bf00      	nop
 80082d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082da:	bc08      	pop	{r3}
 80082dc:	469e      	mov	lr, r3
 80082de:	4770      	bx	lr
